# 牛牛游戏项目开发规范

本文档定义了牛牛游戏项目的开发规范，包括Solidity智能合约和Next.js前端开发的最佳实践。所有开发者应遵循这些规则，以确保代码质量、安全性和可维护性。

## Solidity 智能合约开发规范

### 安全性规范

1. **重入攻击防护**：
   - 实现检查-效果-交互模式 (Checks-Effects-Interactions)
   - 对外部调用使用重入锁 (ReentrancyGuard)
   - 在所有可能的外部调用前完成状态变更

2. **访问控制**：
   - 使用明确的角色和权限系统
   - 实现多级权限控制（管理员、运营者、用户等）
   - 为关键功能实现多重签名机制

3. **数据验证**：
   - 对所有输入参数进行严格验证
   - 使用require语句进行前置条件检查
   - 实现合理的边界检查和溢出防护

4. **合约升级机制**：
   - 使用代理模式实现可升级合约
   - 确保升级过程中的数据完整性
   - 实现明确的升级权限控制

5. **资金安全**：
   - 避免直接使用transfer/send，优先使用call方法发送ETH
   - 实现提款模式 (pull over push)
   - 实现紧急停止机制

### 效率优化规范

1. **Gas优化**：
   - 使用结构体打包数据以节省存储空间
   - 优化循环结构，避免无限循环
   - 使用事件记录状态变更而非存储不必要的数据
   - 优先使用memory而非storage进行临时数据处理

2. **存储优化**：
   - 合理使用mapping和array数据结构
   - 使用uint类型时选择最小的合适大小（uint8, uint16等）
   - 在结构体中合理排序变量以优化存储槽使用

3. **代码模块化**：
   - 使用继承和接口实现代码复用
   - 将通用功能抽象为库
   - 保持合约功能单一，避免过度复杂的合约

4. **测试覆盖**：
   - 为所有合约功能编写单元测试
   - 实现集成测试验证合约间交互
   - 进行形式化验证和安全审计

## Next.js 前端开发规范

### 代码组织与复用

1. **组件化开发**：
   - 遵循单一职责原则设计组件
   - 将UI组件和逻辑组件分离
   - 优先使用函数式组件和React Hooks

2. **库的使用**：
   - **优先使用现有开源库，避免重复造轮子**
   - 使用ethers.js/viem进行区块链交互
   - 使用wagmi/RainbowKit管理钱包连接
   - 使用TailwindCSS/shadcn/ui进行UI开发

3. **状态管理**：
   - 使用React Context API或Zustand进行状态管理
   - 合理划分全局状态和局部状态
   - 实现持久化存储关键用户数据

### 性能优化

1. **渲染优化**：
   - 实现组件懒加载和代码分割
   - 使用React.memo和useMemo优化渲染性能
   - 避免不必要的重渲染

2. **数据获取**：
   - 使用SWR或React Query进行数据获取和缓存
   - 实现合理的数据预取和缓存策略
   - 优化区块链数据查询，减少RPC调用

3. **响应式设计**：
   - 确保UI在各种设备上的良好表现
   - 使用scaffold-eth2框架提供的TailwindCSS响应式类进行布局
   - 利用scaffold-eth2的组件库实现一致的响应式UI
   - 考虑实现渐进式Web应用(PWA)特性提升移动端体验

### Web3交互规范

1. **合约交互**：
   - 编写hook时候多个read使用useReadContracts减少调用次数
   - 使用我自定义的writeContractWithCallback进行合约write
   - 实现交易状态跟踪和错误处理

2. **钱包集成**：
   - 使用scaffold-eth2内置的RainbowKit进行钱包连接
   - 实现优雅的钱包连接流程
   - 处理网络切换和账户变更事件

3. **用户体验**：
   - 提供明确的交易费用估算
   - 实现交易历史记录和状态查询
   - 为长时间操作提供反馈机制，如loading状态和交易确认通知

## 通用开发规范

1. **代码风格**：
   - 使用一致的命名约定（驼峰命名法）
   - 编写清晰的注释和文档
   - 使用ESLint和Prettier保持代码风格一致

2. **版本控制**：
   - 遵循语义化版本控制
   - 编写有意义的提交信息
   - 使用分支策略进行功能开发和修复

3. **安全实践**：
   - 避免在代码中硬编码敏感信息
   - 使用环境变量管理配置
   - 实现适当的错误处理和日志记录

4. **测试与部署**：
   - 编写单元测试和集成测试
   - 实现自动化测试和部署流程
   - 在测试网络充分测试后再部署主网

5. **文档与参考**：
   - 查询框架和库的文档时优先使用context7 MCP
   - 保持项目文档的更新，包括README和API文档
   - 记录关键设计决策和架构变更

## 项目特定规范

1. **游戏逻辑**：
   - 确保游戏规则在前端和合约中一致实现
   - 实现公平可验证的游戏逻辑

2. **资产管理**：
   - 实现安全的NFT铸造和交易机制
   - 优化游戏内资产的展示和管理
   - 提供清晰的资产所有权和历史记录

3. **用户体验**：
   - 设计直观的游戏界面和交互流程
   - 提供详细的游戏规则和帮助信息
   - 实现多语言支持和本地化
