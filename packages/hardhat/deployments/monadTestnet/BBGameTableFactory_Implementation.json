{
  "address": "0xd714f826EF451a4d98D78D9a65Ff328eb82f2893",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldImpl",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "ImplementationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beacon",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tableId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tableName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "bankerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "maxPlayers",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "gameMainAddr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "bankerFeePercent",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "firstRaise",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "secondRaise",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "rewardPoolId",
          "type": "uint256"
        }
      ],
      "name": "createGameTable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beacon",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "updateImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbabca67db3e7fa2ad670d0bf08db0f821f77d596429d7e788c9783117d64a3f2",
  "receipt": {
    "to": null,
    "from": "0xCf4eC0E2Fa3B3f1f706183128D729a9C86c69e4d",
    "contractAddress": "0xd714f826EF451a4d98D78D9a65Ff328eb82f2893",
    "transactionIndex": 6,
    "gasUsed": "1428560",
    "logsBloom": "0x
    "blockHash": "0x99b6e4b87e4d7c0007387e1bef876e8616554d4e499dc386f72d933494c93ae7",
    "transactionHash": "0xbabca67db3e7fa2ad670d0bf08db0f821f77d596429d7e788c9783117d64a3f2",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 15726289,
        "transactionHash": "0xbabca67db3e7fa2ad670d0bf08db0f821f77d596429d7e788c9783117d64a3f2",
        "address": "0xd714f826EF451a4d98D78D9a65Ff328eb82f2893",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 131,
        "blockHash": "0x99b6e4b87e4d7c0007387e1bef876e8616554d4e499dc386f72d933494c93ae7"
      }
    ],
    "blockNumber": 15726289,
    "cumulativeGasUsed": "2695327",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48576e987db7584d29c5cbb1887dec70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldImpl\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"ImplementationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bankerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"gameMainAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"firstRaise\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondRaise\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rewardPoolId\",\"type\":\"uint256\"}],\"name\":\"createGameTable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beacon\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"updateImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"\\u6e38\\u620f\\u684c\\u5de5\\u5382\\u5408\\u7ea6\\uff0c\\u4f7f\\u7528\\u4fe1\\u6807\\u4ee3\\u7406\\u6a21\\u5f0f\\u521b\\u5efa\\u6e38\\u620f\\u684c\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createGameTable(uint256,string,address,uint256,uint8,address,uint8,uint8,uint8,uint256)\":{\"details\":\"\\u521b\\u5efa\\u6e38\\u620f\\u684c\",\"params\":{\"bankerAddr\":\"\\u5e84\\u5bb6\\u5730\\u5740\",\"bankerFeePercent\":\"\\u5e84\\u5bb6\\u8d39\\u7528\\u767e\\u5206\\u6bd4\",\"betAmount\":\"\\u4e0b\\u6ce8\\u91d1\\u989d\",\"firstRaise\":\"\\u7b2c\\u4e00\\u8f6e\\u4e0b\\u6ce8\\u500d\\u6570\",\"gameMainAddr\":\"\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\",\"maxPlayers\":\"\\u6700\\u5927\\u73a9\\u5bb6\\u6570\",\"rewardPoolId\":\"\\u5956\\u6c60ID\",\"secondRaise\":\"\\u7b2c\\u4e8c\\u8f6e\\u4e0b\\u6ce8\\u500d\\u6570\",\"tableId\":\"\\u6e38\\u620f\\u684cID\",\"tableName\":\"\\u6e38\\u620f\\u684c\\u540d\\u79f0\"},\"returns\":{\"_0\":\"\\u65b0\\u521b\\u5efa\\u7684\\u6e38\\u620f\\u684c\\u5730\\u5740\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateImplementation(address)\":{\"details\":\"\\u66f4\\u65b0\\u5b9e\\u73b0\\u5408\\u7ea6\\u5730\\u5740\\uff08\\u901a\\u8fc7\\u4fe1\\u6807\\uff09\",\"params\":{\"_implementation\":\"\\u65b0\\u7684\\u5b9e\\u73b0\\u5408\\u7ea6\\u5730\\u5740\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"BBGameTableFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BBGameTableFactory.sol\":\"BBGameTableFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd861907d1168dcaec2a7846edbaed12feb8bad2d6781dba987be01374f90b495\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\nimport {Proxy} from \\\"../Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"../ERC1967/ERC1967Utils.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\\n *\\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] so that it can be accessed externally.\\n *\\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\\n * the beacon to not upgrade the implementation maliciously.\\n *\\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\\n * an inconsistent state where the beacon storage slot does not match the beacon address.\\n */\\ncontract BeaconProxy is Proxy {\\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\\n    address private immutable _beacon;\\n\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\\n        _beacon = beacon;\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Returns the beacon.\\n     */\\n    function _getBeacon() internal view virtual returns (address) {\\n        return _beacon;\\n    }\\n}\\n\",\"keccak256\":\"0xef92aebf99249a8ac1d682b9a0f04b6f2af2a8f631cb126625bab15bafcefda8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/UpgradeableBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"./IBeacon.sol\\\";\\nimport {Ownable} from \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\\n * implementation contract, which is where they will delegate all function calls.\\n *\\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\\n */\\ncontract UpgradeableBeacon is IBeacon, Ownable {\\n    address private _implementation;\\n\\n    /**\\n     * @dev The `implementation` of the beacon is invalid.\\n     */\\n    error BeaconInvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev Emitted when the implementation returned by the beacon is changed.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\\n     */\\n    constructor(address implementation_, address initialOwner) Ownable(initialOwner) {\\n        _setImplementation(implementation_);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function implementation() public view virtual returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @dev Upgrades the beacon to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * Requirements:\\n     *\\n     * - msg.sender must be the owner of the contract.\\n     * - `newImplementation` must be a contract.\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\\n        _setImplementation(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation contract address for this beacon\\n     *\\n     * Requirements:\\n     *\\n     * - `newImplementation` must be a contract.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert BeaconInvalidImplementation(newImplementation);\\n        }\\n        _implementation = newImplementation;\\n        emit Upgraded(newImplementation);\\n    }\\n}\\n\",\"keccak256\":\"0x5920bac7215d12961e23b207f6e81a1d64aa4935a4469abe95b64a96a3c3007b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"contracts/BBGameTableFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"./BBInterfaces.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BBGameTableFactory\\r\\n * @dev \\u6e38\\u620f\\u684c\\u5de5\\u5382\\u5408\\u7ea6\\uff0c\\u4f7f\\u7528\\u4fe1\\u6807\\u4ee3\\u7406\\u6a21\\u5f0f\\u521b\\u5efa\\u6e38\\u620f\\u684c\\r\\n */\\r\\ncontract BBGameTableFactory is Initializable, OwnableUpgradeable, UUPSUpgradeable {\\r\\n    // \\u4fe1\\u6807\\u5408\\u7ea6\\u5730\\u5740\\r\\n    address public beacon;\\r\\n    \\r\\n    // \\u7248\\u672c\\u53f7\\uff0c\\u7528\\u4e8e\\u8ddf\\u8e2a\\u5b9e\\u73b0\\u5408\\u7ea6\\u7684\\u7248\\u672c\\r\\n    uint256 public version;\\r\\n\\r\\n    // \\u9884\\u7559 5 \\u4e2a slot \\u7ed9\\u5c06\\u6765\\u65b0\\u589e\\u53d8\\u91cf\\u7528\\uff0c\\u9632\\u6b62\\u5b58\\u50a8\\u51b2\\u7a81\\r\\n    uint256[5] private __gap;\\r\\n    \\r\\n    // \\u4e8b\\u4ef6\\r\\n    event ImplementationUpdated(address indexed oldImpl, address indexed newImpl, uint256 version);\\r\\n    \\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n    \\r\\n    function initialize(address _beacon) public initializer {\\r\\n        __Ownable_init(msg.sender);\\r\\n        __UUPSUpgradeable_init();\\r\\n        \\r\\n        beacon = _beacon;\\r\\n        version = 1;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u66f4\\u65b0\\u5b9e\\u73b0\\u5408\\u7ea6\\u5730\\u5740\\uff08\\u901a\\u8fc7\\u4fe1\\u6807\\uff09\\r\\n     * @param _implementation \\u65b0\\u7684\\u5b9e\\u73b0\\u5408\\u7ea6\\u5730\\u5740\\r\\n     */\\r\\n    function updateImplementation(address _implementation) external onlyOwner {\\r\\n        require(_implementation != address(0), \\\"Invalid implementation address\\\");\\r\\n        \\r\\n        // \\u83b7\\u53d6\\u5f53\\u524d\\u5b9e\\u73b0\\u5730\\u5740\\r\\n        address oldImpl = UpgradeableBeacon(beacon).implementation();\\r\\n        \\r\\n        // \\u66f4\\u65b0\\u4fe1\\u6807\\u4e2d\\u7684\\u5b9e\\u73b0\\u5730\\u5740\\r\\n        UpgradeableBeacon(beacon).upgradeTo(_implementation);\\r\\n        \\r\\n        version++;\\r\\n        \\r\\n        emit ImplementationUpdated(oldImpl, _implementation, version);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u521b\\u5efa\\u6e38\\u620f\\u684c\\r\\n     * @param tableId \\u6e38\\u620f\\u684cID\\r\\n     * @param tableName \\u6e38\\u620f\\u684c\\u540d\\u79f0\\r\\n     * @param bankerAddr \\u5e84\\u5bb6\\u5730\\u5740\\r\\n     * @param betAmount \\u4e0b\\u6ce8\\u91d1\\u989d\\r\\n     * @param maxPlayers \\u6700\\u5927\\u73a9\\u5bb6\\u6570\\r\\n     * @param gameMainAddr \\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\\r\\n     * @param bankerFeePercent \\u5e84\\u5bb6\\u8d39\\u7528\\u767e\\u5206\\u6bd4\\r\\n     * @param firstRaise \\u7b2c\\u4e00\\u8f6e\\u4e0b\\u6ce8\\u500d\\u6570\\r\\n     * @param secondRaise \\u7b2c\\u4e8c\\u8f6e\\u4e0b\\u6ce8\\u500d\\u6570\\r\\n     * @param rewardPoolId \\u5956\\u6c60ID\\r\\n     * @return \\u65b0\\u521b\\u5efa\\u7684\\u6e38\\u620f\\u684c\\u5730\\u5740\\r\\n     */\\r\\n    function createGameTable(\\r\\n        uint256 tableId,\\r\\n        string memory tableName,\\r\\n        address bankerAddr,\\r\\n        uint256 betAmount,\\r\\n        uint8 maxPlayers,\\r\\n        address gameMainAddr,\\r\\n        uint8 bankerFeePercent,\\r\\n        uint8 firstRaise,\\r\\n        uint8 secondRaise,\\r\\n        uint256 rewardPoolId\\r\\n    ) external returns (address) {\\r\\n        // \\u51c6\\u5907\\u521d\\u59cb\\u5316\\u6570\\u636e\\r\\n        bytes memory initData = abi.encodeWithSelector(\\r\\n            IGameTableImplementation.initialize.selector,\\r\\n            tableId,\\r\\n            tableName,\\r\\n            bankerAddr,\\r\\n            betAmount,\\r\\n            maxPlayers,\\r\\n            gameMainAddr,\\r\\n            bankerFeePercent,\\r\\n            firstRaise,\\r\\n            secondRaise,\\r\\n            rewardPoolId,\\r\\n            version\\r\\n        );\\r\\n        \\r\\n        // \\u521b\\u5efa\\u6307\\u5411\\u4fe1\\u6807\\u7684\\u4ee3\\u7406\\r\\n        BeaconProxy proxy = new BeaconProxy(beacon, initData);\\r\\n        \\r\\n        return address(proxy);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev \\u6388\\u6743\\u5347\\u7ea7\\r\\n     */\\r\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\r\\n}\",\"keccak256\":\"0x13855bfb5019b9da17f172914e420ebe99fa4f0d74d657ec07126555f12795e5\",\"license\":\"MIT\"},\"contracts/BBInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\nimport \\\"./BBStructs.sol\\\";\\r\\n\\r\\ninterface IGameTableFactory {\\r\\n    function createGameTable(\\r\\n        uint256 tableId,\\r\\n        string memory tableName,\\r\\n        address bankerAddr,\\r\\n        uint256 betAmount,\\r\\n        uint8 maxPlayers,\\r\\n        address gameMainAddr,\\r\\n        uint8 bankerFeePercent,\\r\\n        uint8 firstRaise,\\r\\n        uint8 secondRaise,\\r\\n        uint256 rewardPoolId\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IGameTableImplementation {\\r\\n    function bankerAddr() external view returns (address);\\r\\n    function getTableInfo() external view returns (GameTableView memory);\\r\\n    function getTableInfoShort() external view returns (GameTableInfoShort memory);\\r\\n    function lastActivityTimestamp() external view returns (uint256);\\r\\n    function state() external view returns (GameState);\\r\\n    function rewardPoolId() external view returns (uint256);\\r\\n    function initialize(\\r\\n        uint256 _tableId,\\r\\n        string memory _tableName,\\r\\n        address _bankerAddr,\\r\\n        uint256 _betAmount,\\r\\n        uint8 _maxPlayers,\\r\\n        address _gameMainAddr,\\r\\n        uint8 _bankerFeePercent,\\r\\n        uint8 _firstRaise,\\r\\n        uint8 _secondRaise,\\r\\n        uint256 _rewardPoolId,\\r\\n        uint256 _implementationVersion\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IGameMain {\\r\\n    function isValidGameTable(address) external view returns (bool);\\r\\n    function liquidatorFeePercent() external view returns (uint256);\\r\\n    function playerTimeout() external view returns (uint256);\\r\\n    function tableInactiveTimeout() external view returns (uint256);\\r\\n    function rewardPoolAddress() external view returns (address);\\r\\n    function roomCardAddress() external view returns (address);\\r\\n    function roomLevelAddress() external view returns (address);\\r\\n    function getGameConfig() external view returns (GameConfig memory);\\r\\n    function rewardPoolIsInUse(address, uint256) external view returns (bool);\\r\\n    function userJoinTable(address userAddr) external;\\r\\n    function userLeaveTable(address userAddr) external;\\r\\n}\\r\\n\\r\\ninterface IRewardPool{\\r\\n    function tryDistributeReward(uint256 _poolId, address[] calldata _players, uint256 finalSeed) external  returns (address, uint256);\\r\\n    function isBankerPool(address, uint256) external view returns (bool);\\r\\n    function getRewardPoolInfo(address, uint256) external view returns (RewardPoolInfo memory);\\r\\n}\\r\\n\\r\\ninterface IRoomCardNFT{\\r\\n    function validateParams(uint256, uint8) external view returns (bool);\\r\\n    function hasNft(address) external view returns (bool);\\r\\n    function consume(address, uint256) external;\\r\\n}\",\"keccak256\":\"0x31bc037d6f22f39b622e76414b6b77535958a3a9c37b07cce084179c2e9ea136\",\"license\":\"MIT\"},\"contracts/BBPlayer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\n\\r\\nstruct BBPlayer {\\r\\n    address addr;\\r\\n    PlayerState state;\\r\\n\\r\\n    uint256 totalBet;\\r\\n\\r\\n    bool hasActedThisRound;   // \\u672c\\u8f6e\\u662f\\u5426\\u5df2\\u64cd\\u4f5c\\r\\n    bool isWinner;   // \\u662f\\u5426\\u4e3a\\u8d62\\u5bb6\\r\\n\\r\\n    uint8[5] cards;\\r\\n    CardType cardType;\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\nlibrary BBPlayerLib {\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u51c6\\u5907\\r\\n     */\\r\\n    function playerReady(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.READY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u53d6\\u6d88\\u51c6\\u5907\\r\\n     */\\r\\n    function playerUnready(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u52a0\\u5165\\r\\n     */\\r\\n    function playerJoin(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u5f03\\u724c\\r\\n     */\\r\\n    function playerFold(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.FOLDED;\\r\\n        self.hasActedThisRound = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u7ee7\\u7eed\\u6e38\\u620f\\r\\n     */\\r\\n    function playerContinue(BBPlayer storage self, uint256 additionalBet) internal {\\r\\n        self.totalBet += additionalBet;\\r\\n        self.state = PlayerState.ACTIVE;\\r\\n        self.hasActedThisRound = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u662f\\u5426\\u6709\\u6548\\r\\n     */\\r\\n    function isValid(BBPlayer storage self) internal view returns (bool) {\\r\\n        return self.addr != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u91cd\\u7f6e\\u73a9\\u5bb6\\u6570\\u636e\\r\\n     */\\r\\n    function playerReset(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n        self.hasActedThisRound = false;\\r\\n        self.totalBet = 0;\\r\\n        self.isWinner = false;\\r\\n        self.cards = [0, 0, 0, 0, 0];\\r\\n        self.cardType = CardType.NONE;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf7d1ee4658a50be6690b6c085733ceb592f91baa15b7b7fb5e27a30e1ae7e215\",\"license\":\"UNLICENSED\"},\"contracts/BBStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\nimport \\\"./BBPlayer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BBStructs\\r\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u7ed3\\u6784\\u4f53\\u5b9a\\u4e49\\r\\n */\\r\\n\\r\\nstruct GameConfig {\\r\\n    uint8 maxRoomCount;\\r\\n    uint8 maxPlayers;\\r\\n    uint8 maxJoinTablesCount;\\r\\n    uint8 maxBankerFeePercent;\\r\\n    uint256 playerTimeout;\\r\\n    uint256 tableInactiveTimeout;\\r\\n    uint8 liquidatorFeePercent;\\r\\n    address gameMainAddress;\\r\\n    address rewardPoolAddress;\\r\\n    address roomCardAddress;\\r\\n    address roomLevelAddress;\\r\\n    address gameTableFactoryAddress;\\r\\n}\\r\\n\\r\\n// \\u5956\\u52b1\\u6c60\\u7ed3\\u6784\\r\\nstruct RewardPoolInfo {\\r\\n    uint256 poolId;           // \\u5956\\u52b1\\u6c60ID\\r\\n    string name;              // \\u5956\\u52b1\\u6c60\\u540d\\u79f0\\r\\n    address banker;           // \\u521b\\u5efa\\u8005\\uff08\\u5e84\\u5bb6\\uff09\\u5730\\u5740\\r\\n    uint256 totalAmount;      // \\u603b\\u5956\\u6c60\\u91d1\\u989d\\r\\n    uint256 rewardPerGame;    // \\u6bcf\\u5c40\\u6e38\\u620f\\u5956\\u52b1\\u91d1\\u989d\\r\\n    uint256 winProbability;   // \\u4e2d\\u5956\\u6982\\u7387\\uff08\\u4ee5\\u767e\\u5206\\u4e4b\\u4e00\\u4e3a\\u5355\\u4f4d\\uff09\\r\\n    uint256 remainingAmount;  // \\u5269\\u4f59\\u5956\\u6c60\\u91d1\\u989d\\r\\n    bool inUse;              // \\u662f\\u5426\\u6b63\\u5728\\u4f7f\\u7528\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\nstruct RoomCardNftType {\\r\\n    uint256 id;              // Unique identifier for the card type\\r\\n    string name;             // Name of the card type (e.g., \\\"SILVER\\\", \\\"GOLD\\\", \\\"DIAMOND\\\")\\r\\n    uint8 maxPlayers;        // Maximum number of players allowed\\r\\n    uint256 price;           // Price to purchase this card\\r\\n    string uriSuffix;        // URI suffix for metadata\\r\\n    bool active;             // Whether this card type is active\\r\\n    uint256 maxMint;         // Maximum mint amount for this card type\\r\\n    string rarity;           // Rarity of the card type\\r\\n    uint256 minted;          // \\u5df2mint\\u6570\\u91cf\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\n// \\u5b9a\\u4e49\\u5361\\u7247\\u8be6\\u7ec6\\u4fe1\\u606f\\u7ed3\\u6784\\u4f53\\r\\nstruct RoomCardNftDetail {\\r\\n    uint256 tokenId;       // \\u5361\\u7247\\u7684token ID\\r\\n    RoomCardNftType nftType;     // \\u7ee7\\u627fCardType\\u7684\\u6240\\u6709\\u5c5e\\u6027\\r\\n}\\r\\n\\r\\n// Room level structure\\r\\nstruct RoomLevelNftType {\\r\\n    uint256 id;              // Unique identifier for the level type\\r\\n    string name;             // Name of the level (e.g., \\\"BRONZE\\\", \\\"SILVER\\\", \\\"GOLD\\\")\\r\\n    uint256 maxRooms;        // Maximum number of rooms allowed with this level\\r\\n    uint256 price;           // Price to purchase this level\\r\\n    string uriSuffix;        // URI suffix for metadata\\r\\n    bool active;             // Whether this level type is active\\r\\n    uint256 maxMint;         // Maximum mint amount for this level type\\r\\n    uint256 minted;          // Already minted amount for this level type\\r\\n    string rarity;           // Rarity of this level type\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\n// Level details structure for returning comprehensive information\\r\\nstruct RoomLevelNftDetail {\\r\\n    uint256 tokenId;         // Level token ID\\r\\n    RoomLevelNftType nftType;     // Level type information\\r\\n}\\r\\n\\r\\n// \\u6dfb\\u52a0\\u4e00\\u4e2a\\u65b0\\u7684\\u7ed3\\u6784\\u4f53\\u7528\\u4e8e\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\r\\nstruct GameTableView {\\r\\n    bool active;\\r\\n    uint256 gameRound;\\r\\n    uint256 gameLiquidatedCount;\\r\\n    address tableAddr; // \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\r\\n    uint256 tableId;\\r\\n    string tableName;\\r\\n    address bankerAddr;\\r\\n    uint256 betAmount;\\r\\n    uint8 bankerFeePercent;\\r\\n    uint256 totalPrizePool;\\r\\n    uint8 playerCount;\\r\\n    uint8 maxPlayers;\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 liquidateDeadline;\\r\\n    GameState state;\\r\\n    uint8 liquidatorFeePercent;\\r\\n    uint8 playerContinuedCount;\\r\\n    uint8 playerReadyCount;\\r\\n    address[] playerAddresses;\\r\\n    uint256 currentRoundDeadline;\\r\\n    uint256 playerTimeout;\\r\\n    uint256 tableInactiveTimeout;\\r\\n    uint256 lastActivityTimestamp;\\r\\n    uint256 rewardPoolId;\\r\\n    RewardPoolInfo rewardPoolInfo; // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\r\\n    uint256 implementationVersion; // \\u6dfb\\u52a0\\u5b9e\\u73b0\\u7248\\u672c\\u53f7\\r\\n    uint8 firstBetX;\\r\\n    uint8 secondBetX;\\r\\n    uint256 bankerStakeAmount;\\r\\n    bool canNext;\\r\\n    string nextTitle;\\r\\n    string nextReason;\\r\\n    address rewardAddr;\\r\\n    uint256 rewardAmount;\\r\\n    string chatGroupId;\\r\\n}\\r\\n\\r\\n// \\u6dfb\\u52a0\\u4e00\\u4e2a\\u65b0\\u7684\\u7ed3\\u6784\\u4f53\\u7528\\u4e8e\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\r\\nstruct GameTableInfoShort {\\r\\n    bool active;\\r\\n    uint256 gameRound;\\r\\n    uint256 gameLiquidatedCount;\\r\\n    address tableAddr; // \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\r\\n    uint256 tableId;\\r\\n    string tableName;\\r\\n    address bankerAddr;\\r\\n    uint256 betAmount;\\r\\n    uint8 bankerFeePercent;\\r\\n    uint8 playerCount;\\r\\n    uint8 maxPlayers;\\r\\n    GameState state;\\r\\n    uint256 lastActivityTimestamp;\\r\\n    uint256 rewardPoolId;\\r\\n    RewardPoolInfo rewardPoolInfo; // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\r\\n}\\r\\n\\r\\nstruct UserInfo {\\r\\n    address[] tables;\\r\\n    address[] joinedTables;\\r\\n    mapping(address => uint256) joinedTableIndex;\\r\\n}\",\"keccak256\":\"0xf75acf148a2fd7e4aff569ca797a3ba47d2e2917109bf6839e0b00a496adcfe1\",\"license\":\"UNLICENSED\"},\"contracts/BBTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\n/**\\r\\n * @title BBTypes\\r\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u7c7b\\u578b\\u5b9a\\u4e49\\r\\n */\\r\\n\\r\\n// \\u6e38\\u620f\\u72b6\\u6001\\r\\nenum GameState {\\r\\n    NONE,\\r\\n    WAITING,\\r\\n    FIRST_BETTING,\\r\\n    SECOND_BETTING,\\r\\n    ENDED,\\r\\n    SETTLED,\\r\\n    LIQUIDATED\\r\\n}\\r\\n\\r\\n// \\u73a9\\u5bb6\\u72b6\\u6001\\r\\nenum PlayerState {\\r\\n    NONE,\\r\\n    JOINED,\\r\\n    READY,\\r\\n    ACTIVE,       // \\u5f53\\u524d\\u53c2\\u4e0e\\u6e38\\u620f\\u4e2d\\uff0c\\u672a\\u5f03\\u724c\\r\\n    FOLDED        // \\u5f03\\u724c\\r\\n}\\r\\n\\r\\n// \\u724c\\u578b\\r\\nenum CardType {\\r\\n    NONE,\\r\\n    NO_BULL,\\r\\n    BULL_1,\\r\\n    BULL_2,\\r\\n    BULL_3,\\r\\n    BULL_4,\\r\\n    BULL_5,\\r\\n    BULL_6,\\r\\n    BULL_7,\\r\\n    BULL_8,\\r\\n    BULL_9,\\r\\n    BULL_BULL,\\r\\n    FIVE_BOMB,\\r\\n    FIVE_SMALL,\\r\\n    FIVE_FLOWERS\\r\\n}\\r\\n\",\"keccak256\":\"0xf2839d776336a822efd1a9145374f9ad2ea44de1a7721be8bb4b201cd29c2e64\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523461003257610011610037565b60405161182c6101b18239608051818181610d410152610eab015261182c90f35b600080fd5b61003f61007e565b610047610102565b565b61005d90610060906001600160a01b031682565b90565b6001600160a01b031690565b61005d90610049565b61005d9061006c565b61008730610075565b608052565b61005d9060401c60ff1690565b61005d905461008c565b61005d905b6001600160401b031690565b61005d90546100a3565b61005d906100a8906001600160401b031682565b906100e261005d6100fe926100be565b82546001600160401b0319166001600160401b03919091161790565b9055565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061012c81610099565b61019e57610139816100b4565b6001600160401b0391908290811603610150575050565b8161017f7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d293610199936100d2565b604051918291826001600160401b03909116815260200190565b0390a1565b63f92ee8a960e01b6000908152600490fdfe6080604052600436101561001257600080fd5b60003560e01c8063025b22bc146100c25780634f1ef286146100bd57806352d1902d146100b857806354fd4d50146100b357806359659e90146100ae57806369e949ca146100a9578063715018a6146100a45780638da5cb5b1461009f578063ad3cb1cc1461009a578063c4d66de8146100955763f2fde38b036100c757610536565b61051e565b6104f7565b61042f565b610417565b6103ef565b6102fa565b61029c565b61024e565b61022b565b61010e565b600080fd5b6001600160a01b031690565b90565b6100e4816100cc565b036100c757565b905035906100f8826100db565b565b906020828203126100c7576100d8916100eb565b346100c7576101266101213660046100fa565b610825565b60405180805b0390f35b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761016757604052565b610130565b906100f861017960405190565b9283610146565b6001600160401b03811161016757602090601f01601f19160190565b0190565b90826000939282370152565b909291926101c16101bc82610180565b61016c565b93818552818301116100c7576100f89160208501906101a0565b9080601f830112156100c7578160206100d8933591016101ac565b9190916040818403126100c75761020d83826100eb565b9260208201356001600160401b0381116100c7576100d892016101db565b6101266102393660046101f6565b9061084e565b60009103126100c757565b9052565b346100c75761025e36600461023f565b61012c61026961089b565b6040515b9182918290815260200190565b6100d8916008021c81565b906100d8915461027a565b6100d860006001610285565b346100c7576102ac36600461023f565b61012c610269610290565b6100d8916008021c6001600160a01b031690565b906100d891546102b7565b6100d86000806102cb565b61024a906100cc565b6020810192916100f891906102e1565b346100c75761030a36600461023f565b61012c6103156102d6565b604051918291826102ea565b806100e4565b905035906100f882610321565b60ff81166100e4565b905035906100f882610334565b610140818303126100c75761035f8282610327565b9260208201356001600160401b0381116100c7578361037f9184016101db565b9261038d81604085016100eb565b9261039b8260608301610327565b926103a9836080840161033d565b926103b78160a085016100eb565b926103c58260c0830161033d565b926100d86103d68460e0850161033d565b936101206103e882610100870161033d565b9401610327565b346100c75761012c61031561040536600461034a565b98979097969196959295949394610946565b346100c75761042736600461023f565b610126610a04565b346100c75761043f36600461023f565b61012c610315610a0c565b906104576101bc83610180565b918252565b610466600561044a565b640352e302e360dc1b602082015290565b6100d861045c565b6100d8610477565b6100d861047f565b60005b8381106104a25750506000910152565b8181015183820152602001610492565b6104d36104dc60209361019c936104c7815190565b80835293849260200190565b9586910161048f565b601f01601f191690565b60208082526100d8929101906104b2565b346100c75761050736600461023f565b61012c610512610487565b604051918291826104e6565b346100c7576101266105313660046100fa565b610c90565b346100c7576101266105493660046100fa565b610ceb565b6100f89061055a610cf4565b61069f565b6100cc6100d86100d89290565b6100d89061055f565b1561057c57565b60405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420696d706c656d656e746174696f6e20616464726573730000604482015280606481015b0390fd5b6100d8906100cc565b6100d890546105c6565b6100d8906100cc906001600160a01b031682565b6100d8906105d9565b6100d8906105ed565b905051906100f8826100db565b906020828203126100c7576100d8916105ff565b6040513d6000823e3d90fd5b6100d89081565b6100d8905461062c565b634e487b7160e01b600052601160045260246000fd5b60001981146106625760010190565b61063d565b90600019905b9181191691161790565b6100d86100d86100d89290565b906106946100d861069b92610677565b8254610667565b9055565b6000906106c66106b66106b18461056c565b6100cc565b6106bf836100cc565b1415610575565b6106da6106d56106d5846105cf565b6105f6565b9160206106e660405190565b635c60da1b60e01b815293849060049082905afa9283156107ef5781936107f4575b506107186106d56106d5836105cf565b803b156100c7578161072960405190565b918290631b2ce7f360e11b825281838161074689600483016102ea565b03925af180156107ef576107c2575b505061077361076c6107676001610633565b610653565b6001610684565b7fbe444e048be48a02d3602a86d2210c4cfd09be329f36642c342d033ef98a50096107bd6107b36107ad6107a76001610633565b956105f6565b936105f6565b9361026d60405190565b0390a3565b816107e192903d106107e8575b6107d98183610146565b81019061023f565b3880610755565b503d6107cf565b610620565b61081791935060203d60201161081e575b61080f8183610146565b81019061060c565b9138610708565b503d610805565b6100f89061054e565b906100f89161083b610d36565b906100f89161084981610db6565b610de0565b906100f89161082e565b6100d890610864610e9a565b610892565b6100d87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610677565b506100d8610869565b6100d86000610858565b989694929b9a9997959391906101608a019060008b016108c3919052565b89810360208b01526108d4916104b2565b9a604089016108e2916102e1565b606088015260ff16608087015260a086016108fc916102e1565b60ff1660c085015260ff1660e084015260ff166101008301526101208201526101400152565b916100d892610939604082019360008301906102e1565b60208184039101526104b2565b946004999461099a99946020999461098b9994610961600090565b5061096c6001610633565b9961097660405190565b9e8f9d8e016331cd894360e11b8152016108a5565b60208201810382520382610146565b6109a460006105cf565b604051916106968301908382106001600160401b038311176101675783926109d39261069661118a8639610922565b03906000f080156107ef576100d8906105f6565b6109ef610cf4565b6100f86100f86109ff600061056c565b610ed6565b6100f86109e7565b6100d860007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b016105cf565b6100d89060401c60ff1690565b6100d89054610a39565b6100d8905b6001600160401b031690565b6100d89054610a50565b610a556100d86100d89290565b906001600160401b039061066d565b610a556100d86100d8926001600160401b031690565b90610aad6100d861069b92610a87565b8254610a78565b9060ff60401b9060401b61066d565b90610ad36100d861069b92151590565b8254610ab4565b61024a90610a6b565b6020810192916100f89190610ada565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081610b2f610b29610b2583610a46565b1590565b91610a61565b90600092610b3c84610a6b565b6001600160401b0384161480610c3a575b600193610b69610b5c86610a6b565b916001600160401b031690565b149081610c12575b155b9081610c09575b50610bfa57610ba39082610b9a86610b9187610a6b565b98019788610a9d565b610beb57610c67565b610bac57505050565b610bda610be6927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d294610ac3565b60405191829182610ae3565b0390a1565b610bf58487610ac3565b610c67565b63f92ee8a960e01b8452600484fd5b15905038610b7a565b9050610b73610c20306105f6565b3b610c31610c2d88610677565b9190565b14919050610b71565b5081610b4d565b906001600160a01b039061066d565b90610c606100d861069b926105f6565b8254610c41565b610c8390610c7433610f5d565b610c7c610f6e565b6000610c50565b6100f861076c6001610677565b6100f890610af3565b6100f890610ca5610cf4565b6000610cb08161056c565b610cb9816100cc565b610cc2846100cc565b14610cd25750506100f890610ed6565b631e4fbdf760e01b825281906105c290600483016102ea565b6100f890610c99565b610cfc610a0c565b3390610d10610d0a836100cc565b916100cc565b03610d185750565b63118cdaa760e01b600090815290610d319060046102ea565b036000fd5b610d3f306105f6565b7f000000000000000000000000000000000000000000000000000000000000000090610d6d610d0a836100cc565b14908115610d8f575b50610d7d57565b63703e46dd60e11b6000908152600490fd5b9050610da5610d0a610d9f610f76565b926100cc565b141538610d76565b506100f8610cf4565b6100f890610dad565b905051906100f882610321565b906020828203126100c7576100d891610dbf565b91610ded6106d5846105f6565b916020610df960405190565b6352d1902d60e01b815293849060049082905afa60009381610e69575b50610e3357634c9c8ce360e01b6000908152610d318560046102ea565b909192610e416100d8610869565b8403610e52576100f8929350610f86565b632a87526960e21b60009081526004859052602490fd5b610e8c91945060203d602011610e93575b610e848183610146565b810190610dcc565b9238610e16565b503d610e7a565b610ea3306105f6565b610ecf610d0a7f00000000000000000000000000000000000000000000000000000000000000006100cc565b03610d7d57565b610f16610f107f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993006106d584610f0a836105cf565b92610c50565b916105f6565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0610f4160405190565b80806107bd565b6100f890610f54610ff2565b6100f890611021565b6100f890610f48565b6100f8610ff2565b6100f8610f66565b6100d86000610a336100d8610869565b90610f908261102a565b610f99826105f6565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b610fc360405190565b600090a28051610fd6610c2d6000610677565b1115610fe857610fe5916110af565b50565b50506100f861106d565b610ffd610b256110d6565b61100357565b631afcd79f60e31b6000908152600490fd5b6100f890610ca5610ff2565b6100f890611015565b6000813b61103a610c2d83610677565b1461105557906100f89161104f6100d8610869565b01610c50565b6105c28192634c9c8ce360e01b8352600483016102ea565b600061107881610677565b34116110815750565b63b398979f60e01b8152600490fd5b3d156110aa5761109f3d61044a565b903d6000602084013e565b606090565b6000806100d8936110be606090565b50602081519101845af46110d0611090565b916110ff565b6100d87ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610a46565b9061110a575061115a565b81519060009161111c610c2d84610677565b1480611145575b61112c57505090565b639996b31560e01b825281906105c290600483016102ea565b50803b611154610c2d84610677565b14611123565b805160009061116b610c2d83610677565b111561117a5750805190602001fd5b63d6bda27560e01b8152600490fdfe60a060405261001561000f610171565b90610193565b60405161018361051382396080518160cf015261018390f35b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006557604052565b61002e565b9061007e61007760405190565b9283610044565b565b6001600160a01b031690565b90565b6001600160a01b038116036100a057565b600080fd5b9050519061007e8261008f565b6001600160401b03811161006557602090601f01601f19160190565b60005b8381106100e15750506000910152565b81810151838201526020016100d1565b90929192610106610101826100b2565b61006a565b93818552818301116100a05761007e9160208501906100ce565b9080601f830112156100a057815161008c926020016100f1565b9190916040818403126100a05761015183826100a5565b60208201519093906001600160401b0381116100a05761008c9201610120565b61018f610696803803806101848161006a565b92833981019061013a565b9091565b9061019e90826101f6565b608052565b61008c90610080906001600160a01b031682565b61008c906101a3565b61008c906101b7565b61008c61008c61008c9290565b906020828203126100a05761008c916100a5565b6040513d6000823e3d90fd5b6101ff81610345565b610208816101c0565b7f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e61023260405190565b600090a2815161024961024560006101c9565b9190565b11156102cf5761025b610260916101c0565b6101c0565b90602061026c60405190565b635c60da1b60e01b815292839060049082905afa80156102ca576102989260009161029b575b50610466565b50565b6102bd915060203d6020116102c3575b6102b58183610044565b8101906101d6565b38610292565b503d6102ab565b6101ea565b505061007e610412565b6001600160a01b03909116815260200190565b61008c7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506101c9565b9061032561008c610341926101c0565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b600090803b610356610245846101c9565b146103f95761025b8161025b610378938561037261008c6102ec565b01610315565b602061038360405190565b635c60da1b60e01b815291829060049082905afa9081156102ca5782916103da575b50803b6103b4610245846101c9565b146103bd575050565b634c9c8ce360e01b825281906103d690600483016102d9565b0390fd5b6103f3915060203d6020116102c3576102b58183610044565b386103a5565b631933b43b60e21b825281906103d690600483016102d9565b600061041d816101c9565b34116104265750565b63b398979f60e01b8152600490fd5b90610442610101836100b2565b918252565b3d15610461576104563d610435565b903d6000602084013e565b606090565b60008061008c93610475606090565b50602081519101845af4610487610447565b919061049357506104e3565b8151906000916104a5610245846101c9565b14806104ce575b6104b557505090565b639996b31560e01b825281906103d690600483016102d9565b50803b6104dd610245846101c9565b146104ac565b80516000906104f4610245836101c9565b11156105035750805190602001fd5b63d6bda27560e01b8152600490fdfe608060405261000c6100c7565b610155565b61002590610028906001600160a01b031682565b90565b6001600160a01b031690565b61002590610011565b61002590610034565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761007e57604052565b610046565b61008c81610028565b0361009357565b600080fd5b905051906100a582610083565b565b906020828203126100935761002591610098565b6040513d6000823e3d90fd5b6100f66100f17f000000000000000000000000000000000000000000000000000000000000000081565b61003d565b602061010160405190565b635c60da1b60e01b815291829060049082905afa90811561015057600091610127575090565b610025915060203d602011610149575b610141818361005c565b8101906100a7565b503d610137565b6100bb565b60008091368280378136915af43d6000803e15610171573d6000f35b3d6000fdfea164736f6c634300081c000aa164736f6c634300081c000a",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063025b22bc146100c25780634f1ef286146100bd57806352d1902d146100b857806354fd4d50146100b357806359659e90146100ae57806369e949ca146100a9578063715018a6146100a45780638da5cb5b1461009f578063ad3cb1cc1461009a578063c4d66de8146100955763f2fde38b036100c757610536565b61051e565b6104f7565b61042f565b610417565b6103ef565b6102fa565b61029c565b61024e565b61022b565b61010e565b600080fd5b6001600160a01b031690565b90565b6100e4816100cc565b036100c757565b905035906100f8826100db565b565b906020828203126100c7576100d8916100eb565b346100c7576101266101213660046100fa565b610825565b60405180805b0390f35b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761016757604052565b610130565b906100f861017960405190565b9283610146565b6001600160401b03811161016757602090601f01601f19160190565b0190565b90826000939282370152565b909291926101c16101bc82610180565b61016c565b93818552818301116100c7576100f89160208501906101a0565b9080601f830112156100c7578160206100d8933591016101ac565b9190916040818403126100c75761020d83826100eb565b9260208201356001600160401b0381116100c7576100d892016101db565b6101266102393660046101f6565b9061084e565b60009103126100c757565b9052565b346100c75761025e36600461023f565b61012c61026961089b565b6040515b9182918290815260200190565b6100d8916008021c81565b906100d8915461027a565b6100d860006001610285565b346100c7576102ac36600461023f565b61012c610269610290565b6100d8916008021c6001600160a01b031690565b906100d891546102b7565b6100d86000806102cb565b61024a906100cc565b6020810192916100f891906102e1565b346100c75761030a36600461023f565b61012c6103156102d6565b604051918291826102ea565b806100e4565b905035906100f882610321565b60ff81166100e4565b905035906100f882610334565b610140818303126100c75761035f8282610327565b9260208201356001600160401b0381116100c7578361037f9184016101db565b9261038d81604085016100eb565b9261039b8260608301610327565b926103a9836080840161033d565b926103b78160a085016100eb565b926103c58260c0830161033d565b926100d86103d68460e0850161033d565b936101206103e882610100870161033d565b9401610327565b346100c75761012c61031561040536600461034a565b98979097969196959295949394610946565b346100c75761042736600461023f565b610126610a04565b346100c75761043f36600461023f565b61012c610315610a0c565b906104576101bc83610180565b918252565b610466600561044a565b640352e302e360dc1b602082015290565b6100d861045c565b6100d8610477565b6100d861047f565b60005b8381106104a25750506000910152565b8181015183820152602001610492565b6104d36104dc60209361019c936104c7815190565b80835293849260200190565b9586910161048f565b601f01601f191690565b60208082526100d8929101906104b2565b346100c75761050736600461023f565b61012c610512610487565b604051918291826104e6565b346100c7576101266105313660046100fa565b610c90565b346100c7576101266105493660046100fa565b610ceb565b6100f89061055a610cf4565b61069f565b6100cc6100d86100d89290565b6100d89061055f565b1561057c57565b60405162461bcd60e51b815260206004820152601e60248201527f496e76616c696420696d706c656d656e746174696f6e20616464726573730000604482015280606481015b0390fd5b6100d8906100cc565b6100d890546105c6565b6100d8906100cc906001600160a01b031682565b6100d8906105d9565b6100d8906105ed565b905051906100f8826100db565b906020828203126100c7576100d8916105ff565b6040513d6000823e3d90fd5b6100d89081565b6100d8905461062c565b634e487b7160e01b600052601160045260246000fd5b60001981146106625760010190565b61063d565b90600019905b9181191691161790565b6100d86100d86100d89290565b906106946100d861069b92610677565b8254610667565b9055565b6000906106c66106b66106b18461056c565b6100cc565b6106bf836100cc565b1415610575565b6106da6106d56106d5846105cf565b6105f6565b9160206106e660405190565b635c60da1b60e01b815293849060049082905afa9283156107ef5781936107f4575b506107186106d56106d5836105cf565b803b156100c7578161072960405190565b918290631b2ce7f360e11b825281838161074689600483016102ea565b03925af180156107ef576107c2575b505061077361076c6107676001610633565b610653565b6001610684565b7fbe444e048be48a02d3602a86d2210c4cfd09be329f36642c342d033ef98a50096107bd6107b36107ad6107a76001610633565b956105f6565b936105f6565b9361026d60405190565b0390a3565b816107e192903d106107e8575b6107d98183610146565b81019061023f565b3880610755565b503d6107cf565b610620565b61081791935060203d60201161081e575b61080f8183610146565b81019061060c565b9138610708565b503d610805565b6100f89061054e565b906100f89161083b610d36565b906100f89161084981610db6565b610de0565b906100f89161082e565b6100d890610864610e9a565b610892565b6100d87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610677565b506100d8610869565b6100d86000610858565b989694929b9a9997959391906101608a019060008b016108c3919052565b89810360208b01526108d4916104b2565b9a604089016108e2916102e1565b606088015260ff16608087015260a086016108fc916102e1565b60ff1660c085015260ff1660e084015260ff166101008301526101208201526101400152565b916100d892610939604082019360008301906102e1565b60208184039101526104b2565b946004999461099a99946020999461098b9994610961600090565b5061096c6001610633565b9961097660405190565b9e8f9d8e016331cd894360e11b8152016108a5565b60208201810382520382610146565b6109a460006105cf565b604051916106968301908382106001600160401b038311176101675783926109d39261069661118a8639610922565b03906000f080156107ef576100d8906105f6565b6109ef610cf4565b6100f86100f86109ff600061056c565b610ed6565b6100f86109e7565b6100d860007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b016105cf565b6100d89060401c60ff1690565b6100d89054610a39565b6100d8905b6001600160401b031690565b6100d89054610a50565b610a556100d86100d89290565b906001600160401b039061066d565b610a556100d86100d8926001600160401b031690565b90610aad6100d861069b92610a87565b8254610a78565b9060ff60401b9060401b61066d565b90610ad36100d861069b92151590565b8254610ab4565b61024a90610a6b565b6020810192916100f89190610ada565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081610b2f610b29610b2583610a46565b1590565b91610a61565b90600092610b3c84610a6b565b6001600160401b0384161480610c3a575b600193610b69610b5c86610a6b565b916001600160401b031690565b149081610c12575b155b9081610c09575b50610bfa57610ba39082610b9a86610b9187610a6b565b98019788610a9d565b610beb57610c67565b610bac57505050565b610bda610be6927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d294610ac3565b60405191829182610ae3565b0390a1565b610bf58487610ac3565b610c67565b63f92ee8a960e01b8452600484fd5b15905038610b7a565b9050610b73610c20306105f6565b3b610c31610c2d88610677565b9190565b14919050610b71565b5081610b4d565b906001600160a01b039061066d565b90610c606100d861069b926105f6565b8254610c41565b610c8390610c7433610f5d565b610c7c610f6e565b6000610c50565b6100f861076c6001610677565b6100f890610af3565b6100f890610ca5610cf4565b6000610cb08161056c565b610cb9816100cc565b610cc2846100cc565b14610cd25750506100f890610ed6565b631e4fbdf760e01b825281906105c290600483016102ea565b6100f890610c99565b610cfc610a0c565b3390610d10610d0a836100cc565b916100cc565b03610d185750565b63118cdaa760e01b600090815290610d319060046102ea565b036000fd5b610d3f306105f6565b7f000000000000000000000000000000000000000000000000000000000000000090610d6d610d0a836100cc565b14908115610d8f575b50610d7d57565b63703e46dd60e11b6000908152600490fd5b9050610da5610d0a610d9f610f76565b926100cc565b141538610d76565b506100f8610cf4565b6100f890610dad565b905051906100f882610321565b906020828203126100c7576100d891610dbf565b91610ded6106d5846105f6565b916020610df960405190565b6352d1902d60e01b815293849060049082905afa60009381610e69575b50610e3357634c9c8ce360e01b6000908152610d318560046102ea565b909192610e416100d8610869565b8403610e52576100f8929350610f86565b632a87526960e21b60009081526004859052602490fd5b610e8c91945060203d602011610e93575b610e848183610146565b810190610dcc565b9238610e16565b503d610e7a565b610ea3306105f6565b610ecf610d0a7f00000000000000000000000000000000000000000000000000000000000000006100cc565b03610d7d57565b610f16610f107f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993006106d584610f0a836105cf565b92610c50565b916105f6565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0610f4160405190565b80806107bd565b6100f890610f54610ff2565b6100f890611021565b6100f890610f48565b6100f8610ff2565b6100f8610f66565b6100d86000610a336100d8610869565b90610f908261102a565b610f99826105f6565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b610fc360405190565b600090a28051610fd6610c2d6000610677565b1115610fe857610fe5916110af565b50565b50506100f861106d565b610ffd610b256110d6565b61100357565b631afcd79f60e31b6000908152600490fd5b6100f890610ca5610ff2565b6100f890611015565b6000813b61103a610c2d83610677565b1461105557906100f89161104f6100d8610869565b01610c50565b6105c28192634c9c8ce360e01b8352600483016102ea565b600061107881610677565b34116110815750565b63b398979f60e01b8152600490fd5b3d156110aa5761109f3d61044a565b903d6000602084013e565b606090565b6000806100d8936110be606090565b50602081519101845af46110d0611090565b916110ff565b6100d87ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00610a46565b9061110a575061115a565b81519060009161111c610c2d84610677565b1480611145575b61112c57505090565b639996b31560e01b825281906105c290600483016102ea565b50803b611154610c2d84610677565b14611123565b805160009061116b610c2d83610677565b111561117a5750805190602001fd5b63d6bda27560e01b8152600490fdfe60a060405261001561000f610171565b90610193565b60405161018361051382396080518160cf015261018390f35b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761006557604052565b61002e565b9061007e61007760405190565b9283610044565b565b6001600160a01b031690565b90565b6001600160a01b038116036100a057565b600080fd5b9050519061007e8261008f565b6001600160401b03811161006557602090601f01601f19160190565b60005b8381106100e15750506000910152565b81810151838201526020016100d1565b90929192610106610101826100b2565b61006a565b93818552818301116100a05761007e9160208501906100ce565b9080601f830112156100a057815161008c926020016100f1565b9190916040818403126100a05761015183826100a5565b60208201519093906001600160401b0381116100a05761008c9201610120565b61018f610696803803806101848161006a565b92833981019061013a565b9091565b9061019e90826101f6565b608052565b61008c90610080906001600160a01b031682565b61008c906101a3565b61008c906101b7565b61008c61008c61008c9290565b906020828203126100a05761008c916100a5565b6040513d6000823e3d90fd5b6101ff81610345565b610208816101c0565b7f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e61023260405190565b600090a2815161024961024560006101c9565b9190565b11156102cf5761025b610260916101c0565b6101c0565b90602061026c60405190565b635c60da1b60e01b815292839060049082905afa80156102ca576102989260009161029b575b50610466565b50565b6102bd915060203d6020116102c3575b6102b58183610044565b8101906101d6565b38610292565b503d6102ab565b6101ea565b505061007e610412565b6001600160a01b03909116815260200190565b61008c7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d506101c9565b9061032561008c610341926101c0565b82546001600160a01b0319166001600160a01b03919091161790565b9055565b600090803b610356610245846101c9565b146103f95761025b8161025b610378938561037261008c6102ec565b01610315565b602061038360405190565b635c60da1b60e01b815291829060049082905afa9081156102ca5782916103da575b50803b6103b4610245846101c9565b146103bd575050565b634c9c8ce360e01b825281906103d690600483016102d9565b0390fd5b6103f3915060203d6020116102c3576102b58183610044565b386103a5565b631933b43b60e21b825281906103d690600483016102d9565b600061041d816101c9565b34116104265750565b63b398979f60e01b8152600490fd5b90610442610101836100b2565b918252565b3d15610461576104563d610435565b903d6000602084013e565b606090565b60008061008c93610475606090565b50602081519101845af4610487610447565b919061049357506104e3565b8151906000916104a5610245846101c9565b14806104ce575b6104b557505090565b639996b31560e01b825281906103d690600483016102d9565b50803b6104dd610245846101c9565b146104ac565b80516000906104f4610245836101c9565b11156105035750805190602001fd5b63d6bda27560e01b8152600490fdfe608060405261000c6100c7565b610155565b61002590610028906001600160a01b031682565b90565b6001600160a01b031690565b61002590610011565b61002590610034565b634e487b7160e01b600052604160045260246000fd5b90601f01601f1916810190811067ffffffffffffffff82111761007e57604052565b610046565b61008c81610028565b0361009357565b600080fd5b905051906100a582610083565b565b906020828203126100935761002591610098565b6040513d6000823e3d90fd5b6100f66100f17f000000000000000000000000000000000000000000000000000000000000000081565b61003d565b602061010160405190565b635c60da1b60e01b815291829060049082905afa90811561015057600091610127575090565b610025915060203d602011610149575b610141818361005c565b8101906100a7565b503d610137565b6100bb565b60008091368280378136915af43d6000803e15610171573d6000f35b3d6000fdfea164736f6c634300081c000aa164736f6c634300081c000a",
  "devdoc": {
    "details": "游戏桌工厂合约，使用信标代理模式创建游戏桌",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createGameTable(uint256,string,address,uint256,uint8,address,uint8,uint8,uint8,uint256)": {
        "details": "创建游戏桌",
        "params": {
          "bankerAddr": "庄家地址",
          "bankerFeePercent": "庄家费用百分比",
          "betAmount": "下注金额",
          "firstRaise": "第一轮下注倍数",
          "gameMainAddr": "游戏主合约地址",
          "maxPlayers": "最大玩家数",
          "rewardPoolId": "奖池ID",
          "secondRaise": "第二轮下注倍数",
          "tableId": "游戏桌ID",
          "tableName": "游戏桌名称"
        },
        "returns": {
          "_0": "新创建的游戏桌地址"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateImplementation(address)": {
        "details": "更新实现合约地址（通过信标）",
        "params": {
          "_implementation": "新的实现合约地址"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "BBGameTableFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11145,
        "contract": "contracts/BBGameTableFactory.sol:BBGameTableFactory",
        "label": "beacon",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11147,
        "contract": "contracts/BBGameTableFactory.sol:BBGameTableFactory",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11151,
        "contract": "contracts/BBGameTableFactory.sol:BBGameTableFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)5_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}