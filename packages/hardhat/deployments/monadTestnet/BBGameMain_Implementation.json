{
  "address": "0xc6A8dd465BE6E3D5fe5092E195fB154037eE6aad",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBet",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "maxPlayers",
          "type": "uint8"
        }
      ],
      "name": "GameConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tableAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "banker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "maxPlayers",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bankerFeePercent",
          "type": "uint256"
        }
      ],
      "name": "GameTableCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tableAddr",
          "type": "address"
        }
      ],
      "name": "GameTableRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tableName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "betAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tableMaxPlayers",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "bankerFeePercent",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "firstRaise",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "secondRaise",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "rewardPoolId",
          "type": "uint256"
        }
      ],
      "name": "createGameTable",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameTableFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameTables",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllGameTablesInactive",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameRound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gameLiquidatedCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tableAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tableName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bankerAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "bankerFeePercent",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "playerCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxPlayers",
              "type": "uint8"
            },
            {
              "internalType": "enum GameState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lastActivityTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPoolId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "banker",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardPerGame",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "inUse",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[10]",
                  "name": "__gap",
                  "type": "uint256[10]"
                }
              ],
              "internalType": "struct RewardPoolInfo",
              "name": "rewardPoolInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct GameTableInfoShort[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "maxRoomCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxPlayers",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxJoinTablesCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxBankerFeePercent",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "playerTimeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tableInactiveTimeout",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "liquidatorFeePercent",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "gameMainAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardPoolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "roomCardAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "roomLevelAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "gameTableFactoryAddress",
              "type": "address"
            }
          ],
          "internalType": "struct GameConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tableAddr",
          "type": "address"
        }
      ],
      "name": "getGameTableInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameRound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gameLiquidatedCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tableAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tableName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bankerAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "bankerFeePercent",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "playerCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxPlayers",
              "type": "uint8"
            },
            {
              "internalType": "enum GameState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lastActivityTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPoolId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "banker",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardPerGame",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "inUse",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[10]",
                  "name": "__gap",
                  "type": "uint256[10]"
                }
              ],
              "internalType": "struct RewardPoolInfo",
              "name": "rewardPoolInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct GameTableInfoShort",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_count",
          "type": "uint8"
        }
      ],
      "name": "getNewestGameTables",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameRound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gameLiquidatedCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tableAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tableName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bankerAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "bankerFeePercent",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "playerCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxPlayers",
              "type": "uint8"
            },
            {
              "internalType": "enum GameState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lastActivityTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPoolId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "banker",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardPerGame",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "inUse",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[10]",
                  "name": "__gap",
                  "type": "uint256[10]"
                }
              ],
              "internalType": "struct RewardPoolInfo",
              "name": "rewardPoolInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct GameTableInfoShort[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTableAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserCreatedRoomsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "getUserGameTables",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameRound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gameLiquidatedCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tableAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tableName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bankerAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "bankerFeePercent",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "playerCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxPlayers",
              "type": "uint8"
            },
            {
              "internalType": "enum GameState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lastActivityTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPoolId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "banker",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardPerGame",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "inUse",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[10]",
                  "name": "__gap",
                  "type": "uint256[10]"
                }
              ],
              "internalType": "struct RewardPoolInfo",
              "name": "rewardPoolInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct GameTableInfoShort[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "getUserJoinedTables",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameRound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gameLiquidatedCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tableAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tableName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bankerAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "bankerFeePercent",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "playerCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxPlayers",
              "type": "uint8"
            },
            {
              "internalType": "enum GameState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lastActivityTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPoolId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "banker",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardPerGame",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "inUse",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[10]",
                  "name": "__gap",
                  "type": "uint256[10]"
                }
              ],
              "internalType": "struct RewardPoolInfo",
              "name": "rewardPoolInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct GameTableInfoShort[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "getUserJoinedTablesCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_maxPlayers",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_maxRoomCount",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_maxJoinTablesCount",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_maxBankerFeePercent",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_liquidatorFeePercent",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_playerTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tableInactiveTimeout",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gameTableFactoryAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tableAddr",
          "type": "address"
        }
      ],
      "name": "isValidGameTable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidatorFeePercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBankerFeePercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxJoinTablesCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPlayers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRoomCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bankerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "rewardPoolIsInUse",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomCardAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomLevelAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameTableFactoryAddress",
          "type": "address"
        }
      ],
      "name": "setGameTableFactoryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardPoolAddress",
          "type": "address"
        }
      ],
      "name": "setRewardPoolAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roomCardAddress",
          "type": "address"
        }
      ],
      "name": "setRoomCardAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roomLevelAddress",
          "type": "address"
        }
      ],
      "name": "setRoomLevelAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tableAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tableInactiveTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_maxPlayers",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_maxJoinTablesCount",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_maxBankerFeePercent",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_playerTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tableInactiveTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_liquidatorFeePercent",
          "type": "uint8"
        }
      ],
      "name": "updateGameConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "userJoinTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddr",
          "type": "address"
        }
      ],
      "name": "userLeaveTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd25c22bfd70a3f0ea17a79b3006c5aaab4ebf5286f47d4cea3c01764327eb32e",
  "receipt": {
    "to": null,
    "from": "0xCf4eC0E2Fa3B3f1f706183128D729a9C86c69e4d",
    "contractAddress": "0xc6A8dd465BE6E3D5fe5092E195fB154037eE6aad",
    "transactionIndex": 15,
    "gasUsed": "3438826",
    "logsBloom": "0x
    "blockHash": "0xedce12e8a2bb278185b715a38339b701c60f69d88ec5209465788fb484902226",
    "transactionHash": "0xd25c22bfd70a3f0ea17a79b3006c5aaab4ebf5286f47d4cea3c01764327eb32e",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 15726232,
        "transactionHash": "0xd25c22bfd70a3f0ea17a79b3006c5aaab4ebf5286f47d4cea3c01764327eb32e",
        "address": "0xc6A8dd465BE6E3D5fe5092E195fB154037eE6aad",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 32,
        "blockHash": "0xedce12e8a2bb278185b715a38339b701c60f69d88ec5209465788fb484902226"
      }
    ],
    "blockNumber": 15726232,
    "cumulativeGasUsed": "7451962",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48576e987db7584d29c5cbb1887dec70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"}],\"name\":\"GameConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bankerFeePercent\",\"type\":\"uint256\"}],\"name\":\"GameTableCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"}],\"name\":\"GameTableRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tableMaxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"firstRaise\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondRaise\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"rewardPoolId\",\"type\":\"uint256\"}],\"name\":\"createGameTable\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameTableFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameTables\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllGameTablesInactive\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameLiquidatedCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bankerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"playerCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"enum GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastActivityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct GameTableInfoShort[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"maxRoomCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxJoinTablesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxBankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"playerTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tableInactiveTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"liquidatorFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"gameMainAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"roomCardAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"roomLevelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gameTableFactoryAddress\",\"type\":\"address\"}],\"internalType\":\"struct GameConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"}],\"name\":\"getGameTableInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameLiquidatedCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bankerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"playerCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"enum GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastActivityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct GameTableInfoShort\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_count\",\"type\":\"uint8\"}],\"name\":\"getNewestGameTables\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameLiquidatedCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bankerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"playerCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"enum GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastActivityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct GameTableInfoShort[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTableAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserCreatedRoomsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserGameTables\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameLiquidatedCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bankerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"playerCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"enum GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastActivityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct GameTableInfoShort[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserJoinedTables\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameLiquidatedCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bankerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"playerCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"enum GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastActivityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct GameTableInfoShort[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"getUserJoinedTablesCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxRoomCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxJoinTablesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxBankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_liquidatorFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_playerTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tableInactiveTimeout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gameTableFactoryAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"}],\"name\":\"isValidGameTable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorFeePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBankerFeePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxJoinTablesCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlayers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRoomCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bankerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"rewardPoolIsInUse\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomCardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomLevelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameTableFactoryAddress\",\"type\":\"address\"}],\"name\":\"setGameTableFactoryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardPoolAddress\",\"type\":\"address\"}],\"name\":\"setRewardPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roomCardAddress\",\"type\":\"address\"}],\"name\":\"setRoomCardAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roomLevelAddress\",\"type\":\"address\"}],\"name\":\"setRoomLevelAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tableAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tableInactiveTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxJoinTablesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxBankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_playerTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tableInactiveTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_liquidatorFeePercent\",\"type\":\"uint8\"}],\"name\":\"updateGameConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userJoinTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userLeaveTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"\\u725b\\u725b\\u660e\\u724c\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\uff0c\\u7ba1\\u7406\\u591a\\u4e2a\\u6e38\\u620f\\u684c\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createGameTable(string,uint256,uint8,uint8,uint8,uint8,uint256)\":{\"details\":\"\\u521b\\u5efa\\u65b0\\u6e38\\u620f\\u684c\\uff0c\\u8c03\\u7528\\u8005\\u6210\\u4e3a\\u5e84\\u5bb6\",\"params\":{\"bankerFeePercent\":\"\\u5e84\\u5bb6\\u62bd\\u6210\\u767e\\u5206\\u6bd4\",\"betAmount\":\"\\u56fa\\u5b9a\\u62bc\\u6ce8\\u91d1\\u989d\",\"tableMaxPlayers\":\"\\u6700\\u5927\\u73a9\\u5bb6\\u6570\\u91cf\",\"tableName\":\"\\u6e38\\u620f\\u684c\\u540d\\u79f0\"}},\"getAllGameTablesInactive()\":{\"details\":\"\\u83b7\\u53d6\\u6240\\u6709\\u975e\\u6d3b\\u8dc3\\u53ef\\u88ab\\u6e05\\u7b97\\u7684\\u6e38\\u620f\\u684c\\u4fe1\\u606f\",\"returns\":{\"_0\":\"\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\u6570\\u7ec4\"}},\"getGameTableInfo(address)\":{\"details\":\"\\u83b7\\u53d6\\u6307\\u5b9a\\u5730\\u5740\\u7684\\u6e38\\u620f\\u684c\\u4fe1\\u606f\",\"params\":{\"tableAddr\":\"\\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\"},\"returns\":{\"_0\":\"\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\"}},\"getNewestGameTables(uint8)\":{\"details\":\"\\u83b7\\u53d6\\u6700\\u65b0\\u7684\\u6e38\\u620f\\u684c\",\"params\":{\"_count\":\"\\u8981\\u83b7\\u53d6\\u7684\\u6e38\\u620f\\u684c\\u6570\\u91cf\"},\"returns\":{\"_0\":\"\\u6700\\u65b0\\u7684\\u6e38\\u620f\\u684c\\u6570\\u7ec4\"}},\"getUserCreatedRoomsCount(address)\":{\"details\":\"\\u83b7\\u53d6\\u7528\\u6237\\u521b\\u5efa\\u7684\\u623f\\u95f4\\u6570\\u91cf\",\"params\":{\"userAddress\":\"\\u7528\\u6237\\u5730\\u5740\"},\"returns\":{\"_0\":\"\\u7528\\u6237\\u521b\\u5efa\\u7684\\u623f\\u95f4\\u6570\\u91cf\"}},\"getUserGameTables(address)\":{\"details\":\"\\u83b7\\u53d6\\u6211\\u53c2\\u4e0e\\u7684\\u8d4c\\u684c\",\"params\":{\"userAddr\":\"\\u7528\\u6237\\u5730\\u5740\"},\"returns\":{\"_0\":\"\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\"}},\"initialize(uint8,uint8,uint8,uint8,uint8,uint256,uint256,address)\":{\"details\":\"\\u521d\\u59cb\\u5316\\u51fd\\u6570\\uff0c\\u66ff\\u4ee3\\u6784\\u9020\\u51fd\\u6570\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"\\u6682\\u505c\\u5408\\u7ea6\\uff08\\u4ec5\\u9650\\u5408\\u7ea6\\u62e5\\u6709\\u8005\\uff09\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setGameTableFactoryAddress(address)\":{\"details\":\"\\u8bbe\\u7f6e\\u6e38\\u620f\\u684c\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\",\"params\":{\"_gameTableFactoryAddress\":\"\\u6e38\\u620f\\u684c\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\"}},\"setRoomCardAddress(address)\":{\"details\":\"\\u8bbe\\u7f6e\\u623f\\u5361\\u5408\\u7ea6\\u5730\\u5740\",\"params\":{\"_roomCardAddress\":\"\\u623f\\u5361\\u5408\\u7ea6\\u5730\\u5740\"}},\"setRoomLevelAddress(address)\":{\"details\":\"\\u8bbe\\u7f6e\\u623f\\u95f4\\u7b49\\u7ea7\\u5408\\u7ea6\\u5730\\u5740\",\"params\":{\"_roomLevelAddress\":\"\\u623f\\u95f4\\u7b49\\u7ea7\\u5408\\u7ea6\\u5730\\u5740\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"\\u6062\\u590d\\u5408\\u7ea6\\uff08\\u4ec5\\u9650\\u5408\\u7ea6\\u62e5\\u6709\\u8005\\uff09\"},\"updateGameConfig(uint8,uint8,uint8,uint256,uint256,uint8)\":{\"details\":\"\\u66f4\\u65b0\\u6e38\\u620f\\u914d\\u7f6e\\uff08\\u4ec5\\u9650\\u5408\\u7ea6\\u62e5\\u6709\\u8005\\uff09\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"BBGameMain\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getUserJoinedTables(address)\":{\"notice\":\"\\u83b7\\u53d6\\u7528\\u6237\\u5df2\\u52a0\\u5165\\u7684\\u684c\\u5b50\\uff08\\u8fc7\\u6ee4\\u7a7a\\u4f4d\\uff09\"},\"userJoinTable(address)\":{\"notice\":\"\\u7528\\u6237\\u52a0\\u5165\\u67d0\\u4e2a\\u6e38\\u620f\\u684c\"},\"userLeaveTable(address)\":{\"notice\":\"\\u7528\\u6237\\u9000\\u51fa\\u67d0\\u4e2a\\u6e38\\u620f\\u684c\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BBGameMain.sol\":\"BBGameMain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd861907d1168dcaec2a7846edbaed12feb8bad2d6781dba987be01374f90b495\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\\n    struct ERC721Storage {\\n        // Token name\\n        string _name;\\n\\n        // Token symbol\\n        string _symbol;\\n\\n        mapping(uint256 tokenId => address) _owners;\\n\\n        mapping(address owner => uint256) _balances;\\n\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\\n\\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\\n        assembly {\\n            $.slot := ERC721StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return $._balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        unchecked {\\n            $._balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                $._balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                $._balances[to] += 1;\\n            }\\n        }\\n\\n        $._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        $._tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0xfd473ea8f70e13eaa6475c7e348885b8a32925252e3bc237e07c0e3fde0f10f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721Upgradeable} from \\\"../ERC721Upgradeable.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},\\n * interfere with enumerability and should not be used together with {ERC721Enumerable}.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721Enumerable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721Enumerable\\n    struct ERC721EnumerableStorage {\\n        mapping(address owner => mapping(uint256 index => uint256)) _ownedTokens;\\n        mapping(uint256 tokenId => uint256) _ownedTokensIndex;\\n\\n        uint256[] _allTokens;\\n        mapping(uint256 tokenId => uint256) _allTokensIndex;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721Enumerable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721EnumerableStorageLocation = 0x645e039705490088daad89bae25049a34f4a9072d398537b1ab2425f24cbed00;\\n\\n    function _getERC721EnumerableStorage() private pure returns (ERC721EnumerableStorage storage $) {\\n        assembly {\\n            $.slot := ERC721EnumerableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return $._ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        return $._allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return $._allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        uint256 length = balanceOf(to) - 1;\\n        $._ownedTokens[to][length] = tokenId;\\n        $._ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        $._allTokensIndex[tokenId] = $._allTokens.length;\\n        $._allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = $._ownedTokensIndex[tokenId];\\n\\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = $._ownedTokens[from];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\\n\\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            $._ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete $._ownedTokensIndex[tokenId];\\n        delete _ownedTokensByOwner[lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = $._allTokens.length - 1;\\n        uint256 tokenIndex = $._allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = $._allTokens[lastTokenIndex];\\n\\n        $._allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        $._allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete $._allTokensIndex[tokenId];\\n        $._allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x374714bef85e753a13fdf792ca567ef734351029265f2cce8db533d7a942c740\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/BBGameMain.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./BBTypes.sol\\\";\\nimport \\\"./BBRoomCardNFT.sol\\\";\\nimport \\\"./BBRewardPool.sol\\\";\\nimport \\\"./BBRoomLevelNFT.sol\\\";\\nimport \\\"./BBStructs.sol\\\";\\nimport \\\"./BBInterfaces.sol\\\";\\n\\n\\n\\n/**\\n * @title BBGameMain\\n * @dev \\u725b\\u725b\\u660e\\u724c\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\uff0c\\u7ba1\\u7406\\u591a\\u4e2a\\u6e38\\u620f\\u684c\\n */\\ncontract BBGameMain is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    UUPSUpgradeable\\n{\\n\\n    // \\u6e38\\u620f\\u914d\\u7f6e\\n    uint256 public nextTableId;\\n    uint8 public maxRoomCount;  //\\u6700\\u5927\\u521b\\u5efa\\u623f\\u95f4\\u6570\\n    uint8 public maxJoinTablesCount; // \\u6700\\u5927\\u52a0\\u5165\\u6e38\\u620f\\u684c\\u6570\\n    uint8 public maxPlayers;\\n    uint256 public playerTimeout;  // \\u73a9\\u5bb6\\u8d85\\u65f6\\u65f6\\u95f4\\n    uint256 public tableInactiveTimeout;  // \\u6e38\\u620f\\u684c\\u4e0d\\u6d3b\\u8dc3\\u8d85\\u65f6\\u65f6\\u95f4\\n    uint8 public maxBankerFeePercent; // \\u5e84\\u5bb6\\u62bd\\u6210\\u6700\\u5927\\u767e\\u5206\\u6bd4\\n    uint8 public liquidatorFeePercent; // \\u6e05\\u7b97\\u4eba\\u8d39\\u7528\\u767e\\u5206\\u6bd4\\n\\n\\n    // \\u6e38\\u620f\\u684c\\u5730\\u5740\\u5217\\u8868\\n    address[] public tableAddresses;\\n    mapping(address => address) public gameTables;\\n\\n    // \\u7528\\u6237\\u4fe1\\u606f\\uff0c\\u5305\\u542b\\u7528\\u6237\\u521b\\u5efa\\u7684table\\u548c\\u52a0\\u5165\\u7684table\\u6570\\u636e\\n    mapping(address => UserInfo) private userInfos;\\n\\n    address public rewardPoolAddress;    // \\u5956\\u52b1\\u6c60\\u5408\\u7ea6\\u5730\\u5740\\n\\n\\n    // \\u623f\\u5361\\u76f8\\u5173\\n    address public roomCardAddress;  // \\u623f\\u5361NFT\\u5408\\u7ea6\\u5730\\u5740\\n\\n    // \\u623f\\u95f4\\u7b49\\u7ea7\\u76f8\\u5173\\n    address public roomLevelAddress; // \\u623f\\u95f4\\u7b49\\u7ea7\\u5408\\u7ea6\\u5730\\u5740\\n\\n    // \\u6e38\\u620f\\u684c\\u5de5\\u5382\\u76f8\\u5173\\n    address public gameTableFactoryAddress; // \\u6e38\\u620f\\u684c\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\n\\n\\n    // \\u9884\\u7559 50 \\u4e2a slot \\u7ed9\\u5c06\\u6765\\u65b0\\u589e\\u53d8\\u91cf\\u7528\\uff0c\\u9632\\u6b62\\u5b58\\u50a8\\u51b2\\u7a81\\n    uint256[25] private __gap;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev \\u521d\\u59cb\\u5316\\u51fd\\u6570\\uff0c\\u66ff\\u4ee3\\u6784\\u9020\\u51fd\\u6570\\n     */\\n    function initialize(\\n        uint8 _maxPlayers,\\n        uint8 _maxRoomCount,\\n        uint8 _maxJoinTablesCount,\\n        uint8 _maxBankerFeePercent,\\n        uint8 _liquidatorFeePercent,\\n        uint256 _playerTimeout,\\n        uint256 _tableInactiveTimeout,\\n        address _gameTableFactoryAddress\\n    ) public initializer {\\n        __Ownable_init(msg.sender);\\n        __ReentrancyGuard_init();\\n        __Pausable_init();\\n        __UUPSUpgradeable_init();\\n\\n        nextTableId = 1;\\n        maxPlayers = _maxPlayers;\\n        maxRoomCount = _maxRoomCount;\\n        maxJoinTablesCount = _maxJoinTablesCount;\\n        maxBankerFeePercent = _maxBankerFeePercent;\\n        liquidatorFeePercent = _liquidatorFeePercent;\\n        playerTimeout = _playerTimeout;\\n        tableInactiveTimeout = _tableInactiveTimeout;\\n\\n        // \\u521d\\u59cb\\u5316\\u6e38\\u620f\\u684c\\u5de5\\u5382\\u5730\\u5740\\n        if (_gameTableFactoryAddress != address(0)) {\\n            gameTableFactoryAddress = _gameTableFactoryAddress;\\n        }\\n    }\\n\\n    /**\\n     * @dev \\u521b\\u5efa\\u65b0\\u6e38\\u620f\\u684c\\uff0c\\u8c03\\u7528\\u8005\\u6210\\u4e3a\\u5e84\\u5bb6\\n     * @param tableName \\u6e38\\u620f\\u684c\\u540d\\u79f0\\n     * @param betAmount \\u56fa\\u5b9a\\u62bc\\u6ce8\\u91d1\\u989d\\n     * @param tableMaxPlayers \\u6700\\u5927\\u73a9\\u5bb6\\u6570\\u91cf\\n     * @param bankerFeePercent \\u5e84\\u5bb6\\u62bd\\u6210\\u767e\\u5206\\u6bd4\\n     */\\n    function createGameTable(\\n        string memory tableName,\\n        uint256 betAmount,\\n        uint8 tableMaxPlayers,\\n        uint8 bankerFeePercent,\\n        uint8 firstRaise,\\n        uint8 secondRaise,\\n        uint256 rewardPoolId\\n    ) external payable nonReentrant {\\n        require(!paused(), \\\"Contract paused\\\");\\n        require(betAmount != 0, \\\"Bet amount too small\\\");\\n        require(tableMaxPlayers > 1 && tableMaxPlayers <= maxPlayers, \\\"Invalid max players\\\");\\n        require(bankerFeePercent <= maxBankerFeePercent, \\\"Invalid banker fee percent\\\");\\n        require(bytes(tableName).length > 0 && bytes(tableName).length <= 20, \\\"Invalid table name\\\");\\n        require(firstRaise >= 1 && firstRaise <= 4, \\\"Invalid first raise\\\");\\n        require(secondRaise >= 1 && secondRaise <= 4, \\\"Invalid second raise\\\");\\n\\n        uint256 createdRooms = getUserCreatedRoomsCount(msg.sender);\\n        // \\u9a8c\\u8bc1\\u7528\\u6237\\u7684\\u623f\\u95f4\\u7b49\\u7ea7\\u548c\\u5df2\\u521b\\u5efa\\u7684\\u623f\\u95f4\\u6570\\u91cf\\n        if (createdRooms >= maxRoomCount) {\\n            require(roomLevelAddress != address(0), \\\"Invalid room level address\\\");\\n\\n            // \\u9a8c\\u8bc1\\u7528\\u6237\\u662f\\u5426\\u62e5\\u6709\\u623f\\u95f4\\u7b49\\u7ea7\\n            BBRoomLevelNFT roomLevel = BBRoomLevelNFT(payable(roomLevelAddress));\\n            require(roomLevel.hasNft(msg.sender), \\\"Room level required\\\");\\n\\n            // \\u83b7\\u53d6\\u7528\\u6237\\u7b49\\u7b49\\u7ea7NFT\\u53ef\\u521b\\u5efa\\u7684\\u623f\\u95f4\\u603b\\u6570\\n            uint256 maxRooms = roomLevel.getMaxRooms(msg.sender);\\n\\n            // \\u9a8c\\u8bc1\\u7528\\u6237\\u662f\\u5426\\u8d85\\u8fc7\\u623f\\u95f4\\u521b\\u5efa\\u4e0a\\u9650\\n            if (createdRooms >= maxRooms + maxRoomCount) {\\n                // \\u5982\\u679c\\u8d85\\u8fc7\\u4e0a\\u9650\\uff0c\\u5148\\u5c06\\u8ba1\\u6570\\u51cf\\u56de\\u53bb\\uff0c\\u518d\\u629b\\u51fa\\u9519\\u8bef\\n                require(false, \\\"room level limit exceeded\\\");\\n            }\\n        }\\n\\n        // \\u68c0\\u67e5\\u6e38\\u620f\\u684c\\u5de5\\u5382\\u5730\\u5740\\u662f\\u5426\\u8bbe\\u7f6e\\n        require(gameTableFactoryAddress != address(0), \\\"Invalid game table factory address\\\");\\n\\n\\n        // \\u4f7f\\u7528\\u5de5\\u5382\\u5408\\u7ea6\\u521b\\u5efa\\u6e38\\u620f\\u684c\\n        IGameTableFactory factory = IGameTableFactory(gameTableFactoryAddress);\\n        address tableAddr = factory.createGameTable(\\n            nextTableId,\\n            tableName,\\n            msg.sender,\\n            betAmount,\\n            tableMaxPlayers,\\n            address(this),\\n            bankerFeePercent,\\n            firstRaise,\\n            secondRaise,\\n            rewardPoolId\\n        );\\n\\n        nextTableId++;\\n        \\n        // \\u6dfb\\u52a0\\u5230\\u6d3b\\u8dc3\\u6e38\\u620f\\u5217\\u8868\\n        tableAddresses.push(tableAddr);\\n        gameTables[tableAddr] = tableAddr;\\n\\n        //\\u6dfb\\u52a0\\u5230\\u7528\\u6237\\u7684\\u6e38\\u620f\\u684c\\u5217\\u8868\\n        UserInfo storage userInfo = userInfos[msg.sender];\\n        userInfo.tables.push(tableAddr);\\n\\n        // \\u89e6\\u53d1\\u4e8b\\u4ef6\\n        emit GameTableCreated(tableAddr, msg.sender, betAmount, tableMaxPlayers, bankerFeePercent);\\n    }\\n\\n    // \\u83b7\\u53d6tableAddresses\\u5217\\u8868\\n    function getTableAddresses() external view returns (address[] memory) {\\n        return tableAddresses;\\n    }\\n\\n    function getUserJoinedTablesCount(address userAddr) public view returns (uint8){\\n        UserInfo storage user = userInfos[userAddr];\\n        uint8 count = 0;\\n        for (uint i = 0; i < user.joinedTables.length; i++) {\\n            if (user.joinedTables[i] != address(0)) {\\n                count++;\\n            }\\n        }\\n\\n        return count;\\n    }\\n\\n    /// @notice \\u7528\\u6237\\u52a0\\u5165\\u67d0\\u4e2a\\u6e38\\u620f\\u684c\\n    function userJoinTable(address userAddr) external {\\n        address tableAddr = msg.sender;\\n        require(gameTables[tableAddr] == tableAddr, \\\"Invalid table address\\\");\\n        \\n\\n        uint8 joinedTableCount = getUserJoinedTablesCount(userAddr);\\n        require(joinedTableCount <= maxJoinTablesCount, \\\"Max join tables count exceeded\\\");\\n\\n        UserInfo storage user = userInfos[userAddr];\\n        require(user.joinedTableIndex[tableAddr] == 0, \\\"User Already joined\\\");\\n\\n        // \\u67e5\\u627e\\u7a7a\\u4f4d\\uff08address(0)\\uff09\\n        bool reused = false;\\n        for (uint i = 0; i < user.joinedTables.length; i++) {\\n            if (user.joinedTables[i] == address(0)) {\\n                user.joinedTables[i] = tableAddr;\\n                user.joinedTableIndex[tableAddr] = i + 1;\\n                reused = true;\\n                break;\\n            }\\n        }\\n\\n        // \\u6ca1\\u6709\\u7a7a\\u4f4d\\u5219 push\\n        if (!reused) {\\n            user.joinedTables.push(tableAddr);\\n            user.joinedTableIndex[tableAddr] = user.joinedTables.length; // index + 1\\n        }\\n    }\\n\\n    /// @notice \\u7528\\u6237\\u9000\\u51fa\\u67d0\\u4e2a\\u6e38\\u620f\\u684c\\n    function userLeaveTable(address userAddr) external {\\n        address tableAddr = msg.sender;\\n        require(gameTables[tableAddr] == tableAddr, \\\"Invalid table address\\\");\\n\\n        UserInfo storage user = userInfos[userAddr];\\n        uint index = user.joinedTableIndex[tableAddr];\\n        require(index > 0, \\\"User Not joined\\\");\\n\\n        // \\u61d2\\u6e05\\u9664\\uff1a\\u5c06\\u5730\\u5740\\u7f6e\\u4e3a address(0)\\uff0c\\u4e0d pop\\n        user.joinedTables[index - 1] = address(0);\\n        delete user.joinedTableIndex[tableAddr];\\n    }\\n\\n    /// @notice \\u83b7\\u53d6\\u7528\\u6237\\u5df2\\u52a0\\u5165\\u7684\\u684c\\u5b50\\uff08\\u8fc7\\u6ee4\\u7a7a\\u4f4d\\uff09\\n    function getUserJoinedTables(address userAddr) external view returns (GameTableInfoShort[] memory) {\\n        UserInfo storage user = userInfos[userAddr];\\n\\n        uint8 joinedTableCount = getUserJoinedTablesCount(userAddr);\\n\\n        GameTableInfoShort[] memory result = new GameTableInfoShort[](joinedTableCount);\\n        uint j = 0;\\n        for (uint i = 0; i < user.joinedTables.length; i++) {\\n            if (user.joinedTables[i] != address(0)) {\\n                result[j] = IGameTableImplementation(user.joinedTables[i]).getTableInfoShort();\\n                j++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n    \\n    /**\\n     * @dev \\u6682\\u505c\\u5408\\u7ea6\\uff08\\u4ec5\\u9650\\u5408\\u7ea6\\u62e5\\u6709\\u8005\\uff09\\n     */\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev \\u6062\\u590d\\u5408\\u7ea6\\uff08\\u4ec5\\u9650\\u5408\\u7ea6\\u62e5\\u6709\\u8005\\uff09\\n     */\\n    function unpause() external onlyOwner { \\n        _unpause();\\n    }\\n\\n    function getGameConfig() external view returns (GameConfig memory) {\\n        return GameConfig({\\n            maxRoomCount: maxRoomCount,\\n            maxPlayers: maxPlayers,\\n            maxJoinTablesCount: maxJoinTablesCount,\\n            maxBankerFeePercent: maxBankerFeePercent,\\n            playerTimeout: playerTimeout,\\n            tableInactiveTimeout: tableInactiveTimeout,\\n            liquidatorFeePercent: liquidatorFeePercent,\\n            gameMainAddress: address(this),\\n            rewardPoolAddress: rewardPoolAddress,\\n            roomCardAddress: roomCardAddress,\\n            roomLevelAddress: roomLevelAddress,\\n            gameTableFactoryAddress: gameTableFactoryAddress\\n        });\\n    }\\n\\n    /**\\n     * @dev \\u66f4\\u65b0\\u6e38\\u620f\\u914d\\u7f6e\\uff08\\u4ec5\\u9650\\u5408\\u7ea6\\u62e5\\u6709\\u8005\\uff09\\n     */\\n    function updateGameConfig(\\n        uint8 _maxPlayers,\\n        uint8 _maxJoinTablesCount,\\n        uint8 _maxBankerFeePercent,\\n        uint256 _playerTimeout,\\n        uint256 _tableInactiveTimeout,\\n        uint8 _liquidatorFeePercent\\n    ) external onlyOwner {\\n        require(_maxPlayers > 1, \\\"Invalid max players\\\");\\n        require(_maxBankerFeePercent != 0 && _maxBankerFeePercent < 100, \\\"Banker fee percent must be positive\\\");\\n        require(_playerTimeout != 0, \\\"Player timeout must be positive\\\");\\n        require(_tableInactiveTimeout != 0, \\\"Table inactive timeout must be positive\\\");\\n        require(_liquidatorFeePercent != 0 && _liquidatorFeePercent < 100, \\\"Invalid liquidator fee percent\\\");\\n\\n        maxPlayers = _maxPlayers;\\n        maxJoinTablesCount = _maxJoinTablesCount;\\n        maxBankerFeePercent = _maxBankerFeePercent;\\n        playerTimeout = _playerTimeout;\\n        tableInactiveTimeout = _tableInactiveTimeout;\\n        liquidatorFeePercent = _liquidatorFeePercent;\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u623f\\u5361\\u5408\\u7ea6\\u5730\\u5740\\n     * @param _roomCardAddress \\u623f\\u5361\\u5408\\u7ea6\\u5730\\u5740\\n     */\\n    function setRoomCardAddress(address _roomCardAddress) external onlyOwner {\\n        require(_roomCardAddress != address(0), \\\"Invalid room card contract\\\");\\n        roomCardAddress = _roomCardAddress;\\n    }\\n\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u6700\\u65b0\\u7684\\u6e38\\u620f\\u684c\\n     * @param _count \\u8981\\u83b7\\u53d6\\u7684\\u6e38\\u620f\\u684c\\u6570\\u91cf\\n     * @return \\u6700\\u65b0\\u7684\\u6e38\\u620f\\u684c\\u6570\\u7ec4\\n     */\\n    function getNewestGameTables(uint8 _count) external view returns(GameTableInfoShort[] memory) {\\n        require(_count > 0, \\\"Count must be greater than 0\\\");\\n        \\n        uint256 tableCount = tableAddresses.length;\\n        if (tableCount == 0) {\\n            return new GameTableInfoShort[](0);\\n        }\\n        \\n        // \\u5982\\u679c\\u8bf7\\u6c42\\u7684\\u6570\\u91cf\\u5927\\u4e8e\\u73b0\\u6709\\u6e38\\u620f\\u684c\\u6570\\u91cf\\uff0c\\u5219\\u4f7f\\u7528\\u73b0\\u6709\\u6570\\u91cf\\n        uint256 resultCount = _count;\\n        if (tableCount < resultCount) {\\n            resultCount = tableCount;\\n        }\\n        \\n        GameTableInfoShort[] memory tables = new GameTableInfoShort[](resultCount);\\n        \\n        // \\u4f7f\\u7528\\u5b89\\u5168\\u7684\\u7d22\\u5f15\\u8ba1\\u7b97\\u65b9\\u5f0f\\n        uint256 startIndex = tableCount > resultCount ? tableCount - resultCount : 0;\\n        \\n        for (uint256 i = 0; i < resultCount; i++) {\\n            address tableAddr = tableAddresses[startIndex + i];\\n            IGameTableImplementation gameTable = IGameTableImplementation(tableAddr);\\n            tables[resultCount - 1 - i] = gameTable.getTableInfoShort(); // \\u53cd\\u5411\\u586b\\u5145\\u4fdd\\u6301\\u6700\\u65b0\\u7684\\u5728\\u524d\\n        }\\n        \\n        return tables;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u6240\\u6709\\u975e\\u6d3b\\u8dc3\\u53ef\\u88ab\\u6e05\\u7b97\\u7684\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\n     * @return \\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\u6570\\u7ec4\\n     */\\n    function getAllGameTablesInactive() external view returns(GameTableInfoShort[] memory) {\\n        uint256 tableCount = tableAddresses.length;\\n        GameTableInfoShort[] memory tempTables = new GameTableInfoShort[](tableCount);\\n        uint256 validCount = 0;\\n\\n        for (uint256 i = 0; i < tableCount; i++) {\\n            address tableAddr = tableAddresses[i];\\n            IGameTableImplementation gameTable = IGameTableImplementation(tableAddr);\\n            //\\u8d85\\u8fc7\\u6e05\\u7b97\\u65f6\\u95f4\\u5e76\\u4e14\\u6e38\\u620f\\u5728\\u8fdb\\u884c\\u4e2d\\u7684table\\u53ef\\u4ee5\\u88ab\\u6e05\\u7b97\\n            if(gameTable.lastActivityTimestamp() + tableInactiveTimeout < block.timestamp &&\\n            (gameTable.state() == GameState.FIRST_BETTING || gameTable.state() == GameState.SECOND_BETTING)){\\n                tempTables[validCount] = gameTable.getTableInfoShort();\\n                validCount++;\\n            }\\n        }\\n\\n        // \\u521b\\u5efa\\u4e00\\u4e2a\\u65b0\\u7684\\u6570\\u7ec4\\u6765\\u5b58\\u50a8\\u6709\\u6548\\u5143\\u7d20\\n        GameTableInfoShort[] memory tables = new GameTableInfoShort[](validCount);\\n        for (uint256 i = 0; i < validCount; i++) {\\n            tables[i] = tempTables[i];\\n        }\\n\\n        return tables;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u6307\\u5b9a\\u5730\\u5740\\u7684\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\n     * @param tableAddr \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\n     * @return \\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\n     */\\n    function getGameTableInfo(address tableAddr) external view returns (GameTableInfoShort memory) {\\n        return _getTableInfo(tableAddr);\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u6211\\u53c2\\u4e0e\\u7684\\u8d4c\\u684c\\n     * @param userAddr \\u7528\\u6237\\u5730\\u5740\\n     * @return \\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\n     */\\n    function getUserGameTables(address userAddr) external view returns (GameTableInfoShort[] memory) {\\n        UserInfo storage userInfo = userInfos[userAddr];\\n        GameTableInfoShort[] memory tables = new GameTableInfoShort[](userInfo.tables.length);\\n\\n        for (uint256 i = 0; i < userInfo.tables.length; i++) {\\n            address tableAddr = userInfo.tables[i];\\n            tables[i] = _getTableInfo(tableAddr);\\n        }\\n\\n        return tables;\\n    }\\n\\n    // \\u6dfb\\u52a0\\u4e00\\u4e2a\\u5185\\u90e8\\u51fd\\u6570\\u6765\\u83b7\\u53d6\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\n    function _getTableInfo(address tableAddr) internal view returns (GameTableInfoShort memory) {\\n        require(tableAddr != address(0) && gameTables[tableAddr] != address(0), \\\"Table does not exist\\\");\\n        IGameTableImplementation gameTable = IGameTableImplementation(tableAddr);\\n        return gameTable.getTableInfoShort();\\n    }\\n\\n    // \\u9a8c\\u8bc1\\u6e38\\u620f\\u684c\\u662f\\u5426\\u5408\\u6cd5\\n    function isValidGameTable(address tableAddr) external view returns (bool) {\\n        return address(gameTables[tableAddr]) == tableAddr;\\n    }\\n\\n    //\\u8bbe\\u7f6e\\u5956\\u52b1\\u6c60\\u5408\\u7ea6\\u5730\\u5740\\n    function setRewardPoolAddress(address _rewardPoolAddress) external onlyOwner nonReentrant{\\n        require(_rewardPoolAddress != address(0), \\\"Invalid reward pool address\\\");\\n        rewardPoolAddress = _rewardPoolAddress;\\n    }\\n\\n    function rewardPoolIsInUse(address _bankerAddr, uint256 _poolId) external view returns (bool) {\\n        address[] storage tableAddrs = userInfos[_bankerAddr].tables;\\n\\n        for (uint256 i = 0; i < tableAddrs.length; i++) {\\n            address tableAddr = tableAddrs[i];\\n            if (IGameTableImplementation(tableAddr).rewardPoolId() == _poolId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u6e38\\u620f\\u684c\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\n     * @param _gameTableFactoryAddress \\u6e38\\u620f\\u684c\\u5de5\\u5382\\u5408\\u7ea6\\u5730\\u5740\\n     */\\n    function setGameTableFactoryAddress(address _gameTableFactoryAddress) external onlyOwner nonReentrant {\\n        require(_gameTableFactoryAddress != address(0), \\\"Invalid game table factory address\\\");\\n        gameTableFactoryAddress = _gameTableFactoryAddress;\\n    }\\n\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u623f\\u95f4\\u7b49\\u7ea7\\u5408\\u7ea6\\u5730\\u5740\\n     * @param _roomLevelAddress \\u623f\\u95f4\\u7b49\\u7ea7\\u5408\\u7ea6\\u5730\\u5740\\n     */\\n    function setRoomLevelAddress(address _roomLevelAddress) external onlyOwner nonReentrant {\\n        require(_roomLevelAddress != address(0), \\\"Invalid room level address\\\");\\n        roomLevelAddress = _roomLevelAddress;\\n    }\\n\\n\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u7528\\u6237\\u521b\\u5efa\\u7684\\u623f\\u95f4\\u6570\\u91cf\\n     * @param userAddress \\u7528\\u6237\\u5730\\u5740\\n     * @return \\u7528\\u6237\\u521b\\u5efa\\u7684\\u623f\\u95f4\\u6570\\u91cf\\n     */\\n    function getUserCreatedRoomsCount(address userAddress) public view returns (uint256) {\\n        return userInfos[userAddress].tables.length;\\n    }\\n\\n\\n\\n    // \\u6388\\u6743\\u5347\\u7ea7\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    \\n\\n    /**\\n     * @dev \\u9700\\u8981\\u63a5\\u6536\\u8d44\\u91d1\\u7684\\u5408\\u7ea6\\u5fc5\\u987b\\u8981\\u5b9e\\u73b0\\u7684\\u51fd\\u6570\\n     */\\n    receive() external payable {}\\n\\n    // \\u4e8b\\u4ef6\\u5b9a\\u4e49\\n    event GameTableCreated(address indexed tableAddr, address indexed banker, uint256 betAmount, uint8 maxPlayers, uint256 bankerFeePercent);\\n    event GameTableRemoved(address indexed tableAddr);\\n    event GameConfigUpdated(uint256 minBet, uint8 maxPlayers);\\n}\\n\",\"keccak256\":\"0xd5589b0014786221c4fdc0420f04d846b30234a53dcc4ad37b973c7dd92d3bb3\",\"license\":\"UNLICENSED\"},\"contracts/BBInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\nimport \\\"./BBStructs.sol\\\";\\r\\n\\r\\ninterface IGameTableFactory {\\r\\n    function createGameTable(\\r\\n        uint256 tableId,\\r\\n        string memory tableName,\\r\\n        address bankerAddr,\\r\\n        uint256 betAmount,\\r\\n        uint8 maxPlayers,\\r\\n        address gameMainAddr,\\r\\n        uint8 bankerFeePercent,\\r\\n        uint8 firstRaise,\\r\\n        uint8 secondRaise,\\r\\n        uint256 rewardPoolId\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IGameTableImplementation {\\r\\n    function bankerAddr() external view returns (address);\\r\\n    function getTableInfo() external view returns (GameTableView memory);\\r\\n    function getTableInfoShort() external view returns (GameTableInfoShort memory);\\r\\n    function lastActivityTimestamp() external view returns (uint256);\\r\\n    function state() external view returns (GameState);\\r\\n    function rewardPoolId() external view returns (uint256);\\r\\n    function initialize(\\r\\n        uint256 _tableId,\\r\\n        string memory _tableName,\\r\\n        address _bankerAddr,\\r\\n        uint256 _betAmount,\\r\\n        uint8 _maxPlayers,\\r\\n        address _gameMainAddr,\\r\\n        uint8 _bankerFeePercent,\\r\\n        uint8 _firstRaise,\\r\\n        uint8 _secondRaise,\\r\\n        uint256 _rewardPoolId,\\r\\n        uint256 _implementationVersion\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IGameMain {\\r\\n    function isValidGameTable(address) external view returns (bool);\\r\\n    function liquidatorFeePercent() external view returns (uint256);\\r\\n    function playerTimeout() external view returns (uint256);\\r\\n    function tableInactiveTimeout() external view returns (uint256);\\r\\n    function rewardPoolAddress() external view returns (address);\\r\\n    function roomCardAddress() external view returns (address);\\r\\n    function roomLevelAddress() external view returns (address);\\r\\n    function getGameConfig() external view returns (GameConfig memory);\\r\\n    function rewardPoolIsInUse(address, uint256) external view returns (bool);\\r\\n    function userJoinTable(address userAddr) external;\\r\\n    function userLeaveTable(address userAddr) external;\\r\\n}\\r\\n\\r\\ninterface IRewardPool{\\r\\n    function tryDistributeReward(uint256 _poolId, address[] calldata _players, uint256 finalSeed) external  returns (address, uint256);\\r\\n    function isBankerPool(address, uint256) external view returns (bool);\\r\\n    function getRewardPoolInfo(address, uint256) external view returns (RewardPoolInfo memory);\\r\\n}\\r\\n\\r\\ninterface IRoomCardNFT{\\r\\n    function validateParams(uint256, uint8) external view returns (bool);\\r\\n    function hasNft(address) external view returns (bool);\\r\\n    function consume(address, uint256) external;\\r\\n}\",\"keccak256\":\"0x31bc037d6f22f39b622e76414b6b77535958a3a9c37b07cce084179c2e9ea136\",\"license\":\"MIT\"},\"contracts/BBPlayer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\n\\r\\nstruct BBPlayer {\\r\\n    address addr;\\r\\n    PlayerState state;\\r\\n\\r\\n    uint256 totalBet;\\r\\n\\r\\n    bool hasActedThisRound;   // \\u672c\\u8f6e\\u662f\\u5426\\u5df2\\u64cd\\u4f5c\\r\\n    bool isWinner;   // \\u662f\\u5426\\u4e3a\\u8d62\\u5bb6\\r\\n\\r\\n    uint8[5] cards;\\r\\n    CardType cardType;\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\nlibrary BBPlayerLib {\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u51c6\\u5907\\r\\n     */\\r\\n    function playerReady(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.READY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u53d6\\u6d88\\u51c6\\u5907\\r\\n     */\\r\\n    function playerUnready(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u52a0\\u5165\\r\\n     */\\r\\n    function playerJoin(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u5f03\\u724c\\r\\n     */\\r\\n    function playerFold(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.FOLDED;\\r\\n        self.hasActedThisRound = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u7ee7\\u7eed\\u6e38\\u620f\\r\\n     */\\r\\n    function playerContinue(BBPlayer storage self, uint256 additionalBet) internal {\\r\\n        self.totalBet += additionalBet;\\r\\n        self.state = PlayerState.ACTIVE;\\r\\n        self.hasActedThisRound = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u662f\\u5426\\u6709\\u6548\\r\\n     */\\r\\n    function isValid(BBPlayer storage self) internal view returns (bool) {\\r\\n        return self.addr != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u91cd\\u7f6e\\u73a9\\u5bb6\\u6570\\u636e\\r\\n     */\\r\\n    function playerReset(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n        self.hasActedThisRound = false;\\r\\n        self.totalBet = 0;\\r\\n        self.isWinner = false;\\r\\n        self.cards = [0, 0, 0, 0, 0];\\r\\n        self.cardType = CardType.NONE;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf7d1ee4658a50be6690b6c085733ceb592f91baa15b7b7fb5e27a30e1ae7e215\",\"license\":\"UNLICENSED\"},\"contracts/BBRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./BBTypes.sol\\\";\\nimport \\\"./BBStructs.sol\\\";\\nimport \\\"./BBInterfaces.sol\\\";\\n\\n/**\\n * @title BBRewardPool\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u5956\\u52b1\\u6c60\\u5408\\u7ea6\\uff0c\\u5141\\u8bb8\\u5e84\\u5bb6\\u521b\\u5efa\\u5956\\u52b1\\u6c60\\uff0c\\u5728\\u6e38\\u620f\\u7ed3\\u675f\\u65f6\\u968f\\u673a\\u5956\\u52b1\\u73a9\\u5bb6\\n */\\ncontract BBRewardPool is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    UUPSUpgradeable\\n{\\n    \\n\\n    // \\u72b6\\u6001\\u53d8\\u91cf\\n    uint256 private nextPoolId;                           // \\u4e0b\\u4e00\\u4e2a\\u5956\\u52b1\\u6c60ID\\n    mapping(address => RewardPoolInfo[]) private bankerPools;      // \\u5e84\\u5bb6\\u62e5\\u6709\\u7684\\u5956\\u52b1\\u6c60\\n\\n    // \\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\\n    address public gameMainAddr;\\n\\n    // \\u6700\\u5927\\u6982\\u7387\\u503c\\uff08100 = 100%\\uff09\\n    uint8 private constant MAX_PROBABILITY = 100;\\n\\n    // \\u9884\\u7559 25 \\u4e2a slot \\u7ed9\\u5c06\\u6765\\u65b0\\u589e\\u53d8\\u91cf\\u7528\\uff0c\\u9632\\u6b62\\u5b58\\u50a8\\u51b2\\u7a81\\n    uint256[25] private __gap;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev \\u521d\\u59cb\\u5316\\u51fd\\u6570\\uff0c\\u66ff\\u4ee3\\u6784\\u9020\\u51fd\\u6570\\n     * @param _gameMainAddr \\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\\n     */\\n    function initialize(address _gameMainAddr) public initializer {\\n        __Ownable_init(msg.sender);\\n        __ReentrancyGuard_init();\\n        __UUPSUpgradeable_init();\\n\\n        require(_gameMainAddr != address(0), \\\"Invalid game main address\\\");\\n        gameMainAddr = _gameMainAddr;\\n        nextPoolId = 1;\\n    }\\n\\n    modifier onlyValidTable() {\\n        IGameMain gameMain = IGameMain(gameMainAddr);\\n        require(gameMain.isValidGameTable(msg.sender), \\\"invalid table\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev \\u521b\\u5efa\\u65b0\\u7684\\u5956\\u52b1\\u6c60\\n     * @param name \\u5956\\u52b1\\u6c60\\u540d\\u79f0\\n     * @param _totalReward \\u603b\\u5956\\u52b1\\u91d1\\u989d\\n     * @param _rewardPerGame \\u6bcf\\u5c40\\u6e38\\u620f\\u5956\\u52b1\\u91d1\\u989d\\n     * @param _winProbability \\u4e2d\\u5956\\u6982\\u7387\\uff08\\u4ee5\\u767e\\u5206\\u4e4b\\u4e00\\u4e3a\\u5355\\u4f4d\\uff0c\\u4f8b\\u598210\\u8868\\u793a10%\\u7684\\u6982\\u7387\\uff09\\n     */\\n    function createRewardPool(string calldata name, uint256 _totalReward, uint256 _rewardPerGame, uint256 _winProbability) external payable nonReentrant {\\n        // \\u9a8c\\u8bc1\\u53c2\\u6570\\n        require(_rewardPerGame > 0 && _totalReward > 0, \\\"Invalid reward amount\\\");\\n        require(_winProbability > 0 && _winProbability <= MAX_PROBABILITY, \\\"Invalid win probability\\\");\\n        require(msg.value == _totalReward, \\\"Insufficient funds\\\");\\n\\n        // \\u521b\\u5efa\\u5956\\u52b1\\u6c60\\n        RewardPoolInfo memory pool;\\n        pool.name = name;\\n        pool.poolId = nextPoolId++;\\n        pool.banker = msg.sender;\\n        pool.totalAmount = _totalReward;\\n        pool.rewardPerGame = _rewardPerGame;\\n        pool.winProbability = _winProbability;\\n        pool.remainingAmount = _totalReward;\\n        pool.inUse = false;\\n        pool.__gap = [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)];\\n\\n        // \\u6dfb\\u52a0\\u5230\\u5e84\\u5bb6\\u7684\\u5956\\u52b1\\u6c60\\u5217\\u8868\\n        bankerPools[msg.sender].push(pool);\\n\\n        emit RewardPoolCreated(pool.poolId, msg.sender, msg.value, _rewardPerGame, _winProbability);\\n    }\\n\\n    //\\u9a8c\\u8bc1\\u662f\\u5426\\u662f\\u8fd9\\u4e2a\\u5e84\\u5bb6\\u7684\\u5956\\u52b1\\u6c60\\n    function isBankerPool(address _banker, uint256 _poolId) external view returns (bool) {\\n        require(_banker != address(0), \\\"Invalid banker address\\\");\\n        require(_poolId > 0, \\\"Invalid pool ID\\\");\\n        \\n        RewardPoolInfo[] memory pools = bankerPools[_banker];\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            if (pools[i].poolId == _poolId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // \\u6839\\u636ebankerAddr\\u548cpoolId\\u83b7\\u53d6pool\\n    function _getPool(address _banker, uint256 _poolId) internal view returns (uint256, RewardPoolInfo storage) {\\n        RewardPoolInfo[] storage pools = bankerPools[_banker];\\n        uint256 poolIndex = 0;\\n        bool found = false;\\n        \\n        for (uint256 i = 0; i < pools.length; i++) {\\n            if (pools[i].poolId == _poolId) {\\n                poolIndex = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        require(found, \\\"Pool not found\\\");\\n        return (poolIndex, pools[poolIndex]);\\n    }\\n\\n    /**\\n     * @dev \\u5e84\\u5bb6\\u5220\\u9664\\u5956\\u52b1\\u6c60\\u5e76\\u53d6\\u56de\\u5269\\u4f59\\u8d44\\u91d1\\n     * @param _poolId \\u8981\\u5220\\u9664\\u7684\\u5956\\u52b1\\u6c60ID\\n     */\\n    function removeRewardPool(uint256 _poolId) external nonReentrant {\\n        address bankerAddr = msg.sender;\\n        require(bankerAddr != address(0), \\\"Invalid banker address\\\");\\n\\n        (uint256 poolIndex, RewardPoolInfo storage pool) = _getPool(bankerAddr, _poolId);\\n        \\n        if(IGameMain(gameMainAddr).rewardPoolIsInUse(bankerAddr, _poolId)){\\n            require(false, \\\"Reward pool in use\\\");\\n        }\\n        \\n        uint256 remainingAmount = pool.remainingAmount;\\n\\n        // \\u4ece\\u6570\\u7ec4\\u4e2d\\u79fb\\u9664\\u5956\\u52b1\\u6c60\\uff08\\u901a\\u8fc7\\u5c06\\u6700\\u540e\\u4e00\\u4e2a\\u5143\\u7d20\\u79fb\\u5230\\u8981\\u5220\\u9664\\u7684\\u4f4d\\u7f6e\\uff09\\n        if (poolIndex != bankerPools[bankerAddr].length - 1) {\\n            bankerPools[bankerAddr][poolIndex] = bankerPools[bankerAddr][bankerPools[bankerAddr].length - 1];\\n        }\\n        bankerPools[bankerAddr].pop();\\n\\n        if(remainingAmount > 0){\\n            // \\u8f6c\\u8d26\\u5269\\u4f59\\u8d44\\u91d1\\u7ed9\\u5e84\\u5bb6\\n            (bool success, ) = payable(bankerAddr).call{value: remainingAmount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n        \\n\\n        emit RewardPoolRemoved(_poolId, bankerAddr, remainingAmount);\\n    }\\n\\n    /**\\n     * @dev \\u6e38\\u620f\\u7ed3\\u675f\\u65f6\\u5c1d\\u8bd5\\u5206\\u914d\\u5956\\u52b1\\n     * @param _poolId \\u5956\\u52b1\\u6c60ID\\n     * @param _players \\u53c2\\u4e0e\\u6e38\\u620f\\u7684\\u73a9\\u5bb6\\u5730\\u5740\\u6570\\u7ec4\\n     * @param finalSeed \\u6700\\u7ec8\\u79cd\\u5b50\\n     * @return \\u662f\\u5426\\u5206\\u914d\\u4e86\\u5956\\u52b1\\n     */\\n    function tryDistributeReward(uint256 _poolId, address[] calldata _players, uint256 finalSeed) external onlyValidTable nonReentrant returns (address, uint256) {\\n        address tableAddr = msg.sender;\\n        address bankerAddr = IGameTableImplementation(tableAddr).bankerAddr();\\n        require(bankerAddr != address(0), \\\"invalid banker address\\\");\\n\\n        (, RewardPoolInfo storage pool) = _getPool(bankerAddr, _poolId);\\n        if (pool.poolId == 0) return (address(0), 0);\\n\\n        // \\u9a8c\\u8bc1\\u6709\\u8db3\\u591f\\u7684\\u8d44\\u91d1\\n        if (pool.remainingAmount < pool.rewardPerGame) return (address(0), 0);\\n\\n        // \\u9a8c\\u8bc1\\u6709\\u73a9\\u5bb6\\u53c2\\u4e0e\\n        uint256 playerCount = _players.length;\\n        if (playerCount == 0) return (address(0), 0);\\n\\n        // \\u751f\\u6210\\u968f\\u673a\\u6570\\u51b3\\u5b9a\\u662f\\u5426\\u53d1\\u653e\\u5956\\u52b1\\n        uint256 randomValue = _generateRandomNumber(finalSeed, _poolId, tableAddr) % MAX_PROBABILITY;\\n\\n        // \\u5982\\u679c\\u968f\\u673a\\u6570\\u5c0f\\u4e8e\\u4e2d\\u5956\\u6982\\u7387\\uff0c\\u5219\\u53d1\\u653e\\u5956\\u52b1\\n        if (randomValue < pool.winProbability) {\\n            // \\u5b89\\u5168\\u5730\\u968f\\u673a\\u9009\\u62e9\\u4e00\\u540d\\u73a9\\u5bb6\\n            uint256 winnerIndex = 0;\\n            if (playerCount > 1) {\\n                winnerIndex = _generateRandomNumber(finalSeed, _poolId + 1, tableAddr) % playerCount;\\n            }\\n            \\n            // \\u989d\\u5916\\u5b89\\u5168\\u68c0\\u67e5\\uff0c\\u786e\\u4fdd\\u7d22\\u5f15\\u5728\\u8303\\u56f4\\u5185\\n            require(winnerIndex < playerCount, \\\"Winner index out of bounds\\\");\\n            \\n            address winner = _players[winnerIndex];\\n            require(winner != address(0), \\\"Invalid winner address\\\");\\n\\n            // \\u66f4\\u65b0\\u5956\\u52b1\\u6c60\\u4f59\\u989d\\n            pool.remainingAmount -= pool.rewardPerGame;\\n\\n            // \\u8f6c\\u8d26\\u5956\\u52b1\\u7ed9\\u83b7\\u80dc\\u8005\\n            (bool success, ) = payable(winner).call{value: pool.rewardPerGame}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n\\n            emit RewardDistributed(_poolId, tableAddr, winner, pool.rewardPerGame);\\n            return (winner, pool.rewardPerGame);\\n        }\\n\\n        return (address(0), 0);\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u6307\\u5b9a\\u5730\\u5740\\u7684\\u6240\\u6709\\u5956\\u52b1\\u6c60\\n     * @param _banker \\u5e84\\u5bb6\\u5730\\u5740\\n     * @return \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\u6570\\u7ec4\\n     */\\n    function getBankerPools(address _banker) external view returns (RewardPoolInfo[] memory) {\\n        uint256 poolCount = bankerPools[_banker].length;\\n        RewardPoolInfo[] memory pools = new RewardPoolInfo[](poolCount);\\n        for(uint256 i = 0; i < poolCount; i++) {\\n            pools[i] = bankerPools[_banker][i];\\n            pools[i].inUse = IGameMain(gameMainAddr).rewardPoolIsInUse(_banker, pools[i].poolId);\\n        }\\n        return pools;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u6307\\u5b9a\\u5e84\\u5bb6\\u7684\\u6307\\u5b9a\\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\n     * @param _banker \\u5e84\\u5bb6\\u5730\\u5740\\n     * @param _poolId \\u5956\\u52b1\\u6c60ID\\n     * @return \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\n     */\\n    function getRewardPoolInfo(address _banker, uint256 _poolId) external view returns (RewardPoolInfo memory) {\\n        (, RewardPoolInfo storage pool) = _getPool(_banker, _poolId);\\n        return pool;\\n    }\\n\\n    /**\\n     * @dev \\u751f\\u6210\\u968f\\u673a\\u6570\\uff08\\u5185\\u90e8\\u51fd\\u6570\\uff09\\n     * @param _seed1 \\u79cd\\u5b50\\n     * @param _seed2 \\u79cd\\u5b50\\n     * @param _seed3 \\u79cd\\u5b50\\n     * @return \\u4f2a\\u968f\\u673a\\u6570\\n     */\\n    function _generateRandomNumber(uint256 _seed1, uint256 _seed2, address _seed3) internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\n            _seed1,\\n            _seed2,\\n            _seed3,\\n            block.timestamp,\\n            block.difficulty,\\n            blockhash(block.number - 1)\\n        )));\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\\n     * @param _gameMainAddr \\u65b0\\u7684\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\\n     */\\n    function setGameMainAddress(address _gameMainAddr) external onlyOwner {\\n        require(_gameMainAddr != address(0), \\\"Invalid game main address\\\");\\n        gameMainAddr = _gameMainAddr;\\n        emit GameMainAddressUpdated(_gameMainAddr);\\n    }\\n\\n    /**\\n     * @dev \\u5b9e\\u73b0UUPS\\u53ef\\u5347\\u7ea7\\u5408\\u7ea6\\u6240\\u9700\\u7684\\u6388\\u6743\\u68c0\\u67e5\\n     * @param newImplementation \\u65b0\\u7684\\u5b9e\\u73b0\\u5408\\u7ea6\\u5730\\u5740\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    // \\u4e8b\\u4ef6\\u5b9a\\u4e49\\n    event RewardPoolCreated(uint256 indexed poolId, address indexed banker, uint256 totalAmount, uint256 rewardPerGame, uint256 winProbability);\\n    event RewardPoolRemoved(uint256 indexed poolId, address indexed banker, uint256 remainingAmount);\\n    event TableRewardPoolSet(address indexed tableAddr, uint256 indexed poolId, address indexed banker);\\n    event TableRewardPoolRemoved(address indexed tableAddr, uint256 indexed poolId, address indexed banker);\\n    event RewardDistributed(uint256 indexed poolId, address indexed tableAddr, address indexed winner, uint256 amount);\\n    event GameMainAddressUpdated(address indexed gameMainAddr);\\n\\n    \\n}\\n\",\"keccak256\":\"0x88659c46ccf3e38ab82d17f683d28acd1b7c0da54309ee5533752166782131cc\",\"license\":\"UNLICENSED\"},\"contracts/BBRoomCardNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./BBStructs.sol\\\";\\r\\nimport \\\"./BBInterfaces.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BBRoomCard\\r\\n * @dev Niu Niu game room card NFT contract with dynamic card types\\r\\n */\\r\\ncontract BBRoomCardNFT is\\r\\n    Initializable,\\r\\n    ERC721Upgradeable,\\r\\n    ERC721EnumerableUpgradeable,\\r\\n    OwnableUpgradeable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Room card type structure - combines type and config in one structure\\r\\n    \\r\\n\\r\\n    // Used to generate unique token IDs\\r\\n    uint256 private _tokenIdCounter;\\r\\n\\r\\n    // Used to generate unique card type IDs\\r\\n    uint256 private _nftTypeIdCounter;\\r\\n\\r\\n    // Room card base URI\\r\\n    string private _baseTokenURI;\\r\\n\\r\\n    // Game main contract address\\r\\n    address public gameMainAddress;\\r\\n\\r\\n    // Card types by ID\\r\\n    mapping(uint256 => RoomCardNftType) public nftTypes;\\r\\n\\r\\n    // Card type ID corresponding to each token ID\\r\\n    mapping(uint256 => uint256) public tokenNftTypes;\\r\\n\\r\\n    // Array of all card type IDs\\r\\n    uint256[] private _allNftTypeIds;\\r\\n\\r\\n    // \\u9884\\u7559 25 \\u4e2a slot \\u7ed9\\u5c06\\u6765\\u65b0\\u589e\\u53d8\\u91cf\\u7528\\uff0c\\u9632\\u6b62\\u5b58\\u50a8\\u51b2\\u7a81\\r\\n    uint256[25] private __gap;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initialization function, replaces constructor\\r\\n     */\\r\\n    function initialize(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory baseTokenURI\\r\\n    ) public initializer {\\r\\n        __ERC721_init(name, symbol);\\r\\n        __ERC721Enumerable_init();\\r\\n        __Ownable_init(msg.sender);\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _baseTokenURI = baseTokenURI;\\r\\n        _tokenIdCounter = 1;\\r\\n        _nftTypeIdCounter = 1; // Start from 1\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the game main contract address\\r\\n     * @param _gameMainAddress Game main contract address\\r\\n     */\\r\\n    function setGameMainAddress(address _gameMainAddress) external onlyOwner {\\r\\n        require(_gameMainAddress != address(0), \\\"Invalid game main address\\\");\\r\\n        gameMainAddress = _gameMainAddress;\\r\\n    }\\r\\n\\r\\n    modifier onlyGameTable() {\\r\\n        bool isValidTable = false;\\r\\n        if (gameMainAddress != address(0)) {\\r\\n            if(IGameMain(gameMainAddress).isValidGameTable(msg.sender)){\\r\\n                isValidTable = true;\\r\\n            }else{\\r\\n                isValidTable = false;\\r\\n            }\\r\\n        }\\r\\n        require(isValidTable, \\\"Only game table can call\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new card type\\r\\n     * @param name Name of the card type\\r\\n     * @param maxPlayers Maximum number of players allowed\\r\\n     * @param price Price to purchase this card\\r\\n     * @param uriSuffix URI suffix for metadata\\r\\n     * @return The ID of the newly created card type\\r\\n     */\\r\\n    function addType(\\r\\n        string memory name,\\r\\n        uint8 maxPlayers,\\r\\n        uint256 price,\\r\\n        string memory uriSuffix,\\r\\n        uint256 maxMint,\\r\\n        string memory rarity\\r\\n    ) external onlyOwner returns (uint256) {\\r\\n        require(bytes(name).length > 0, \\\"Name cannot be empty\\\");\\r\\n        require(maxPlayers > 1, \\\"Max players must be greater than 1\\\");\\r\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\r\\n        require(maxMint > 0, \\\"Max mint must be greater than 0\\\");\\r\\n        require(bytes(rarity).length > 0, \\\"Rarity cannot be empty\\\");\\r\\n\\r\\n        uint256 newNftTypeId = _nftTypeIdCounter;\\r\\n        _nftTypeIdCounter++;\\r\\n\\r\\n        nftTypes[newNftTypeId] = RoomCardNftType({\\r\\n            id: newNftTypeId,\\r\\n            name: name,\\r\\n            maxPlayers: maxPlayers,\\r\\n            price: price,\\r\\n            uriSuffix: uriSuffix,\\r\\n            active: true,\\r\\n            maxMint: maxMint,\\r\\n            rarity: rarity,\\r\\n            minted: 0,\\r\\n            __gap: [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)]\\r\\n        });\\r\\n        _allNftTypeIds.push(newNftTypeId);\\r\\n        emit CardTypeAdded(newNftTypeId, name, maxPlayers, price, uriSuffix, maxMint, rarity);\\r\\n        return newNftTypeId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update an existing card type\\r\\n     * @param nftTypeId Card type ID to update\\r\\n     * @param maxPlayers New maximum number of players\\r\\n     * @param price New price\\r\\n     * @param uriSuffix New URI suffix\\r\\n     */\\r\\n    function updateType(\\r\\n        uint256 nftTypeId,\\r\\n        uint8 maxPlayers,\\r\\n        uint256 price,\\r\\n        string memory uriSuffix,\\r\\n        uint256 maxMint,\\r\\n        string memory rarity\\r\\n    ) external onlyOwner {\\r\\n        require(nftTypes[nftTypeId].id == nftTypeId, \\\"Card type does not exist\\\");\\r\\n        require(maxPlayers > 1, \\\"Max players must be greater than 1\\\");\\r\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\r\\n        require(maxMint > 0, \\\"Max mint must be greater than 0\\\");\\r\\n        require(bytes(rarity).length > 0, \\\"Rarity cannot be empty\\\");\\r\\n        RoomCardNftType storage nftType = nftTypes[nftTypeId];\\r\\n        nftType.maxPlayers = maxPlayers;\\r\\n        nftType.price = price;\\r\\n        nftType.uriSuffix = uriSuffix;\\r\\n        nftType.maxMint = maxMint;\\r\\n        nftType.rarity = rarity;\\r\\n        emit CardTypeUpdated(nftTypeId, maxPlayers, price, uriSuffix, maxMint, rarity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set a card type's active status\\r\\n     * @param nftTypeId Card type ID\\r\\n     * @param active New active status\\r\\n     */\\r\\n    function setTypeActive(uint256 nftTypeId, bool active) external onlyOwner {\\r\\n        // Verify card type exists\\r\\n        require(nftTypes[nftTypeId].id == nftTypeId, \\\"Card type does not exist\\\");\\r\\n\\r\\n        nftTypes[nftTypeId].active = active;\\r\\n        emit CardTypeActiveStatusChanged(nftTypeId, active);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Purchase a room card\\r\\n     * @param nftTypeId Card type ID\\r\\n     * @return Returns the minted room card ID\\r\\n     */\\r\\n    function buy(uint256 nftTypeId) external payable returns (uint256) {\\r\\n        RoomCardNftType storage nftType = nftTypes[nftTypeId];\\r\\n        require(nftType.id == nftTypeId, \\\"Card type does not exist\\\");\\r\\n        require(nftType.active, \\\"Card type not active\\\");\\r\\n        require(msg.value >= nftType.price, \\\"Insufficient payment\\\");\\r\\n        require(nftType.minted < nftType.maxMint, \\\"Max mint reached for this card type\\\");\\r\\n\\r\\n        nftType.minted += 1;\\r\\n        uint256 tokenId = _tokenIdCounter;\\r\\n        _tokenIdCounter++;\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        tokenNftTypes[tokenId] = nftTypeId;\\r\\n        if (msg.value > nftType.price) {\\r\\n            uint256 refundAmount = msg.value - nftType.price;\\r\\n            (bool success, ) = payable(msg.sender).call{value: refundAmount}(\\\"\\\");\\r\\n            require(success, \\\"Refund failed\\\");\\r\\n        }\\r\\n        emit RoomCardPurchased(msg.sender, tokenId, nftType.price, nftTypeId);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch purchase room cards\\r\\n     * @param nftTypeId Card type ID\\r\\n     * @param amount Purchase quantity\\r\\n     * @return Returns an array of minted room card IDs\\r\\n     */\\r\\n    function batchBuy(uint256 nftTypeId, uint256 amount) external payable returns (uint256[] memory) {\\r\\n        RoomCardNftType storage nftType = nftTypes[nftTypeId];\\r\\n        require(nftType.id == nftTypeId, \\\"Card type does not exist\\\");\\r\\n        require(nftType.active, \\\"Card type not active\\\");\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(msg.value >= nftType.price * amount, \\\"Insufficient payment\\\");\\r\\n        require(nftType.minted + amount <= nftType.maxMint, \\\"Max mint reached for this card type\\\");\\r\\n\\r\\n        uint256[] memory tokenIds = new uint256[](amount);\\r\\n        for (uint256 i = 0; i < amount; i++) {\\r\\n            nftType.minted += 1;\\r\\n            require(nftType.minted <= nftType.maxMint, \\\"Max mint reached for this card type\\\");\\r\\n\\r\\n            uint256 tokenId = _tokenIdCounter;\\r\\n            _tokenIdCounter++;\\r\\n            _safeMint(msg.sender, tokenId);\\r\\n            tokenIds[i] = tokenId;\\r\\n            tokenNftTypes[tokenId] = nftTypeId;\\r\\n        }\\r\\n        uint256 totalPrice = nftType.price * amount;\\r\\n        if (msg.value > totalPrice) {\\r\\n            uint256 refundAmount = msg.value - totalPrice;\\r\\n            (bool success, ) = payable(msg.sender).call{value: refundAmount}(\\\"\\\");\\r\\n            require(success, \\\"Refund failed\\\");\\r\\n        }\\r\\n        emit BatchRoomCardPurchased(msg.sender, tokenIds, totalPrice, nftTypeId);\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Consume room card\\r\\n     * @param owner Owner of the room card\\r\\n     * @param tokenId Room card ID to be consumed\\r\\n     */\\r\\n    function consume(address owner, uint256 tokenId) external onlyGameTable {\\r\\n        require(_ownerOf(tokenId) == owner, \\\"Not approved or owner\\\");\\r\\n        _burn(tokenId);\\r\\n\\r\\n        emit RoomCardConsumed(owner, tokenId);\\r\\n    }\\r\\n\\r\\n    function increaseMaxMint(uint256 nftTypeId, uint256 addAmount) external onlyOwner {\\r\\n        require(nftTypes[nftTypeId].id == nftTypeId, \\\"Card type does not exist\\\");\\r\\n        require(addAmount > 0, \\\"Add amount must be greater than 0\\\");\\r\\n        nftTypes[nftTypeId].maxMint += addAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set base URI\\r\\n     * @param baseURI New base URI\\r\\n     */\\r\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\r\\n        _baseTokenURI = baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override base URI function\\r\\n     */\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override tokenURI function, returns different URIs based on room card type\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        _requireOwned(tokenId);\\r\\n\\r\\n        uint256 nftTypeId = tokenNftTypes[tokenId];\\r\\n        string memory baseURI = _baseURI();\\r\\n        string memory suffix = nftTypes[nftTypeId].uriSuffix;\\r\\n\\r\\n        return bytes(baseURI).length > 0 ?\\r\\n            string(abi.encodePacked(baseURI, suffix)) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw ETH from the contract\\r\\n     */\\r\\n    function withdraw() external onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"No funds to withdraw\\\");\\r\\n\\r\\n        (bool success, ) = payable(owner()).call{value: balance}(\\\"\\\");\\r\\n        require(success, \\\"Withdrawal failed\\\");\\r\\n\\r\\n        emit Withdrawn(owner(), balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if a user owns any room cards\\r\\n     * @param owner User address\\r\\n     * @return Whether the user owns any room cards\\r\\n     */\\r\\n    function hasNft(address owner) external view returns (bool) {\\r\\n        return balanceOf(owner) > 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u7528\\u6237\\u62e5\\u6709\\u7684\\u623f\\u5361\\u4fe1\\u606f\\r\\n     * @param userAddress \\u7528\\u6237\\u5730\\u5740\\r\\n     * @return has \\u662f\\u5426\\u62e5\\u6709\\u623f\\u5361\\r\\n     * @return details \\u623f\\u5361\\u8be6\\u7ec6\\u4fe1\\u606f\\u6570\\u7ec4\\r\\n     */\\r\\n    function getUserNfts(address userAddress) external view returns (bool has, RoomCardNftDetail[] memory details) {\\r\\n        has = balanceOf(userAddress) > 0;\\r\\n\\r\\n        if (has) {\\r\\n            uint256 balance = balanceOf(userAddress);\\r\\n            details = new RoomCardNftDetail[](balance);\\r\\n\\r\\n            for (uint256 i = 0; i < balance; i++) {\\r\\n                uint256 tokenId = tokenOfOwnerByIndex(userAddress, i);\\r\\n                uint256 nftTypeId = tokenNftTypes[tokenId];\\r\\n                \\r\\n                details[i] = RoomCardNftDetail({\\r\\n                    tokenId: tokenId,\\r\\n                    nftType: nftTypes[nftTypeId]\\r\\n                });\\r\\n            }\\r\\n        } else {\\r\\n            details = new RoomCardNftDetail[](0);\\r\\n        }\\r\\n\\r\\n        return (has, details);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get card type for a specific token\\r\\n     * @param tokenId Room card ID\\r\\n     * @return Card type information\\r\\n     */\\r\\n    function getType(uint256 tokenId) external view returns (RoomCardNftType memory) {\\r\\n        _requireOwned(tokenId);\\r\\n        uint256 nftTypeId = tokenNftTypes[tokenId];\\r\\n        return nftTypes[nftTypeId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all card type IDs\\r\\n     * @return Array of all card type IDs\\r\\n     */\\r\\n    function getAllTypeIds() external view returns (uint256[] memory) {\\r\\n        return _allNftTypeIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all active card types\\r\\n     * @return Arrays of card type IDs and card types\\r\\n     */\\r\\n    function getActiveTypes() external view returns (uint256[] memory, RoomCardNftType[] memory) {\\r\\n        uint256 activeCount = 0;\\r\\n\\r\\n        // Count active card types\\r\\n        for (uint256 i = 0; i < _allNftTypeIds.length; i++) {\\r\\n            uint256 typeId = _allNftTypeIds[i];\\r\\n            if (nftTypes[typeId].active) {\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create arrays for active card types\\r\\n        uint256[] memory activeIds = new uint256[](activeCount);\\r\\n        RoomCardNftType[] memory activeTypes = new RoomCardNftType[](activeCount);\\r\\n\\r\\n        // Fill arrays\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < _allNftTypeIds.length; i++) {\\r\\n            uint256 typeId = _allNftTypeIds[i];\\r\\n            if (nftTypes[typeId].active) {\\r\\n                activeIds[index] = typeId;\\r\\n                activeTypes[index] = nftTypes[typeId];\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (activeIds, activeTypes);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate if room card meets game parameter requirements\\r\\n     * @param tokenId Room card ID\\r\\n     * @param maxPlayers Maximum number of players\\r\\n     * @return Whether requirements are met\\r\\n     */\\r\\n    function validateParams(uint256 tokenId, uint8 maxPlayers) external view returns (bool) {\\r\\n        _requireOwned(tokenId);\\r\\n        uint256 nftTypeId = tokenNftTypes[tokenId];\\r\\n        RoomCardNftType memory nftType = nftTypes[nftTypeId];\\r\\n\\r\\n        return (maxPlayers <= nftType.maxPlayers);\\r\\n    }\\r\\n\\r\\n    function _increaseBalance(address account, uint128 value) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\r\\n        super._increaseBalance(account, value);\\r\\n    }\\r\\n\\r\\n    function _update(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        address auth\\r\\n    ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (address) {\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view override(ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // Authorize upgrade\\r\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\r\\n\\r\\n    /**\\r\\n     * @dev Function that must be implemented by contracts that need to receive funds\\r\\n     */\\r\\n    receive() external payable {}\\r\\n\\r\\n    // Event definitions\\r\\n    event CardTypeAdded(uint256 indexed nftTypeId, string name, uint8 maxPlayers, uint256 price, string uriSuffix, uint256 maxMint, string rarity);\\r\\n    event CardTypeUpdated(uint256 indexed nftTypeId, uint8 maxPlayers, uint256 price, string uriSuffix, uint256 maxMint, string rarity);\\r\\n    event CardTypeMaxMintIncreased(uint256 indexed nftTypeId, uint256 newMaxMint);\\r\\n    event CardTypeActiveStatusChanged(uint256 indexed nftTypeId, bool active);\\r\\n    event RoomCardPurchased(address indexed buyer, uint256 tokenId, uint256 price, uint256 nftTypeId);\\r\\n    event BatchRoomCardPurchased(address indexed buyer, uint256[] tokenIds, uint256 totalPrice, uint256 nftTypeId);\\r\\n    event RoomCardConsumed(address indexed owner, uint256 tokenId);\\r\\n    event Withdrawn(address indexed to, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x599744d5c6e96b07e32277e8a9ebfdf77add0c5ee9a210fbce276e6f51210a16\",\"license\":\"UNLICENSED\"},\"contracts/BBRoomLevelNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./BBStructs.sol\\\";\\n\\n/**\\n * @title BBRoomLevel\\n * @dev Niu Niu game room level NFT contract that determines how many rooms a player can create\\n */\\ncontract BBRoomLevelNFT is\\n    Initializable,\\n    ERC721Upgradeable,\\n    ERC721EnumerableUpgradeable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable\\n{\\n    using Strings for uint256;\\n\\n    \\n    // Used to generate unique token IDs\\n    uint256 private _tokenIdCounter;\\n\\n    // Used to generate unique level type IDs\\n    uint256 private _nftTypeIdCounter;\\n\\n    // Room level base URI\\n    string private _baseTokenURI;\\n\\n    // Game main contract address\\n    address public gameMainAddress;\\n\\n    // Level types by ID\\n    mapping(uint256 => RoomLevelNftType) public nftTypes;\\n\\n    // Level type ID corresponding to each token ID\\n    mapping(uint256 => uint256) public tokenNftTypes;\\n\\n    // Array of all level type IDs\\n    uint256[] private _allNftTypeIds;\\n\\n    // \\u9884\\u7559 25 \\u4e2a slot \\u7ed9\\u5c06\\u6765\\u65b0\\u589e\\u53d8\\u91cf\\u7528\\uff0c\\u9632\\u6b62\\u5b58\\u50a8\\u51b2\\u7a81\\n    uint256[25] private __gap;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initialization function, replaces constructor\\n     */\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) public initializer {\\n        __ERC721_init(name, symbol);\\n        __ERC721Enumerable_init();\\n        __Ownable_init(msg.sender);\\n        __UUPSUpgradeable_init();\\n\\n        _baseTokenURI = baseTokenURI;\\n        _tokenIdCounter = 0;\\n        _nftTypeIdCounter = 1; // Start from 1\\n    }\\n\\n    /**\\n     * @dev Set the game main contract address\\n     * @param _gameMainAddress Game main contract address\\n     */\\n    function setGameMainAddress(address _gameMainAddress) external onlyOwner {\\n        require(_gameMainAddress != address(0), \\\"Invalid game main address\\\");\\n        gameMainAddress = _gameMainAddress;\\n    }\\n\\n    /**\\n     * @dev Add a new level type\\n     * @param name Name of the level type\\n     * @param maxRooms Maximum number of rooms allowed\\n     * @param price Price to purchase this level\\n     * @param uriSuffix URI suffix for metadata\\n     * @return The ID of the newly created level type\\n     */\\n    function addType(\\n        string memory name,\\n        uint256 maxRooms,\\n        uint256 price,\\n        string memory uriSuffix,\\n        uint256 maxMint,\\n        string memory rarity\\n    ) external onlyOwner returns (uint256) {\\n        require(bytes(name).length > 0, \\\"Name cannot be empty\\\");\\n        require(maxRooms > 0, \\\"Max rooms must be greater than 0\\\");\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\n        require(maxMint > 0, \\\"Max mint must be greater than 0\\\");\\n\\n        uint256 newNftTypeId = _nftTypeIdCounter;\\n        _nftTypeIdCounter++;\\n\\n        nftTypes[newNftTypeId] = RoomLevelNftType({\\n            id: newNftTypeId,\\n            name: name,\\n            maxRooms: maxRooms,\\n            price: price,\\n            uriSuffix: uriSuffix,\\n            active: true,\\n            maxMint: maxMint,\\n            minted: 0,\\n            rarity: rarity,\\n            __gap: [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)]\\n        });\\n\\n        _allNftTypeIds.push(newNftTypeId);\\n\\n        emit LevelTypeAdded(newNftTypeId, name, maxRooms, price, uriSuffix);\\n        return newNftTypeId;\\n    }\\n\\n    /**\\n     * @dev Update an existing level type\\n     * @param nftTypeId Level type ID to update\\n     * @param maxRooms New maximum number of rooms\\n     * @param price New price\\n     * @param uriSuffix New URI suffix\\n     */\\n    function updateType(\\n        uint256 nftTypeId,\\n        uint256 maxRooms,\\n        uint256 price,\\n        string memory uriSuffix,\\n        uint256 maxMint,\\n        string memory rarity\\n    ) external onlyOwner {\\n        require(nftTypes[nftTypeId].id == nftTypeId, \\\"Level type does not exist\\\");\\n        require(maxRooms > 0, \\\"Max rooms must be greater than 0\\\");\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\n        require(maxMint > 0, \\\"Max mint must be greater than 0\\\");\\n\\n        RoomLevelNftType storage nftType = nftTypes[nftTypeId];\\n        nftType.maxRooms = maxRooms;\\n        nftType.price = price;\\n        nftType.uriSuffix = uriSuffix;\\n        nftType.maxMint = maxMint;\\n        nftType.rarity = rarity;\\n\\n        emit LevelTypeUpdated(nftTypeId, maxRooms, price, uriSuffix);\\n    }\\n\\n    /**\\n     * @dev Set a level type's active status\\n     * @param nftTypeId Level type ID\\n     * @param active New active status\\n     */\\n    function setTypeActive(uint256 nftTypeId, bool active) external onlyOwner {\\n        // Verify level type exists\\n        require(nftTypes[nftTypeId].id == nftTypeId, \\\"Level type does not exist\\\");\\n\\n        nftTypes[nftTypeId].active = active;\\n        emit LevelTypeActiveStatusChanged(nftTypeId, active);\\n    }\\n\\n    /**\\n     * @dev Purchase a room level\\n     * @param nftTypeId Level type ID\\n     * @return Returns the minted level token ID\\n     */\\n    function buy(uint256 nftTypeId) external payable returns (uint256) {\\n        RoomLevelNftType storage nftType = nftTypes[nftTypeId];\\n        require(nftType.id == nftTypeId, \\\"Level type does not exist\\\");\\n        require(nftType.active, \\\"Level type not active\\\");\\n        require(msg.value >= nftType.price, \\\"Insufficient payment\\\");\\n        require(nftType.minted < nftType.maxMint, \\\"Max mint reached for this level type\\\");\\n\\n        nftType.minted += 1;\\n        uint256 tokenId = _tokenIdCounter;\\n        _tokenIdCounter++;\\n        _safeMint(msg.sender, tokenId);\\n        tokenNftTypes[tokenId] = nftTypeId;\\n        \\n        if (msg.value > nftType.price) {\\n            uint256 refundAmount = msg.value - nftType.price;\\n            (bool success, ) = payable(msg.sender).call{value: refundAmount}(\\\"\\\");\\n            require(success, \\\"Refund failed\\\");\\n        }\\n\\n        emit RoomLevelPurchased(msg.sender, tokenId, nftType.price, nftTypeId);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev Batch purchase room levels\\n     * @param nftTypeId Level type ID\\n     * @param amount Purchase quantity\\n     * @return Returns an array of minted room level IDs\\n     */\\n    function batchBuy(uint256 nftTypeId, uint256 amount) external payable returns (uint256[] memory) {\\n        RoomLevelNftType storage nftType = nftTypes[nftTypeId];\\n        require(nftType.id == nftTypeId, \\\"Level type does not exist\\\");\\n        require(nftType.active, \\\"Level type not active\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(msg.value >= nftType.price * amount, \\\"Insufficient payment\\\");\\n        require(nftType.minted + amount <= nftType.maxMint, \\\"Max mint reached for this level type\\\");\\n\\n        uint256[] memory tokenIds = new uint256[](amount);\\n        for (uint256 i = 0; i < amount; i++) {\\n            nftType.minted += 1;\\n            require(nftType.minted <= nftType.maxMint, \\\"Max mint reached for this level type\\\");\\n\\n            uint256 tokenId = _tokenIdCounter;\\n            _tokenIdCounter++;\\n            _safeMint(msg.sender, tokenId);\\n            tokenIds[i] = tokenId;\\n            tokenNftTypes[tokenId] = nftTypeId;\\n        }\\n\\n        uint256 totalPrice = nftType.price * amount;\\n        if (msg.value > totalPrice) {\\n            uint256 refundAmount = msg.value - totalPrice;\\n            (bool success, ) = payable(msg.sender).call{value: refundAmount}(\\\"\\\");\\n            require(success, \\\"Refund failed\\\");\\n        }\\n\\n        emit BatchRoomLevelPurchased(msg.sender, tokenIds, totalPrice, nftTypeId);\\n        return tokenIds;\\n    }\\n\\n    function increaseMaxMint(uint256 nftTypeId, uint256 addAmount) external onlyOwner {\\n        require(nftTypes[nftTypeId].id == nftTypeId, \\\"Level type does not exist\\\");\\n        require(addAmount > 0, \\\"Add amount must be greater than 0\\\");\\n        nftTypes[nftTypeId].maxMint += addAmount;\\n    }\\n\\n    /**\\n     * @dev Get the maximum number of rooms a user can create\\n     * @param user User address\\n     * @return Maximum number of rooms the user can create (sum of all level NFTs owned)\\n     */\\n    function getMaxRooms(address user) external view returns (uint256) {\\n        uint256 balance = balanceOf(user);\\n\\n        // If user has no level tokens, return default value (0 or 1 depending on your requirements)\\n        if (balance == 0) {\\n            return 0; // Default value, can be changed as needed\\n        }\\n\\n        // Calculate total max rooms from all level tokens owned by the user\\n        uint256 totalMaxRooms = 0;\\n\\n        for (uint256 i = 0; i < balance; i++) {\\n            uint256 tokenId = tokenOfOwnerByIndex(user, i);\\n            uint256 nftTypeId = tokenNftTypes[tokenId];\\n\\n            // Add this token's max rooms to the total\\n            totalMaxRooms += nftTypes[nftTypeId].maxRooms;\\n        }\\n\\n        return totalMaxRooms;\\n    }\\n\\n    /**\\n     * @dev Set base URI\\n     * @param baseURI New base URI\\n     */\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\n        _baseTokenURI = baseURI;\\n    }\\n\\n    /**\\n     * @dev Override base URI function\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    /**\\n     * @dev Override tokenURI function, returns different URIs based on level type\\n     */\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        uint256 nftTypeId = tokenNftTypes[tokenId];\\n        string memory baseURI = _baseURI();\\n        string memory suffix = nftTypes[nftTypeId].uriSuffix;\\n\\n        return bytes(baseURI).length > 0 ?\\n            string(abi.encodePacked(baseURI, suffix)) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Withdraw ETH from the contract\\n     */\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        require(balance > 0, \\\"No funds to withdraw\\\");\\n\\n        (bool success, ) = payable(owner()).call{value: balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal failed\\\");\\n\\n        emit Withdrawn(owner(), balance);\\n    }\\n\\n    /**\\n     * @dev Check if a user has a room level\\n     * @param user User address\\n     * @return Whether the user has a room level\\n     */\\n    function hasNft(address user) external view returns (bool) {\\n        return balanceOf(user) > 0;\\n    }\\n\\n    /**\\n     * @dev Get user's room level information\\n     * @param userAddress User address to check\\n     * @return has Whether the user has any room level\\n     * @return details Array of level details\\n     * @return totalMaxRooms Total maximum rooms allowed\\n     */\\n    function getUserNfts(address userAddress) external view returns (\\n        bool has,\\n        RoomLevelNftDetail[] memory details,\\n        uint256 totalMaxRooms\\n    ) {\\n        has = balanceOf(userAddress) > 0;\\n\\n        if (has) {\\n            uint256 balance = balanceOf(userAddress);\\n            details = new RoomLevelNftDetail[](balance);\\n\\n            totalMaxRooms = 0;\\n            for (uint256 i = 0; i < balance; i++) {\\n                uint256 tokenId = tokenOfOwnerByIndex(userAddress, i);\\n                uint256 nftTypeId = tokenNftTypes[tokenId];\\n                \\n                details[i] = RoomLevelNftDetail({\\n                    tokenId: tokenId,\\n                    nftType: nftTypes[nftTypeId]\\n                });\\n                \\n                totalMaxRooms += nftTypes[nftTypeId].maxRooms;\\n            }\\n        } else {\\n            details = new RoomLevelNftDetail[](0);\\n            totalMaxRooms = 0;\\n        }\\n\\n        return (has, details, totalMaxRooms);\\n    }\\n\\n    /**\\n     * @dev Get level type for a specific token\\n     * @param tokenId Level token ID\\n     * @return Level type information\\n     */\\n    function getType(uint256 tokenId) external view returns (RoomLevelNftType memory) {\\n        _requireOwned(tokenId);\\n        uint256 nftTypeId = tokenNftTypes[tokenId];\\n        return nftTypes[nftTypeId];\\n    }\\n\\n    /**\\n     * @dev Get all level type IDs\\n     * @return Array of all level type IDs\\n     */\\n    function getAllTypeIds() external view returns (uint256[] memory) {\\n        return _allNftTypeIds;\\n    }\\n\\n    /**\\n     * @dev Get all active level types\\n     * @return Arrays of level type IDs and level types\\n     */\\n    function getActiveTypes() external view returns (uint256[] memory, RoomLevelNftType[] memory) {\\n        uint256 activeCount = 0;\\n\\n        // Count active level types\\n        for (uint256 i = 0; i < _allNftTypeIds.length; i++) {\\n            uint256 typeId = _allNftTypeIds[i];\\n            if (nftTypes[typeId].active) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Create arrays for active level types\\n        uint256[] memory activeIds = new uint256[](activeCount);\\n        RoomLevelNftType[] memory activeTypes = new RoomLevelNftType[](activeCount);\\n\\n        // Fill arrays\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < _allNftTypeIds.length; i++) {\\n            uint256 typeId = _allNftTypeIds[i];\\n            if (nftTypes[typeId].active) {\\n                activeIds[index] = typeId;\\n                activeTypes[index] = nftTypes[typeId];\\n                index++;\\n            }\\n        }\\n\\n        return (activeIds, activeTypes);\\n    }\\n\\n    function _increaseBalance(address account, uint128 value) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\n        super._increaseBalance(account, value);\\n    }\\n\\n    /**\\n     * @dev Override _update to prevent transfers\\n     */\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // If this is a transfer (not a mint or burn), prevent it\\n        if (from != address(0) && to != address(0)) {\\n            // Only allow transfers initiated by the contract itself\\n            require(auth == address(this), \\\"BBRoomLevel: NFT is not transferable\\\");\\n        }\\n\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    // Authorize upgrade\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    /**\\n     * @dev Function that must be implemented by contracts that need to receive funds\\n     */\\n    receive() external payable {}\\n\\n    // Event definitions\\n    event LevelTypeAdded(uint256 indexed nftTypeId, string name, uint256 maxRooms, uint256 price, string uriSuffix);\\n    event LevelTypeUpdated(uint256 indexed nftTypeId, uint256 maxRooms, uint256 price, string uriSuffix);\\n    event LevelTypeActiveStatusChanged(uint256 indexed nftTypeId, bool active);\\n    event RoomLevelPurchased(address indexed buyer, uint256 tokenId, uint256 price, uint256 nftTypeId);\\n    event BatchRoomLevelPurchased(address indexed buyer, uint256[] tokenIds, uint256 totalPrice, uint256 nftTypeId);\\n    event RoomLevelUpgraded(address indexed owner, uint256 tokenId, uint256 oldLevelTypeId, uint256 newLevelTypeId, uint256 pricePaid);\\n    event Withdrawn(address indexed to, uint256 amount);\\n}\\n\\n\\n\\n\",\"keccak256\":\"0x8bdee347b5c0a60e0d013c99fdf323d8c3340e1270e907221dbca82146db9024\",\"license\":\"UNLICENSED\"},\"contracts/BBStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\nimport \\\"./BBPlayer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BBStructs\\r\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u7ed3\\u6784\\u4f53\\u5b9a\\u4e49\\r\\n */\\r\\n\\r\\nstruct GameConfig {\\r\\n    uint8 maxRoomCount;\\r\\n    uint8 maxPlayers;\\r\\n    uint8 maxJoinTablesCount;\\r\\n    uint8 maxBankerFeePercent;\\r\\n    uint256 playerTimeout;\\r\\n    uint256 tableInactiveTimeout;\\r\\n    uint8 liquidatorFeePercent;\\r\\n    address gameMainAddress;\\r\\n    address rewardPoolAddress;\\r\\n    address roomCardAddress;\\r\\n    address roomLevelAddress;\\r\\n    address gameTableFactoryAddress;\\r\\n}\\r\\n\\r\\n// \\u5956\\u52b1\\u6c60\\u7ed3\\u6784\\r\\nstruct RewardPoolInfo {\\r\\n    uint256 poolId;           // \\u5956\\u52b1\\u6c60ID\\r\\n    string name;              // \\u5956\\u52b1\\u6c60\\u540d\\u79f0\\r\\n    address banker;           // \\u521b\\u5efa\\u8005\\uff08\\u5e84\\u5bb6\\uff09\\u5730\\u5740\\r\\n    uint256 totalAmount;      // \\u603b\\u5956\\u6c60\\u91d1\\u989d\\r\\n    uint256 rewardPerGame;    // \\u6bcf\\u5c40\\u6e38\\u620f\\u5956\\u52b1\\u91d1\\u989d\\r\\n    uint256 winProbability;   // \\u4e2d\\u5956\\u6982\\u7387\\uff08\\u4ee5\\u767e\\u5206\\u4e4b\\u4e00\\u4e3a\\u5355\\u4f4d\\uff09\\r\\n    uint256 remainingAmount;  // \\u5269\\u4f59\\u5956\\u6c60\\u91d1\\u989d\\r\\n    bool inUse;              // \\u662f\\u5426\\u6b63\\u5728\\u4f7f\\u7528\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\nstruct RoomCardNftType {\\r\\n    uint256 id;              // Unique identifier for the card type\\r\\n    string name;             // Name of the card type (e.g., \\\"SILVER\\\", \\\"GOLD\\\", \\\"DIAMOND\\\")\\r\\n    uint8 maxPlayers;        // Maximum number of players allowed\\r\\n    uint256 price;           // Price to purchase this card\\r\\n    string uriSuffix;        // URI suffix for metadata\\r\\n    bool active;             // Whether this card type is active\\r\\n    uint256 maxMint;         // Maximum mint amount for this card type\\r\\n    string rarity;           // Rarity of the card type\\r\\n    uint256 minted;          // \\u5df2mint\\u6570\\u91cf\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\n// \\u5b9a\\u4e49\\u5361\\u7247\\u8be6\\u7ec6\\u4fe1\\u606f\\u7ed3\\u6784\\u4f53\\r\\nstruct RoomCardNftDetail {\\r\\n    uint256 tokenId;       // \\u5361\\u7247\\u7684token ID\\r\\n    RoomCardNftType nftType;     // \\u7ee7\\u627fCardType\\u7684\\u6240\\u6709\\u5c5e\\u6027\\r\\n}\\r\\n\\r\\n// Room level structure\\r\\nstruct RoomLevelNftType {\\r\\n    uint256 id;              // Unique identifier for the level type\\r\\n    string name;             // Name of the level (e.g., \\\"BRONZE\\\", \\\"SILVER\\\", \\\"GOLD\\\")\\r\\n    uint256 maxRooms;        // Maximum number of rooms allowed with this level\\r\\n    uint256 price;           // Price to purchase this level\\r\\n    string uriSuffix;        // URI suffix for metadata\\r\\n    bool active;             // Whether this level type is active\\r\\n    uint256 maxMint;         // Maximum mint amount for this level type\\r\\n    uint256 minted;          // Already minted amount for this level type\\r\\n    string rarity;           // Rarity of this level type\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\n// Level details structure for returning comprehensive information\\r\\nstruct RoomLevelNftDetail {\\r\\n    uint256 tokenId;         // Level token ID\\r\\n    RoomLevelNftType nftType;     // Level type information\\r\\n}\\r\\n\\r\\n// \\u6dfb\\u52a0\\u4e00\\u4e2a\\u65b0\\u7684\\u7ed3\\u6784\\u4f53\\u7528\\u4e8e\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\r\\nstruct GameTableView {\\r\\n    bool active;\\r\\n    uint256 gameRound;\\r\\n    uint256 gameLiquidatedCount;\\r\\n    address tableAddr; // \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\r\\n    uint256 tableId;\\r\\n    string tableName;\\r\\n    address bankerAddr;\\r\\n    uint256 betAmount;\\r\\n    uint8 bankerFeePercent;\\r\\n    uint256 totalPrizePool;\\r\\n    uint8 playerCount;\\r\\n    uint8 maxPlayers;\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 liquidateDeadline;\\r\\n    GameState state;\\r\\n    uint8 liquidatorFeePercent;\\r\\n    uint8 playerContinuedCount;\\r\\n    uint8 playerReadyCount;\\r\\n    address[] playerAddresses;\\r\\n    uint256 currentRoundDeadline;\\r\\n    uint256 playerTimeout;\\r\\n    uint256 tableInactiveTimeout;\\r\\n    uint256 lastActivityTimestamp;\\r\\n    uint256 rewardPoolId;\\r\\n    RewardPoolInfo rewardPoolInfo; // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\r\\n    uint256 implementationVersion; // \\u6dfb\\u52a0\\u5b9e\\u73b0\\u7248\\u672c\\u53f7\\r\\n    uint8 firstBetX;\\r\\n    uint8 secondBetX;\\r\\n    uint256 bankerStakeAmount;\\r\\n    bool canNext;\\r\\n    string nextTitle;\\r\\n    string nextReason;\\r\\n    address rewardAddr;\\r\\n    uint256 rewardAmount;\\r\\n    string chatGroupId;\\r\\n}\\r\\n\\r\\n// \\u6dfb\\u52a0\\u4e00\\u4e2a\\u65b0\\u7684\\u7ed3\\u6784\\u4f53\\u7528\\u4e8e\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\r\\nstruct GameTableInfoShort {\\r\\n    bool active;\\r\\n    uint256 gameRound;\\r\\n    uint256 gameLiquidatedCount;\\r\\n    address tableAddr; // \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\r\\n    uint256 tableId;\\r\\n    string tableName;\\r\\n    address bankerAddr;\\r\\n    uint256 betAmount;\\r\\n    uint8 bankerFeePercent;\\r\\n    uint8 playerCount;\\r\\n    uint8 maxPlayers;\\r\\n    GameState state;\\r\\n    uint256 lastActivityTimestamp;\\r\\n    uint256 rewardPoolId;\\r\\n    RewardPoolInfo rewardPoolInfo; // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\r\\n}\\r\\n\\r\\nstruct UserInfo {\\r\\n    address[] tables;\\r\\n    address[] joinedTables;\\r\\n    mapping(address => uint256) joinedTableIndex;\\r\\n}\",\"keccak256\":\"0xf75acf148a2fd7e4aff569ca797a3ba47d2e2917109bf6839e0b00a496adcfe1\",\"license\":\"UNLICENSED\"},\"contracts/BBTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\n/**\\r\\n * @title BBTypes\\r\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u7c7b\\u578b\\u5b9a\\u4e49\\r\\n */\\r\\n\\r\\n// \\u6e38\\u620f\\u72b6\\u6001\\r\\nenum GameState {\\r\\n    NONE,\\r\\n    WAITING,\\r\\n    FIRST_BETTING,\\r\\n    SECOND_BETTING,\\r\\n    ENDED,\\r\\n    SETTLED,\\r\\n    LIQUIDATED\\r\\n}\\r\\n\\r\\n// \\u73a9\\u5bb6\\u72b6\\u6001\\r\\nenum PlayerState {\\r\\n    NONE,\\r\\n    JOINED,\\r\\n    READY,\\r\\n    ACTIVE,       // \\u5f53\\u524d\\u53c2\\u4e0e\\u6e38\\u620f\\u4e2d\\uff0c\\u672a\\u5f03\\u724c\\r\\n    FOLDED        // \\u5f03\\u724c\\r\\n}\\r\\n\\r\\n// \\u724c\\u578b\\r\\nenum CardType {\\r\\n    NONE,\\r\\n    NO_BULL,\\r\\n    BULL_1,\\r\\n    BULL_2,\\r\\n    BULL_3,\\r\\n    BULL_4,\\r\\n    BULL_5,\\r\\n    BULL_6,\\r\\n    BULL_7,\\r\\n    BULL_8,\\r\\n    BULL_9,\\r\\n    BULL_BULL,\\r\\n    FIVE_BOMB,\\r\\n    FIVE_SMALL,\\r\\n    FIVE_FLOWERS\\r\\n}\\r\\n\",\"keccak256\":\"0xf2839d776336a822efd1a9145374f9ad2ea44de1a7721be8bb4b201cd29c2e64\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523461003257610011610037565b604051613c2a6101b182396080518181816136be015261388e0152613c2a90f35b600080fd5b61003f61007e565b610047610102565b565b61005d90610060906001600160a01b031682565b90565b6001600160a01b031690565b61005d90610049565b61005d9061006c565b61008730610075565b608052565b61005d9060401c60ff1690565b61005d905461008c565b61005d905b6001600160401b031690565b61005d90546100a3565b61005d906100a8906001600160401b031682565b906100e261005d6100fe926100be565b82546001600160401b0319166001600160401b03919091161790565b9055565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061012c81610099565b61019e57610139816100b4565b6001600160401b0391908290811603610150575050565b8161017f7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d293610199936100d2565b604051918291826001600160401b03909116815260200190565b0390a1565b63f92ee8a960e01b6000908152600490fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063155884f6146102cb57806322f19172146102c65780632f0a4d41146102c1578063373041b0146102bc5780633aeecaaf146102b75780633f4ba83a146102b25780634331346e146102ad5780634c2412a2146102a85780634f1ef286146102a35780634f5970a51461029e5780634f6efb541461029957806352d1902d1461029457806354c627401461028f57806359a020f51461028a5780635c975abb146102855780635d500d8214610280578063642d84911461027b5780636556e91c1461027657806366dc52a114610271578063715018a61461026c57806374a7f2241461026757806379d4a963146102625780637a94f4181461025d5780638456cb5914610258578063845a51ec1461025357806388a01cd71461024e5780638d8692b2146102495780638da5cb5b1461024457806390e5204b1461023f578063a8ad2c921461023a578063ad3cb1cc14610235578063b24cf5d714610230578063b571266a1461022b578063c13b16c114610226578063dac9e39d14610221578063e02feb921461021c578063e143eb9114610217578063e4645fee14610212578063e98125801461020d578063ee44130b14610208578063f2fde38b14610203578063fbcf6ca5146101fe5763fd13ca560361000e576110e0565b6110c5565b6110a1565b611086565b61105f565b611044565b611029565b611002565b610fde565b610fc3565b610f9c565b610f84565b610f5d565b610eec565b610eba565b610e8e565b610e76565b610e5b565b610e35565b610e11565b610df6565b610dcf565b610d91565b610d5d565b610d45565b610d2d565b610d06565b610c81565b610c54565b610c39565b610c06565b610b81565b610b66565b610af9565b610a6d565b61095b565b61090e565b61060a565b6105ef565b610558565b610491565b61042f565b61031b565b6001600160a01b031690565b90565b6102e8816102d0565b036102ef57565b600080fd5b90503590610301826102df565b565b906020828203126102ef576102dc916102f4565b9052565b346102ef5761034a610336610331366004610303565b611154565b6040519182918260ff909116815260200190565b0390f35b60009103126102ef57565b610317906102d0565b805160ff168252610301919061016090819060208181015160ff169085015260408181015160ff169085015260608181015160ff16908501526103aa60808201516080860152565b6103b960a082015160a0860152565b60c08181015160ff16908501526103d860e082015160e0860190610359565b6103ec610100820151610100860190610359565b610400610120820151610120860190610359565b610414610140820151610140860190610359565b0151910190610359565b610180810192916103019190610362565b346102ef5761043f36600461034e565b61034a61044a6112cc565b6040519182918261041e565b6102dc916008021c6001600160a01b031690565b906102dc9154610456565b6102dc6000600961046a565b6020810192916103019190610359565b346102ef576104a136600461034e565b61034a6104ac610475565b60405191829182610481565b60ff81166102e8565b90503590610301826104b8565b806102e8565b90503590610301826104ce565b9190610100838203126102ef576104f881846104c1565b9261050682602083016104c1565b9261051483604084016104c1565b9261052281606085016104c1565b9261053082608083016104c1565b926102dc6105418460a085016104d4565b9360e06105518260c087016104d4565b94016102f4565b346102ef5761057a61056b3660046104e1565b96959095949194939293611771565b604051005b906020828203126102ef576102dc916104d4565b634e487b7160e01b600052603260045260246000fd5b80548210156105cc576105c3600191600052602060002090565b91020190600090565b610593565b6005548110156102ef576105e96102dc9160056105a9565b9061046a565b346102ef5761034a6104ac61060536600461057f565b6105d1565b346102ef5761061a36600461034e565b61057a611794565b60005b8381106106355750506000910152565b8181015183820152602001610625565b61066661066f6020936106799361065a815190565b80835293849260200190565b95869101610622565b601f01601f191690565b0190565b634e487b7160e01b600052602160045260246000fd5b6007111561069d57565b61067d565b9061030182610693565b6102dc906106a2565b610317906106ac565b6106ce6106ca600a9390565b9190565b6000915b8383106106df5750505050565b6106f96106f26001928451815260200190565b9260200190565b920191906106d2565b80518252906102dc9061010080610729610240840160208701518582036020870152610645565b9461073c60408201516040860190610359565b61074b60608201516060860152565b61075a60808201516080860152565b61076960a082015160a0860152565b61077860c082015160c0860152565b60e08181015115159085015201519101906106be565b8051151582526102dc916101c06107f46101e083016107b260208601516020860152565b6107c160408601516040860152565b6107d360608601516060860190610359565b6107e260808601516080860152565b60a085015184820360a0860152610645565b9261080760c082015160c0850190610359565b61081660e082015160e0850152565b6101008181015160ff16908401526101208181015160ff16908401526101408181015160ff16908401526108546101608201516101608501906106b5565b610865610180820151610180850152565b6108766101a08201516101a0850152565b0151906101c0818403910152610702565b906102dc9161078e565b906108a761089d835190565b8083529160200190565b90816108b96020830284019460200190565b926000915b8383106108cd57505050505090565b909192939460206108f06108e983856001950387528951610887565b9760200190565b93019301919392906108be565b60208082526102dc92910190610891565b346102ef5761034a610929610924366004610303565b61194a565b604051918291826108fd565b6102dc916008021c5b60ff1690565b906102dc9154610935565b6102dc60026001610944565b346102ef5761096b36600461034e565b61034a61033661094f565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176109ad57604052565b610976565b906103016109bf60405190565b928361098c565b6001600160401b0381116109ad57602090601f01601f19160190565b90826000939282370152565b90929192610a036109fe826109c6565b6109b2565b93818552818301116102ef576103019160208501906109e2565b9080601f830112156102ef578160206102dc933591016109ee565b9190916040818403126102ef57610a4f83826102f4565b9260208201356001600160401b0381116102ef576102dc9201610a1d565b61057a610a7b366004610a38565b906119f1565b60e0818303126102ef5780356001600160401b0381116102ef5782610aa7918301610a1d565b92610ab583602084016104d4565b92610ac381604085016104c1565b92610ad182606083016104c1565b926102dc610ae284608085016104c1565b9360c0610af28260a087016104c1565b94016104d4565b61057a610b07366004610a81565b959490949391936122dc565b6102dc906102d0906001600160a01b031682565b6102dc90610b13565b6102dc90610b27565b90610b4390610b30565b600052602052604060002090565b6000610b616102dc926006610b39565b61046a565b346102ef5761034a6104ac610b7c366004610303565b610b51565b346102ef57610b9136600461034e565b61034a610b9c61232e565b6040519182918290815260200190565b909160c0828403126102ef57610bc283836104c1565b92610bd081602085016104c1565b92610bde82604083016104c1565b926102dc610bef84606085016104d4565b9360a0610bff82608087016104d4565b94016104c1565b346102ef5761057a610c19366004610bac565b94939093929192612562565b906020828203126102ef576102dc916104c1565b346102ef5761034a610929610c4f366004610c25565b6128ce565b346102ef57610c6436600461034e565b61034a610c6f612a1d565b60405191829182901515815260200190565b346102ef57610c9136600461034e565b61034a610929612a44565b9061067981602093610359565b90610cc26106f2610cb8845190565b8084529260200190565b9060005b818110610cd35750505090565b909192610ced610ce66001928651610c9c565b9460200190565b929101610cc6565b60208082526102dc92910190610ca9565b346102ef57610d1636600461034e565b61034a610d21612d28565b60405191829182610cf5565b346102ef5761057a610d40366004610303565b612d6e565b346102ef5761057a610d58366004610303565b612e49565b346102ef57610d6d36600461034e565b61057a612fbe565b91906040838203126102ef576102dc906020610af282866102f4565b346102ef5761034a610c6f610da7366004610d75565b90612fc6565b6102dc916008021c81565b906102dc9154610dad565b6102dc60006003610db8565b346102ef57610ddf36600461034e565b61034a610b9c610dc3565b6102dc6000600a61046a565b346102ef57610e0636600461034e565b61034a6104ac610dea565b346102ef57610e2136600461034e565b61057a613089565b6102dc6000600861046a565b346102ef57610e4536600461034e565b61034a6104ac610e29565b6102dc600080610db8565b346102ef57610e6b36600461034e565b61034a610b9c610e50565b346102ef5761057a610e89366004610303565b6130cd565b346102ef57610e9e36600461034e565b61034a6104ac6130d6565b60208082526102dc9291019061078e565b346102ef5761034a610ed5610ed0366004610303565b613103565b60405191829182610ea9565b6102dc600180610944565b346102ef57610efc36600461034e565b61034a610336610ee1565b90610f146109fe836109c6565b918252565b610f236005610f07565b640352e302e360dc1b602082015290565b6102dc610f19565b6102dc610f34565b6102dc610f3c565b60208082526102dc92910190610645565b346102ef57610f6d36600461034e565b61034a610f78610f44565b60405191829182610f4c565b346102ef5761057a610f97366004610303565b6131a9565b346102ef5761034a610c6f610fb2366004610303565b6131b2565b6102dc60016004610944565b346102ef57610fd336600461034e565b61034a610336610fb7565b346102ef5761057a610ff1366004610303565b613247565b6102dc60006002610db8565b346102ef5761101236600461034e565b61034a610b9c610ff6565b6102dc6000600b61046a565b346102ef5761103936600461034e565b61034a6104ac61101d565b346102ef5761034a61092961105a366004610303565b6132c5565b346102ef5761034a610b9c611075366004610303565b6133c6565b6102dc60006004610944565b346102ef5761109636600461034e565b61034a61033661107a565b346102ef5761057a6110b4366004610303565b61342e565b6102dc60006001610944565b346102ef576110d536600461034e565b61034a6103366110b9565b346102ef5761057a6110f3366004610303565b6134bf565b61093e6102dc6102dc9290565b6102dc6102dc6102dc9290565b6102d06102dc6102dc9290565b6102dc90611112565b634e487b7160e01b600052601160045260246000fd5b60ff1660ff811461114f5760010190565b611128565b6102dc61116b91611163600090565b506007610b39565b600061117760006110f8565b906111826000611105565b600184016111916102dc825490565b8210156111ea576105e9826111a5926105a9565b6111bf6111b96111b48561111f565b6102d0565b916102d0565b036111d2575b60019081015b9050611182565b916111cb6111e160019261113e565b939150506111c5565b505050905090565b6102dc6101806109b2565b6112056111f2565b9060008252602080808080808080808080808d0160008152016000815201600081520160008152016000815201600081520160008152016000815201600081520160008152016000905250565b905250565b6102dc6111fd565b6102dc9061093e565b6102dc905461125f565b6102dc9060101c61093e565b6102dc9054611272565b6102dc9060081c61093e565b6102dc9054611288565b6102dc9081565b6102dc905461129e565b6102dc906102d0565b6102dc90546112af565b90610317906102d0565b6112d4611257565b506112df6001611268565b6112e9600161127e565b6112f36001611294565b6112fd6004611268565b61130760026112a5565b61131160036112a5565b61131b6004611294565b61132430610b30565b9161132f60086112b8565b9361133a60096112b8565b95611345600a6112b8565b97611350600b6112b8565b996113596111f2565b60ff909c168c5260ff1660208c015260ff1660408b015260ff1660608a0152608089015260a088015260ff1660c08701526113979060e087016112c2565b6113a59061010086016112c2565b6113b39061012085016112c2565b6113c19061014084016112c2565b6102dc9061016083016112c2565b6102dc9060401c61093e565b6102dc90546113cf565b6102dc905b6001600160401b031690565b6102dc90546113e5565b6113ea6102dc6102dc9290565b906001600160401b03905b9181191691161790565b6113ea6102dc6102dc926001600160401b031690565b906114486102dc61144f92611422565b825461140d565b9055565b9060ff60401b9060401b611418565b906114726102dc61144f92151590565b8254611453565b61031790611400565b6020810192916103019190611479565b94919261150b97949196936114c47ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b9788976114e06114da6114d68b6113db565b1590565b996113f6565b9960009a6114ed8c611400565b6001600160401b0382161490816115fe575b61151860019e8f611400565b916001600160401b031690565b1490816115d9575b155b90816115d0575b506115bb57918998969492918c9a989694928c6115458d611400565b91019d6115538f9283611438565b6115639a6115ab575b50506116c6565b61156c57505050565b61159a6115a6927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d294611462565b60405191829182611482565b0390a1565b6115b491611462565b8c8b61155c565b63f92ee8a960e01b8b528a80600481015b0390fd5b15905038611529565b90506115228c6115f56106ca6115ee30610b30565b3b92611105565b14919050611520565b8b91506114ff565b9060001990611418565b906116206102dc61144f92611105565b8254611606565b9062ff00009060101b611418565b61093e6102dc6102dc9260ff1690565b906116556102dc61144f92611635565b8254611627565b9060ff90611418565b906116756102dc61144f92611635565b825461165c565b9061ff009060081b611418565b906116996102dc61144f92611635565b825461167c565b906001600160a01b0390611418565b906116bf6102dc61144f92610b30565b82546116a0565b61174896959361172c61173a94611725611741989561171e611733966116eb336134dd565b6116f36134f9565b6116fb613514565b611703613524565b6117176117106001611105565b6000611610565b6001611645565b6001611665565b6001611689565b6004611665565b6004611689565b6002611610565b6003611610565b6117556111b4600061111f565b61175e826102d0565b036117665750565b61030190600b6116af565b9061030197969594939291611492565b61178961352c565b6103016103016135c6565b610301611781565b6001600160401b0381116109ad5760208091020190565b90610f146109fe8361179c565b6102dc6101e06109b2565b6102dc6101206109b2565b6001600160401b0381116109ad5760200290565b6109fe6102dc916117d6565b369037565b9061030161181161180b846117ea565b936117d6565b836117f6565b6102dc600a6117fb565b6118296117cb565b9060008252602080808080808080808a016060815201600081520160008152016000815201600081520160008152016000815201611252611817565b6102dc611821565b6118756117c0565b90600082526020820160008152602001600081526020016000815260200160008152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001610317611865565b6102dc61186d565b60005b8281106118f857505050565b6020906119036118e1565b81840152016118ec565b9061030161192361191d846117b3565b9361179c565b601f1901602084016118e9565b90611939825190565b8110156105cc576020809102010190565b6102dc61195991611163606090565b9061196d611968600084015490565b61190d565b90600061197a6000611105565b8185016119886102dc825490565b8210156119c957906119a86119a36105e9836119c4956105a9565b613611565b6119b28287611930565b526119bd8186611930565b5060010190565b61197a565b505050915090565b90610301916119de6136b3565b90610301916119ec8161372d565b613736565b90610301916119d1565b90611a12969594939291611a0d6137ea565b611eb3565b610301613848565b15611a2157565b60405162461bcd60e51b815260206004820152600f60248201526e10dbdb9d1c9858dd081c185d5cd959608a1b6044820152606490fd5b15611a5f57565b60405162461bcd60e51b815260206004820152601460248201527310995d08185b5bdd5b9d081d1bdbc81cdb585b1b60621b6044820152606490fd5b15611aa257565b60405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206d617820706c617965727360681b6044820152606490fd5b15611ae457565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642062616e6b6572206665652070657263656e740000000000006044820152606490fd5b15611b3057565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c6964207461626c65206e616d6560701b6044820152606490fd5b15611b7157565b60405162461bcd60e51b8152602060048201526013602482015272496e76616c696420666972737420726169736560681b6044820152606490fd5b15611bb357565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207365636f6e6420726169736560601b6044820152606490fd5b6102dc6102dc6102dc9260ff1690565b15611c0657565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420726f6f6d206c6576656c20616464726573730000000000006044820152606490fd5b8015156102e8565b9050519061030182611c4b565b906020828203126102ef576102dc91611c53565b6040513d6000823e3d90fd5b15611c8757565b60405162461bcd60e51b8152602060048201526013602482015272149bdbdb481b195d995b081c995c5d5a5c9959606a1b6044820152606490fd5b90505190610301826104ce565b906020828203126102ef576102dc91611cc2565b9190820180921161114f57565b15611cf757565b60405162461bcd60e51b81526020600482015260196024820152781c9bdbdb481b195d995b081b1a5b5a5d08195e18d959591959603a1b6044820152606490fd5b15611d3f57565b60405162461bcd60e51b815260206004820152602260248201527f496e76616c69642067616d65207461626c6520666163746f7279206164647265604482015261737360f01b6064820152608490fd5b90505190610301826102df565b906020828203126102ef576102dc91611d8f565b908152919998979196919591949193919290610140880188810360208a0152611dd891610645565b9960408801611de691610359565b606087015260ff16608086015260a08501611e0091610359565b60ff1660c084015260ff1660e083015260ff166101008201526101200152565b600019811461114f5760010190565b916001600160a01b0360089290920291821b911b611418565b9190611e596102dc61144f93610b30565b908354611e2f565b80549190600160401b8310156109ad5782611e84916001610301950181556105a9565b90611e48565b61031790611bef565b90815260ff90911660208201526060810192916103019160400190611e8a565b93908293969291878297611ed0611ecb6114d6612a1d565b611a1a565b6000978891611ee9611ee184611105565b871415611a58565b6001611ef4816110f8565b60ff891611806122bf575b611f0890611a9b565b611f23611f1861093e6004611268565b60ff87161115611add565b611f43838051611f356106ca88611105565b1190816122a7575b50611b29565b611f4c816110f8565b60ff871610158061228c575b611f6190611b6a565b611f6a816110f8565b60ff8316101580612271575b611f7f90611bac565b611f88336133c6565b90611f9a611f9582611268565b611bef565b821015612106575b50506020969761201791611fcf611fb9600b6112b8565b611fc86111b96111b48961111f565b1415611d38565b611fe4611fdf611fdf600b6112b8565b610b30565b96611fee866112a5565b96611ff830610b30565b6040519c8d9b8c9a8b996334f4a4e560e11b8b52339160048c01611db0565b03925af1801561210157836120a3927f5deb5bb4617e976ddbcd6c774c8245d0f8760978d08eeb2e06ede465c07b053595926120c8575b508161207c8261207161206b612066611fdf966112a5565b611e20565b82611610565b612081836005611e61565b611e61565b61209583612090816006610b39565b6116af565b6106796102dc336007610b39565b926120c36120b033610b30565b956120ba60405190565b93849384611e93565b0390a3565b61207c9250906120f2611fdf9260203d6020116120fa575b6120ea818361098c565b810190611d9c565b92509061204e565b503d6120e0565b611c74565b935095509550915061213161211b600a6112b8565b61212a6111b96111b48c61111f565b1415611bff565b612144611fdf611fdf611fdf600a6112b8565b9161214e60405190565b634ed7ff6360e01b8152602081806121693360048301610481565b0381875afa801561210157612185918b91612242575b50611c80565b602061219060405190565b938490623480f560ea1b825281806121ab3360048301610481565b03915afa9283156121015788976020978c976121ea8f976102dc8f98916106ca92612017988b92612209575b50611f956121e491611268565b90611ce3565b10156121fb575b9181999850611fa2565b61220485611cf0565b6121f1565b8f6121e4929350611f9591612233913d60201161223b575b61222b818361098c565b810190611ccf565b9291506121d7565b503d612221565b612264915060203d60201161226a575b61225c818361098c565b810190611c60565b3861217f565b503d612252565b50611f7f61227f60046110f8565b60ff841611159050611f76565b50611f6161229a60046110f8565b60ff881611159050611f58565b5190506122b76106ca6014611105565b111538611f3d565b50611f086122cf61093e8361127e565b60ff8a1611159050611eff565b906103019695949392916119fb565b6102dc906122f761387d565b612325565b6102dc7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611105565b506102dc6122fc565b6102dc60006122eb565b90610301959493929161234961352c565b61249a565b1561235557565b60405162461bcd60e51b815260206004820152602360248201527f42616e6b6572206665652070657263656e74206d75737420626520706f73697460448201526269766560e81b6064820152608490fd5b156123ad57565b60405162461bcd60e51b815260206004820152601f60248201527f506c617965722074696d656f7574206d75737420626520706f736974697665006044820152606490fd5b156123f957565b60405162461bcd60e51b815260206004820152602760248201527f5461626c6520696e6163746976652074696d656f7574206d75737420626520706044820152666f73697469766560c81b6064820152608490fd5b1561245557565b60405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964206c697175696461746f72206665652070657263656e7400006044820152606490fd5b9261173a61030196959361172c61174194611725611733986124c96124bf60016110f8565b60ff831611611a9b565b61251960006124d7816110f8565b60ff8816141580612548575b6124ec9061234e565b6125006124f882611105565b8a14156123a6565b61251461250c82611105565b8c14156123f2565b6110f8565b60ff8c1614158061252e575b6117179061244e565b5061171761253c60646110f8565b60ff8d16109050612525565b506124ec61255660646110f8565b60ff89161090506124e3565b906103019594939291612338565b1561257757565b60405162461bcd60e51b815260206004820152601c60248201527f436f756e74206d7573742062652067726561746572207468616e2030000000006044820152606490fd5b9190820391821161114f57565b909291926125d96109fe826109c6565b93818552818301116102ef57610301916020850190610622565b9080601f830112156102ef5781516102dc926020016125c9565b90505190610301826104b8565b600711156102ef57565b905051906103018261261a565b909291926126416109fe826117d6565b9360208592028301928184116102ef57915b8383106126605750505050565b6020809161266e8486611cc2565b815201920191612653565b9080601f830112156102ef57600a6102dc92612631565b919091610240818403126102ef576126a96101206109b2565b926126b48183611cc2565b84526020820151906001600160401b0382116102ef576126d9816127559385016125f3565b60208601526126eb8160408501611d8f565b60408601526126fd8160608501611cc2565b606086015261270f8160808501611cc2565b60808601526127218160a08501611cc2565b60a08601526127338160c08501611cc2565b60c08601526127458160e08501611c53565b60e0860152610100809301612679565b90830152565b9190916101e0818403126102ef576127746101e06109b2565b9261277f8183611c53565b845261278e8160208401611cc2565b60208501526127a08160408401611cc2565b60408501526127b28160608401611d8f565b60608501526127c48160808401611cc2565b608085015260a08201516001600160401b0381116102ef57816127e89184016125f3565b60a08501526127fa8160c08401611d8f565b60c085015261280c8160e08401611cc2565b60e08501526101006128208282850161260d565b908501526101206128338282850161260d565b908501526101406128468282850161260d565b9085015261016061285982828501612624565b9085015261018061286c82828501611cc2565b908501526101a061287f82828501611cc2565b908501526101c08201516001600160401b0381116102ef576128a19201612690565b6101c0830152565b906020828203126102ef5781516001600160401b0381116102ef576102dc920161275b565b906000916128e86128de846110f8565b60ff831611612570565b6005926128f460055490565b916128fe82611105565b8314612a0c5761290d90611bef565b93848310612a03575b61291f8561190d565b9285808211156129f357612932916125bc565b61293b83611105565b868110156129ea5761295f611fdf611fdf6105e96129598587611ce3565b876105a9565b908461296a60405190565b63244dc9df60e01b815292839060049082905afa918215612101576129c3926119bd9187916129c8575b506129b1836129ac6129a66001611105565b8d6125bc565b6125bc565b906129bc828a611930565b5287611930565b61293b565b6129e491503d8089833e6129dc818361098c565b8101906128a9565b38612994565b50929450505050565b50506129fe82611105565b612932565b93508193612916565b506102dc9293506119689150611105565b6102dc6000612a2a6138b9565b01611268565b906020828203126102ef576102dc91612624565b6005805490612a528261190d565b92600091612a5f83611105565b91825b855b811015612c4857612a7e611fdf611fdf6105e984876105a9565b604051634284848960e01b8152602081600481855afa801561210157612ab0918891612c2a575b506121e460036112a5565b421180612b46575b612acd575b50612a64906001015b9050612a62565b85612ada95929560405190565b63244dc9df60e01b815291829060049082905afa90811561210157612a6492612ac692612b24928991612b2c575b50612b13828c611930565b52612b1e818b611930565b50611e20565b949150612abd565b612b4091503d808b833e6129dc818361098c565b38612b08565b5063c19d93fb612b5560405190565b612b5f8260e01b90565b8152602081600481865afa908115612101578891612c0c575b50612b8c612b8660026106a2565b916106a2565b14908115612b9b575b50612ab8565b9050612bb0612ba960405190565b9160e01b90565b8152602081600481855afa908115612101578791612bde575b50612bd7612b8660036106a2565b1438612b95565b612bff915060203d8111612c05575b612bf7818361098c565b810190612a30565b38612bc9565b503d612bed565b612c24915060203d8111612c0557612bf7818361098c565b38612b78565b612c42915060203d811161223b5761222b818361098c565b38612aa5565b50919492935050612c61612c5b8561190d565b93611105565b845b811015612c9857612c9181612c7b612c639386611930565b51612c868288611930565b526119bd8187611930565b9050612c61565b5092505090565b90612cba612cae610cb8845490565b92600052602060002090565b9060005b818110612ccb5750505090565b909192612cec612ce5600192612ce0876112b8565b610c9c565b9460010190565b929101612cbe565b906102dc91612c9f565b90610301612d1892612d0f60405190565b93848092612cf4565b038361098c565b6102dc90612cfe565b6102dc6005612d1f565b61030190612d3e61352c565b611a1290612d4a6137ea565b61030190612d67612d5e6111b4600061111f565b61212a836102d0565b600a6116af565b61030190612d32565b15612d7e57565b60405162461bcd60e51b8152602060048201526015602482015274496e76616c6964207461626c65206164647265737360581b6044820152606490fd5b15612dc257565b60405162461bcd60e51b815260206004820152601e60248201527f4d6178206a6f696e207461626c657320636f756e7420657863656564656400006044820152606490fd5b15612e0e57565b60405162461bcd60e51b8152602060048201526013602482015272155cd95c88105b1c9958591e481a9bda5b9959606a1b6044820152606490fd5b6102dc612ea991612e78612e66612e61336006610b39565b6112b8565b612e726111b9336102d0565b14612d77565b612ea2612e8482611154565b612e9b612e9461093e6001611294565b9160ff1690565b1115612dbb565b6007610b39565b6002810190612ec0612ebb3384610b39565b6112a5565b91612ed9600093612ed36106ca86611105565b14612e07565b82612ee384611105565b60018401612ef26102dc825490565b821015612f9457612f066105e983836105a9565b612f156111b96111b48961111f565b14612f235750600101612ee3565b612f629394955081612f41929350612f3a916105a9565b3391611e48565b6114d6612f536001926121e484611105565b612f5d3386610b39565b611610565b612f6a575050565b612f5d612f8c60016103019401612f88612f818290565b3390611e61565b5490565b913390610b39565b5050612f62919293501590565b612fa961352c565b610301610301612fb9600061111f565b6138dd565b610301612fa1565b6000610679612fd792611163600090565b90600090612fe56000611105565b612ff06102dc855490565b81101561306d5761300a611fdf611fdf6105e984886105a9565b602061301560405190565b634b102ef360e11b815291829060049082905afa90811561210157849161304f575b50821461304657600101612fe5565b50505050600190565b613067915060203d811161223b5761222b818361098c565b38613037565b50505050600090565b61307e61352c565b610301610301613993565b610301613076565b6103019061309d61352c565b611a12906130a96137ea565b610301906130c66130bd6111b4600061111f565b611fc8836102d0565b600b6116af565b61030190613091565b6102dc60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b016112b8565b6102dc9061310f6118e1565b50613611565b6103019061312161352c565b611a129061312d6137ea565b61317e565b1561313957565b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642072657761726420706f6f6c206164647265737300000000006044820152606490fd5b610301906131a26131926111b4600061111f565b61319b836102d0565b1415613132565b60086116af565b61030190613115565b6131cc6111b96131c6612e61846006610b39565b926102d0565b1490565b156131d757565b60405162461bcd60e51b815260206004820152600f60248201526e155cd95c88139bdd081a9bda5b9959608a1b6044820152606490fd5b9160001960089290920291821b911b611418565b91906132336102dc61144f93611105565b90835461320e565b61030191600091613222565b60006132c06132676102dc61030194612ea2612e66612e61336006610b39565b6132b96002820191611e8461327f612ebb3386610b39565b61329261328b88611105565b82116131d0565b6132b360016132a08961111f565b9401916132ad6001611105565b906125bc565b906105a9565b3390610b39565b61323b565b6132e2611968611f956132dc6102dc856007610b39565b93611154565b916000906132ef82611105565b90815b600185016133016102dc825490565b8210156133bd576133156105e983836105a9565b6133246111b96111b48861111f565b03613338575b5060019081015b90506132f2565b611fdf611fdf6105e98461334e949795976105a9565b8461335860405190565b63244dc9df60e01b815291829060049082905afa908115612101576001926133319261339b9288916133a3575b50613390828b611930565b52612b1e818a611930565b93915061332a565b6133b791503d808a833e6129dc818361098c565b38613385565b50909350505050565b60006133d76102dc92611163600090565b015490565b610301906133e861352c565b60006133f38161111f565b6133fc816102d0565b613405846102d0565b14613415575050610301906138dd565b631e4fbdf760e01b825281906115cc9060048301610481565b610301906133dc565b6103019061344361352c565b613494565b1561344f57565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420726f6f6d206361726420636f6e74726163740000000000006044820152606490fd5b610301906134b86134a86111b4600061111f565b6134b1836102d0565b1415613448565b60096116af565b61030190613437565b610301906134d461399b565b610301906139ca565b610301906134c8565b6134ee61399b565b6103016103016139db565b6103016134e6565b61350961399b565b6103016103016139fc565b610301613501565b61030161399b565b61030161351c565b6135346130d6565b33906135426111b9836102d0565b0361354a5750565b63118cdaa760e01b600090815290613563906004610481565b036000fd5b613570613a04565b610301613588565b906116756102dc61144f92151590565b61359c6000806135966138b9565b01613578565b7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6115a6336104ac565b610301613568565b156135d557565b60405162461bcd60e51b81526020600482015260146024820152731518589b1948191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b611fdf61364f916136206118e1565b50611fdf61362e600061111f565b613637816102d0565b613640846102d0565b14159081613695575b506135ce565b600061365a60405190565b63244dc9df60e01b815291829060049082905afa90811561210157600091613680575090565b6102dc91503d806000833e6129dc818361098c565b90506136ab6111b96131c6612e61866006610b39565b141538613649565b6136bc30610b30565b7f0000000000000000000000000000000000000000000000000000000000000000906136ea6111b9836102d0565b1490811561370c575b506136fa57565b63703e46dd60e11b6000908152600490fd5b905061371c6111b96131c6613a27565b1415386136f3565b5061030161352c565b61030190613724565b91613743611fdf84610b30565b91602061374f60405190565b6352d1902d60e01b815293849060049082905afa600093816137bf575b5061378957634c9c8ce360e01b6000908152613563856004610481565b9091926137976102dc6122fc565b84036137a857610301929350613a37565b632a87526960e21b60009081526004859052602490fd5b6137d991945060203d60201161223b5761222b818361098c565b923861376c565b6102dc6002611105565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00613814816112a5565b61381c6137e0565b90811461382c5761030191611610565b633ee5aeb560e01b6000908152600490fd5b6102dc6001611105565b6103017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00600061387661383e565b9101611610565b61388630610b30565b6138b26111b97f00000000000000000000000000000000000000000000000000000000000000006102d0565b036136fa57565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b61391d6139177f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300611fdf84613911836112b8565b926116af565b91610b30565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e061394860405190565b80806120c3565b613957613aa3565b610301613969600160006135966138b9565b7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115a6336104ac565b61030161394f565b6139a66114d6613ac3565b6139ac57565b631afcd79f60e31b6000908152600490fd5b610301906133e861399b565b610301906139be565b611a1261399b565b6103016139d3565b6139eb61399b565b6103016103016000806135966138b9565b6103016139e3565b613a0f6114d6612a1d565b613a1557565b638dfc202b60e01b6000908152600490fd5b6102dc60006130fd6102dc6122fc565b90613a4182613aec565b613a4a82610b30565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b613a7460405190565b600090a28051613a876106ca6000611105565b1115613a9957613a9691613b71565b50565b5050610301613b2f565b613aab612a1d565b613ab157565b63d93c066560e01b6000908152600490fd5b6102dc7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006113db565b6000813b613afc6106ca83611105565b14613b17579061030191613b116102dc6122fc565b016116af565b6115cc8192634c9c8ce360e01b835260048301610481565b6000613b3a81611105565b3411613b435750565b63b398979f60e01b8152600490fd5b3d15613b6c57613b613d610f07565b903d6000602084013e565b606090565b6000806102dc93613b80606090565b50602081519101845af4613b92613b52565b9190613b9e5750613bee565b815190600091613bb06106ca84611105565b1480613bd9575b613bc057505090565b639996b31560e01b825281906115cc9060048301610481565b50803b613be86106ca84611105565b14613bb7565b8051600090613bff6106ca83611105565b1115613c0e5750805190602001fd5b63d6bda27560e01b8152600490fdfea164736f6c634300081c000a",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8063155884f6146102cb57806322f19172146102c65780632f0a4d41146102c1578063373041b0146102bc5780633aeecaaf146102b75780633f4ba83a146102b25780634331346e146102ad5780634c2412a2146102a85780634f1ef286146102a35780634f5970a51461029e5780634f6efb541461029957806352d1902d1461029457806354c627401461028f57806359a020f51461028a5780635c975abb146102855780635d500d8214610280578063642d84911461027b5780636556e91c1461027657806366dc52a114610271578063715018a61461026c57806374a7f2241461026757806379d4a963146102625780637a94f4181461025d5780638456cb5914610258578063845a51ec1461025357806388a01cd71461024e5780638d8692b2146102495780638da5cb5b1461024457806390e5204b1461023f578063a8ad2c921461023a578063ad3cb1cc14610235578063b24cf5d714610230578063b571266a1461022b578063c13b16c114610226578063dac9e39d14610221578063e02feb921461021c578063e143eb9114610217578063e4645fee14610212578063e98125801461020d578063ee44130b14610208578063f2fde38b14610203578063fbcf6ca5146101fe5763fd13ca560361000e576110e0565b6110c5565b6110a1565b611086565b61105f565b611044565b611029565b611002565b610fde565b610fc3565b610f9c565b610f84565b610f5d565b610eec565b610eba565b610e8e565b610e76565b610e5b565b610e35565b610e11565b610df6565b610dcf565b610d91565b610d5d565b610d45565b610d2d565b610d06565b610c81565b610c54565b610c39565b610c06565b610b81565b610b66565b610af9565b610a6d565b61095b565b61090e565b61060a565b6105ef565b610558565b610491565b61042f565b61031b565b6001600160a01b031690565b90565b6102e8816102d0565b036102ef57565b600080fd5b90503590610301826102df565b565b906020828203126102ef576102dc916102f4565b9052565b346102ef5761034a610336610331366004610303565b611154565b6040519182918260ff909116815260200190565b0390f35b60009103126102ef57565b610317906102d0565b805160ff168252610301919061016090819060208181015160ff169085015260408181015160ff169085015260608181015160ff16908501526103aa60808201516080860152565b6103b960a082015160a0860152565b60c08181015160ff16908501526103d860e082015160e0860190610359565b6103ec610100820151610100860190610359565b610400610120820151610120860190610359565b610414610140820151610140860190610359565b0151910190610359565b610180810192916103019190610362565b346102ef5761043f36600461034e565b61034a61044a6112cc565b6040519182918261041e565b6102dc916008021c6001600160a01b031690565b906102dc9154610456565b6102dc6000600961046a565b6020810192916103019190610359565b346102ef576104a136600461034e565b61034a6104ac610475565b60405191829182610481565b60ff81166102e8565b90503590610301826104b8565b806102e8565b90503590610301826104ce565b9190610100838203126102ef576104f881846104c1565b9261050682602083016104c1565b9261051483604084016104c1565b9261052281606085016104c1565b9261053082608083016104c1565b926102dc6105418460a085016104d4565b9360e06105518260c087016104d4565b94016102f4565b346102ef5761057a61056b3660046104e1565b96959095949194939293611771565b604051005b906020828203126102ef576102dc916104d4565b634e487b7160e01b600052603260045260246000fd5b80548210156105cc576105c3600191600052602060002090565b91020190600090565b610593565b6005548110156102ef576105e96102dc9160056105a9565b9061046a565b346102ef5761034a6104ac61060536600461057f565b6105d1565b346102ef5761061a36600461034e565b61057a611794565b60005b8381106106355750506000910152565b8181015183820152602001610625565b61066661066f6020936106799361065a815190565b80835293849260200190565b95869101610622565b601f01601f191690565b0190565b634e487b7160e01b600052602160045260246000fd5b6007111561069d57565b61067d565b9061030182610693565b6102dc906106a2565b610317906106ac565b6106ce6106ca600a9390565b9190565b6000915b8383106106df5750505050565b6106f96106f26001928451815260200190565b9260200190565b920191906106d2565b80518252906102dc9061010080610729610240840160208701518582036020870152610645565b9461073c60408201516040860190610359565b61074b60608201516060860152565b61075a60808201516080860152565b61076960a082015160a0860152565b61077860c082015160c0860152565b60e08181015115159085015201519101906106be565b8051151582526102dc916101c06107f46101e083016107b260208601516020860152565b6107c160408601516040860152565b6107d360608601516060860190610359565b6107e260808601516080860152565b60a085015184820360a0860152610645565b9261080760c082015160c0850190610359565b61081660e082015160e0850152565b6101008181015160ff16908401526101208181015160ff16908401526101408181015160ff16908401526108546101608201516101608501906106b5565b610865610180820151610180850152565b6108766101a08201516101a0850152565b0151906101c0818403910152610702565b906102dc9161078e565b906108a761089d835190565b8083529160200190565b90816108b96020830284019460200190565b926000915b8383106108cd57505050505090565b909192939460206108f06108e983856001950387528951610887565b9760200190565b93019301919392906108be565b60208082526102dc92910190610891565b346102ef5761034a610929610924366004610303565b61194a565b604051918291826108fd565b6102dc916008021c5b60ff1690565b906102dc9154610935565b6102dc60026001610944565b346102ef5761096b36600461034e565b61034a61033661094f565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176109ad57604052565b610976565b906103016109bf60405190565b928361098c565b6001600160401b0381116109ad57602090601f01601f19160190565b90826000939282370152565b90929192610a036109fe826109c6565b6109b2565b93818552818301116102ef576103019160208501906109e2565b9080601f830112156102ef578160206102dc933591016109ee565b9190916040818403126102ef57610a4f83826102f4565b9260208201356001600160401b0381116102ef576102dc9201610a1d565b61057a610a7b366004610a38565b906119f1565b60e0818303126102ef5780356001600160401b0381116102ef5782610aa7918301610a1d565b92610ab583602084016104d4565b92610ac381604085016104c1565b92610ad182606083016104c1565b926102dc610ae284608085016104c1565b9360c0610af28260a087016104c1565b94016104d4565b61057a610b07366004610a81565b959490949391936122dc565b6102dc906102d0906001600160a01b031682565b6102dc90610b13565b6102dc90610b27565b90610b4390610b30565b600052602052604060002090565b6000610b616102dc926006610b39565b61046a565b346102ef5761034a6104ac610b7c366004610303565b610b51565b346102ef57610b9136600461034e565b61034a610b9c61232e565b6040519182918290815260200190565b909160c0828403126102ef57610bc283836104c1565b92610bd081602085016104c1565b92610bde82604083016104c1565b926102dc610bef84606085016104d4565b9360a0610bff82608087016104d4565b94016104c1565b346102ef5761057a610c19366004610bac565b94939093929192612562565b906020828203126102ef576102dc916104c1565b346102ef5761034a610929610c4f366004610c25565b6128ce565b346102ef57610c6436600461034e565b61034a610c6f612a1d565b60405191829182901515815260200190565b346102ef57610c9136600461034e565b61034a610929612a44565b9061067981602093610359565b90610cc26106f2610cb8845190565b8084529260200190565b9060005b818110610cd35750505090565b909192610ced610ce66001928651610c9c565b9460200190565b929101610cc6565b60208082526102dc92910190610ca9565b346102ef57610d1636600461034e565b61034a610d21612d28565b60405191829182610cf5565b346102ef5761057a610d40366004610303565b612d6e565b346102ef5761057a610d58366004610303565b612e49565b346102ef57610d6d36600461034e565b61057a612fbe565b91906040838203126102ef576102dc906020610af282866102f4565b346102ef5761034a610c6f610da7366004610d75565b90612fc6565b6102dc916008021c81565b906102dc9154610dad565b6102dc60006003610db8565b346102ef57610ddf36600461034e565b61034a610b9c610dc3565b6102dc6000600a61046a565b346102ef57610e0636600461034e565b61034a6104ac610dea565b346102ef57610e2136600461034e565b61057a613089565b6102dc6000600861046a565b346102ef57610e4536600461034e565b61034a6104ac610e29565b6102dc600080610db8565b346102ef57610e6b36600461034e565b61034a610b9c610e50565b346102ef5761057a610e89366004610303565b6130cd565b346102ef57610e9e36600461034e565b61034a6104ac6130d6565b60208082526102dc9291019061078e565b346102ef5761034a610ed5610ed0366004610303565b613103565b60405191829182610ea9565b6102dc600180610944565b346102ef57610efc36600461034e565b61034a610336610ee1565b90610f146109fe836109c6565b918252565b610f236005610f07565b640352e302e360dc1b602082015290565b6102dc610f19565b6102dc610f34565b6102dc610f3c565b60208082526102dc92910190610645565b346102ef57610f6d36600461034e565b61034a610f78610f44565b60405191829182610f4c565b346102ef5761057a610f97366004610303565b6131a9565b346102ef5761034a610c6f610fb2366004610303565b6131b2565b6102dc60016004610944565b346102ef57610fd336600461034e565b61034a610336610fb7565b346102ef5761057a610ff1366004610303565b613247565b6102dc60006002610db8565b346102ef5761101236600461034e565b61034a610b9c610ff6565b6102dc6000600b61046a565b346102ef5761103936600461034e565b61034a6104ac61101d565b346102ef5761034a61092961105a366004610303565b6132c5565b346102ef5761034a610b9c611075366004610303565b6133c6565b6102dc60006004610944565b346102ef5761109636600461034e565b61034a61033661107a565b346102ef5761057a6110b4366004610303565b61342e565b6102dc60006001610944565b346102ef576110d536600461034e565b61034a6103366110b9565b346102ef5761057a6110f3366004610303565b6134bf565b61093e6102dc6102dc9290565b6102dc6102dc6102dc9290565b6102d06102dc6102dc9290565b6102dc90611112565b634e487b7160e01b600052601160045260246000fd5b60ff1660ff811461114f5760010190565b611128565b6102dc61116b91611163600090565b506007610b39565b600061117760006110f8565b906111826000611105565b600184016111916102dc825490565b8210156111ea576105e9826111a5926105a9565b6111bf6111b96111b48561111f565b6102d0565b916102d0565b036111d2575b60019081015b9050611182565b916111cb6111e160019261113e565b939150506111c5565b505050905090565b6102dc6101806109b2565b6112056111f2565b9060008252602080808080808080808080808d0160008152016000815201600081520160008152016000815201600081520160008152016000815201600081520160008152016000905250565b905250565b6102dc6111fd565b6102dc9061093e565b6102dc905461125f565b6102dc9060101c61093e565b6102dc9054611272565b6102dc9060081c61093e565b6102dc9054611288565b6102dc9081565b6102dc905461129e565b6102dc906102d0565b6102dc90546112af565b90610317906102d0565b6112d4611257565b506112df6001611268565b6112e9600161127e565b6112f36001611294565b6112fd6004611268565b61130760026112a5565b61131160036112a5565b61131b6004611294565b61132430610b30565b9161132f60086112b8565b9361133a60096112b8565b95611345600a6112b8565b97611350600b6112b8565b996113596111f2565b60ff909c168c5260ff1660208c015260ff1660408b015260ff1660608a0152608089015260a088015260ff1660c08701526113979060e087016112c2565b6113a59061010086016112c2565b6113b39061012085016112c2565b6113c19061014084016112c2565b6102dc9061016083016112c2565b6102dc9060401c61093e565b6102dc90546113cf565b6102dc905b6001600160401b031690565b6102dc90546113e5565b6113ea6102dc6102dc9290565b906001600160401b03905b9181191691161790565b6113ea6102dc6102dc926001600160401b031690565b906114486102dc61144f92611422565b825461140d565b9055565b9060ff60401b9060401b611418565b906114726102dc61144f92151590565b8254611453565b61031790611400565b6020810192916103019190611479565b94919261150b97949196936114c47ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0090565b9788976114e06114da6114d68b6113db565b1590565b996113f6565b9960009a6114ed8c611400565b6001600160401b0382161490816115fe575b61151860019e8f611400565b916001600160401b031690565b1490816115d9575b155b90816115d0575b506115bb57918998969492918c9a989694928c6115458d611400565b91019d6115538f9283611438565b6115639a6115ab575b50506116c6565b61156c57505050565b61159a6115a6927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d294611462565b60405191829182611482565b0390a1565b6115b491611462565b8c8b61155c565b63f92ee8a960e01b8b528a80600481015b0390fd5b15905038611529565b90506115228c6115f56106ca6115ee30610b30565b3b92611105565b14919050611520565b8b91506114ff565b9060001990611418565b906116206102dc61144f92611105565b8254611606565b9062ff00009060101b611418565b61093e6102dc6102dc9260ff1690565b906116556102dc61144f92611635565b8254611627565b9060ff90611418565b906116756102dc61144f92611635565b825461165c565b9061ff009060081b611418565b906116996102dc61144f92611635565b825461167c565b906001600160a01b0390611418565b906116bf6102dc61144f92610b30565b82546116a0565b61174896959361172c61173a94611725611741989561171e611733966116eb336134dd565b6116f36134f9565b6116fb613514565b611703613524565b6117176117106001611105565b6000611610565b6001611645565b6001611665565b6001611689565b6004611665565b6004611689565b6002611610565b6003611610565b6117556111b4600061111f565b61175e826102d0565b036117665750565b61030190600b6116af565b9061030197969594939291611492565b61178961352c565b6103016103016135c6565b610301611781565b6001600160401b0381116109ad5760208091020190565b90610f146109fe8361179c565b6102dc6101e06109b2565b6102dc6101206109b2565b6001600160401b0381116109ad5760200290565b6109fe6102dc916117d6565b369037565b9061030161181161180b846117ea565b936117d6565b836117f6565b6102dc600a6117fb565b6118296117cb565b9060008252602080808080808080808a016060815201600081520160008152016000815201600081520160008152016000815201611252611817565b6102dc611821565b6118756117c0565b90600082526020820160008152602001600081526020016000815260200160008152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001610317611865565b6102dc61186d565b60005b8281106118f857505050565b6020906119036118e1565b81840152016118ec565b9061030161192361191d846117b3565b9361179c565b601f1901602084016118e9565b90611939825190565b8110156105cc576020809102010190565b6102dc61195991611163606090565b9061196d611968600084015490565b61190d565b90600061197a6000611105565b8185016119886102dc825490565b8210156119c957906119a86119a36105e9836119c4956105a9565b613611565b6119b28287611930565b526119bd8186611930565b5060010190565b61197a565b505050915090565b90610301916119de6136b3565b90610301916119ec8161372d565b613736565b90610301916119d1565b90611a12969594939291611a0d6137ea565b611eb3565b610301613848565b15611a2157565b60405162461bcd60e51b815260206004820152600f60248201526e10dbdb9d1c9858dd081c185d5cd959608a1b6044820152606490fd5b15611a5f57565b60405162461bcd60e51b815260206004820152601460248201527310995d08185b5bdd5b9d081d1bdbc81cdb585b1b60621b6044820152606490fd5b15611aa257565b60405162461bcd60e51b8152602060048201526013602482015272496e76616c6964206d617820706c617965727360681b6044820152606490fd5b15611ae457565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c69642062616e6b6572206665652070657263656e740000000000006044820152606490fd5b15611b3057565b60405162461bcd60e51b8152602060048201526012602482015271496e76616c6964207461626c65206e616d6560701b6044820152606490fd5b15611b7157565b60405162461bcd60e51b8152602060048201526013602482015272496e76616c696420666972737420726169736560681b6044820152606490fd5b15611bb357565b60405162461bcd60e51b8152602060048201526014602482015273496e76616c6964207365636f6e6420726169736560601b6044820152606490fd5b6102dc6102dc6102dc9260ff1690565b15611c0657565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420726f6f6d206c6576656c20616464726573730000000000006044820152606490fd5b8015156102e8565b9050519061030182611c4b565b906020828203126102ef576102dc91611c53565b6040513d6000823e3d90fd5b15611c8757565b60405162461bcd60e51b8152602060048201526013602482015272149bdbdb481b195d995b081c995c5d5a5c9959606a1b6044820152606490fd5b90505190610301826104ce565b906020828203126102ef576102dc91611cc2565b9190820180921161114f57565b15611cf757565b60405162461bcd60e51b81526020600482015260196024820152781c9bdbdb481b195d995b081b1a5b5a5d08195e18d959591959603a1b6044820152606490fd5b15611d3f57565b60405162461bcd60e51b815260206004820152602260248201527f496e76616c69642067616d65207461626c6520666163746f7279206164647265604482015261737360f01b6064820152608490fd5b90505190610301826102df565b906020828203126102ef576102dc91611d8f565b908152919998979196919591949193919290610140880188810360208a0152611dd891610645565b9960408801611de691610359565b606087015260ff16608086015260a08501611e0091610359565b60ff1660c084015260ff1660e083015260ff166101008201526101200152565b600019811461114f5760010190565b916001600160a01b0360089290920291821b911b611418565b9190611e596102dc61144f93610b30565b908354611e2f565b80549190600160401b8310156109ad5782611e84916001610301950181556105a9565b90611e48565b61031790611bef565b90815260ff90911660208201526060810192916103019160400190611e8a565b93908293969291878297611ed0611ecb6114d6612a1d565b611a1a565b6000978891611ee9611ee184611105565b871415611a58565b6001611ef4816110f8565b60ff891611806122bf575b611f0890611a9b565b611f23611f1861093e6004611268565b60ff87161115611add565b611f43838051611f356106ca88611105565b1190816122a7575b50611b29565b611f4c816110f8565b60ff871610158061228c575b611f6190611b6a565b611f6a816110f8565b60ff8316101580612271575b611f7f90611bac565b611f88336133c6565b90611f9a611f9582611268565b611bef565b821015612106575b50506020969761201791611fcf611fb9600b6112b8565b611fc86111b96111b48961111f565b1415611d38565b611fe4611fdf611fdf600b6112b8565b610b30565b96611fee866112a5565b96611ff830610b30565b6040519c8d9b8c9a8b996334f4a4e560e11b8b52339160048c01611db0565b03925af1801561210157836120a3927f5deb5bb4617e976ddbcd6c774c8245d0f8760978d08eeb2e06ede465c07b053595926120c8575b508161207c8261207161206b612066611fdf966112a5565b611e20565b82611610565b612081836005611e61565b611e61565b61209583612090816006610b39565b6116af565b6106796102dc336007610b39565b926120c36120b033610b30565b956120ba60405190565b93849384611e93565b0390a3565b61207c9250906120f2611fdf9260203d6020116120fa575b6120ea818361098c565b810190611d9c565b92509061204e565b503d6120e0565b611c74565b935095509550915061213161211b600a6112b8565b61212a6111b96111b48c61111f565b1415611bff565b612144611fdf611fdf611fdf600a6112b8565b9161214e60405190565b634ed7ff6360e01b8152602081806121693360048301610481565b0381875afa801561210157612185918b91612242575b50611c80565b602061219060405190565b938490623480f560ea1b825281806121ab3360048301610481565b03915afa9283156121015788976020978c976121ea8f976102dc8f98916106ca92612017988b92612209575b50611f956121e491611268565b90611ce3565b10156121fb575b9181999850611fa2565b61220485611cf0565b6121f1565b8f6121e4929350611f9591612233913d60201161223b575b61222b818361098c565b810190611ccf565b9291506121d7565b503d612221565b612264915060203d60201161226a575b61225c818361098c565b810190611c60565b3861217f565b503d612252565b50611f7f61227f60046110f8565b60ff841611159050611f76565b50611f6161229a60046110f8565b60ff881611159050611f58565b5190506122b76106ca6014611105565b111538611f3d565b50611f086122cf61093e8361127e565b60ff8a1611159050611eff565b906103019695949392916119fb565b6102dc906122f761387d565b612325565b6102dc7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc611105565b506102dc6122fc565b6102dc60006122eb565b90610301959493929161234961352c565b61249a565b1561235557565b60405162461bcd60e51b815260206004820152602360248201527f42616e6b6572206665652070657263656e74206d75737420626520706f73697460448201526269766560e81b6064820152608490fd5b156123ad57565b60405162461bcd60e51b815260206004820152601f60248201527f506c617965722074696d656f7574206d75737420626520706f736974697665006044820152606490fd5b156123f957565b60405162461bcd60e51b815260206004820152602760248201527f5461626c6520696e6163746976652074696d656f7574206d75737420626520706044820152666f73697469766560c81b6064820152608490fd5b1561245557565b60405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964206c697175696461746f72206665652070657263656e7400006044820152606490fd5b9261173a61030196959361172c61174194611725611733986124c96124bf60016110f8565b60ff831611611a9b565b61251960006124d7816110f8565b60ff8816141580612548575b6124ec9061234e565b6125006124f882611105565b8a14156123a6565b61251461250c82611105565b8c14156123f2565b6110f8565b60ff8c1614158061252e575b6117179061244e565b5061171761253c60646110f8565b60ff8d16109050612525565b506124ec61255660646110f8565b60ff89161090506124e3565b906103019594939291612338565b1561257757565b60405162461bcd60e51b815260206004820152601c60248201527f436f756e74206d7573742062652067726561746572207468616e2030000000006044820152606490fd5b9190820391821161114f57565b909291926125d96109fe826109c6565b93818552818301116102ef57610301916020850190610622565b9080601f830112156102ef5781516102dc926020016125c9565b90505190610301826104b8565b600711156102ef57565b905051906103018261261a565b909291926126416109fe826117d6565b9360208592028301928184116102ef57915b8383106126605750505050565b6020809161266e8486611cc2565b815201920191612653565b9080601f830112156102ef57600a6102dc92612631565b919091610240818403126102ef576126a96101206109b2565b926126b48183611cc2565b84526020820151906001600160401b0382116102ef576126d9816127559385016125f3565b60208601526126eb8160408501611d8f565b60408601526126fd8160608501611cc2565b606086015261270f8160808501611cc2565b60808601526127218160a08501611cc2565b60a08601526127338160c08501611cc2565b60c08601526127458160e08501611c53565b60e0860152610100809301612679565b90830152565b9190916101e0818403126102ef576127746101e06109b2565b9261277f8183611c53565b845261278e8160208401611cc2565b60208501526127a08160408401611cc2565b60408501526127b28160608401611d8f565b60608501526127c48160808401611cc2565b608085015260a08201516001600160401b0381116102ef57816127e89184016125f3565b60a08501526127fa8160c08401611d8f565b60c085015261280c8160e08401611cc2565b60e08501526101006128208282850161260d565b908501526101206128338282850161260d565b908501526101406128468282850161260d565b9085015261016061285982828501612624565b9085015261018061286c82828501611cc2565b908501526101a061287f82828501611cc2565b908501526101c08201516001600160401b0381116102ef576128a19201612690565b6101c0830152565b906020828203126102ef5781516001600160401b0381116102ef576102dc920161275b565b906000916128e86128de846110f8565b60ff831611612570565b6005926128f460055490565b916128fe82611105565b8314612a0c5761290d90611bef565b93848310612a03575b61291f8561190d565b9285808211156129f357612932916125bc565b61293b83611105565b868110156129ea5761295f611fdf611fdf6105e96129598587611ce3565b876105a9565b908461296a60405190565b63244dc9df60e01b815292839060049082905afa918215612101576129c3926119bd9187916129c8575b506129b1836129ac6129a66001611105565b8d6125bc565b6125bc565b906129bc828a611930565b5287611930565b61293b565b6129e491503d8089833e6129dc818361098c565b8101906128a9565b38612994565b50929450505050565b50506129fe82611105565b612932565b93508193612916565b506102dc9293506119689150611105565b6102dc6000612a2a6138b9565b01611268565b906020828203126102ef576102dc91612624565b6005805490612a528261190d565b92600091612a5f83611105565b91825b855b811015612c4857612a7e611fdf611fdf6105e984876105a9565b604051634284848960e01b8152602081600481855afa801561210157612ab0918891612c2a575b506121e460036112a5565b421180612b46575b612acd575b50612a64906001015b9050612a62565b85612ada95929560405190565b63244dc9df60e01b815291829060049082905afa90811561210157612a6492612ac692612b24928991612b2c575b50612b13828c611930565b52612b1e818b611930565b50611e20565b949150612abd565b612b4091503d808b833e6129dc818361098c565b38612b08565b5063c19d93fb612b5560405190565b612b5f8260e01b90565b8152602081600481865afa908115612101578891612c0c575b50612b8c612b8660026106a2565b916106a2565b14908115612b9b575b50612ab8565b9050612bb0612ba960405190565b9160e01b90565b8152602081600481855afa908115612101578791612bde575b50612bd7612b8660036106a2565b1438612b95565b612bff915060203d8111612c05575b612bf7818361098c565b810190612a30565b38612bc9565b503d612bed565b612c24915060203d8111612c0557612bf7818361098c565b38612b78565b612c42915060203d811161223b5761222b818361098c565b38612aa5565b50919492935050612c61612c5b8561190d565b93611105565b845b811015612c9857612c9181612c7b612c639386611930565b51612c868288611930565b526119bd8187611930565b9050612c61565b5092505090565b90612cba612cae610cb8845490565b92600052602060002090565b9060005b818110612ccb5750505090565b909192612cec612ce5600192612ce0876112b8565b610c9c565b9460010190565b929101612cbe565b906102dc91612c9f565b90610301612d1892612d0f60405190565b93848092612cf4565b038361098c565b6102dc90612cfe565b6102dc6005612d1f565b61030190612d3e61352c565b611a1290612d4a6137ea565b61030190612d67612d5e6111b4600061111f565b61212a836102d0565b600a6116af565b61030190612d32565b15612d7e57565b60405162461bcd60e51b8152602060048201526015602482015274496e76616c6964207461626c65206164647265737360581b6044820152606490fd5b15612dc257565b60405162461bcd60e51b815260206004820152601e60248201527f4d6178206a6f696e207461626c657320636f756e7420657863656564656400006044820152606490fd5b15612e0e57565b60405162461bcd60e51b8152602060048201526013602482015272155cd95c88105b1c9958591e481a9bda5b9959606a1b6044820152606490fd5b6102dc612ea991612e78612e66612e61336006610b39565b6112b8565b612e726111b9336102d0565b14612d77565b612ea2612e8482611154565b612e9b612e9461093e6001611294565b9160ff1690565b1115612dbb565b6007610b39565b6002810190612ec0612ebb3384610b39565b6112a5565b91612ed9600093612ed36106ca86611105565b14612e07565b82612ee384611105565b60018401612ef26102dc825490565b821015612f9457612f066105e983836105a9565b612f156111b96111b48961111f565b14612f235750600101612ee3565b612f629394955081612f41929350612f3a916105a9565b3391611e48565b6114d6612f536001926121e484611105565b612f5d3386610b39565b611610565b612f6a575050565b612f5d612f8c60016103019401612f88612f818290565b3390611e61565b5490565b913390610b39565b5050612f62919293501590565b612fa961352c565b610301610301612fb9600061111f565b6138dd565b610301612fa1565b6000610679612fd792611163600090565b90600090612fe56000611105565b612ff06102dc855490565b81101561306d5761300a611fdf611fdf6105e984886105a9565b602061301560405190565b634b102ef360e11b815291829060049082905afa90811561210157849161304f575b50821461304657600101612fe5565b50505050600190565b613067915060203d811161223b5761222b818361098c565b38613037565b50505050600090565b61307e61352c565b610301610301613993565b610301613076565b6103019061309d61352c565b611a12906130a96137ea565b610301906130c66130bd6111b4600061111f565b611fc8836102d0565b600b6116af565b61030190613091565b6102dc60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b016112b8565b6102dc9061310f6118e1565b50613611565b6103019061312161352c565b611a129061312d6137ea565b61317e565b1561313957565b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642072657761726420706f6f6c206164647265737300000000006044820152606490fd5b610301906131a26131926111b4600061111f565b61319b836102d0565b1415613132565b60086116af565b61030190613115565b6131cc6111b96131c6612e61846006610b39565b926102d0565b1490565b156131d757565b60405162461bcd60e51b815260206004820152600f60248201526e155cd95c88139bdd081a9bda5b9959608a1b6044820152606490fd5b9160001960089290920291821b911b611418565b91906132336102dc61144f93611105565b90835461320e565b61030191600091613222565b60006132c06132676102dc61030194612ea2612e66612e61336006610b39565b6132b96002820191611e8461327f612ebb3386610b39565b61329261328b88611105565b82116131d0565b6132b360016132a08961111f565b9401916132ad6001611105565b906125bc565b906105a9565b3390610b39565b61323b565b6132e2611968611f956132dc6102dc856007610b39565b93611154565b916000906132ef82611105565b90815b600185016133016102dc825490565b8210156133bd576133156105e983836105a9565b6133246111b96111b48861111f565b03613338575b5060019081015b90506132f2565b611fdf611fdf6105e98461334e949795976105a9565b8461335860405190565b63244dc9df60e01b815291829060049082905afa908115612101576001926133319261339b9288916133a3575b50613390828b611930565b52612b1e818a611930565b93915061332a565b6133b791503d808a833e6129dc818361098c565b38613385565b50909350505050565b60006133d76102dc92611163600090565b015490565b610301906133e861352c565b60006133f38161111f565b6133fc816102d0565b613405846102d0565b14613415575050610301906138dd565b631e4fbdf760e01b825281906115cc9060048301610481565b610301906133dc565b6103019061344361352c565b613494565b1561344f57565b60405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420726f6f6d206361726420636f6e74726163740000000000006044820152606490fd5b610301906134b86134a86111b4600061111f565b6134b1836102d0565b1415613448565b60096116af565b61030190613437565b610301906134d461399b565b610301906139ca565b610301906134c8565b6134ee61399b565b6103016103016139db565b6103016134e6565b61350961399b565b6103016103016139fc565b610301613501565b61030161399b565b61030161351c565b6135346130d6565b33906135426111b9836102d0565b0361354a5750565b63118cdaa760e01b600090815290613563906004610481565b036000fd5b613570613a04565b610301613588565b906116756102dc61144f92151590565b61359c6000806135966138b9565b01613578565b7f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6115a6336104ac565b610301613568565b156135d557565b60405162461bcd60e51b81526020600482015260146024820152731518589b1948191bd95cc81b9bdd08195e1a5cdd60621b6044820152606490fd5b611fdf61364f916136206118e1565b50611fdf61362e600061111f565b613637816102d0565b613640846102d0565b14159081613695575b506135ce565b600061365a60405190565b63244dc9df60e01b815291829060049082905afa90811561210157600091613680575090565b6102dc91503d806000833e6129dc818361098c565b90506136ab6111b96131c6612e61866006610b39565b141538613649565b6136bc30610b30565b7f0000000000000000000000000000000000000000000000000000000000000000906136ea6111b9836102d0565b1490811561370c575b506136fa57565b63703e46dd60e11b6000908152600490fd5b905061371c6111b96131c6613a27565b1415386136f3565b5061030161352c565b61030190613724565b91613743611fdf84610b30565b91602061374f60405190565b6352d1902d60e01b815293849060049082905afa600093816137bf575b5061378957634c9c8ce360e01b6000908152613563856004610481565b9091926137976102dc6122fc565b84036137a857610301929350613a37565b632a87526960e21b60009081526004859052602490fd5b6137d991945060203d60201161223b5761222b818361098c565b923861376c565b6102dc6002611105565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00613814816112a5565b61381c6137e0565b90811461382c5761030191611610565b633ee5aeb560e01b6000908152600490fd5b6102dc6001611105565b6103017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00600061387661383e565b9101611610565b61388630610b30565b6138b26111b97f00000000000000000000000000000000000000000000000000000000000000006102d0565b036136fa57565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330090565b61391d6139177f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300611fdf84613911836112b8565b926116af565b91610b30565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e061394860405190565b80806120c3565b613957613aa3565b610301613969600160006135966138b9565b7f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115a6336104ac565b61030161394f565b6139a66114d6613ac3565b6139ac57565b631afcd79f60e31b6000908152600490fd5b610301906133e861399b565b610301906139be565b611a1261399b565b6103016139d3565b6139eb61399b565b6103016103016000806135966138b9565b6103016139e3565b613a0f6114d6612a1d565b613a1557565b638dfc202b60e01b6000908152600490fd5b6102dc60006130fd6102dc6122fc565b90613a4182613aec565b613a4a82610b30565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b613a7460405190565b600090a28051613a876106ca6000611105565b1115613a9957613a9691613b71565b50565b5050610301613b2f565b613aab612a1d565b613ab157565b63d93c066560e01b6000908152600490fd5b6102dc7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a006113db565b6000813b613afc6106ca83611105565b14613b17579061030191613b116102dc6122fc565b016116af565b6115cc8192634c9c8ce360e01b835260048301610481565b6000613b3a81611105565b3411613b435750565b63b398979f60e01b8152600490fd5b3d15613b6c57613b613d610f07565b903d6000602084013e565b606090565b6000806102dc93613b80606090565b50602081519101845af4613b92613b52565b9190613b9e5750613bee565b815190600091613bb06106ca84611105565b1480613bd9575b613bc057505090565b639996b31560e01b825281906115cc9060048301610481565b50803b613be86106ca84611105565b14613bb7565b8051600090613bff6106ca83611105565b1115613c0e5750805190602001fd5b63d6bda27560e01b8152600490fdfea164736f6c634300081c000a",
  "devdoc": {
    "details": "牛牛明牌游戏主合约，管理多个游戏桌",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createGameTable(string,uint256,uint8,uint8,uint8,uint8,uint256)": {
        "details": "创建新游戏桌，调用者成为庄家",
        "params": {
          "bankerFeePercent": "庄家抽成百分比",
          "betAmount": "固定押注金额",
          "tableMaxPlayers": "最大玩家数量",
          "tableName": "游戏桌名称"
        }
      },
      "getAllGameTablesInactive()": {
        "details": "获取所有非活跃可被清算的游戏桌信息",
        "returns": {
          "_0": "返回游戏桌信息数组"
        }
      },
      "getGameTableInfo(address)": {
        "details": "获取指定地址的游戏桌信息",
        "params": {
          "tableAddr": "游戏桌合约地址"
        },
        "returns": {
          "_0": "返回游戏桌信息"
        }
      },
      "getNewestGameTables(uint8)": {
        "details": "获取最新的游戏桌",
        "params": {
          "_count": "要获取的游戏桌数量"
        },
        "returns": {
          "_0": "最新的游戏桌数组"
        }
      },
      "getUserCreatedRoomsCount(address)": {
        "details": "获取用户创建的房间数量",
        "params": {
          "userAddress": "用户地址"
        },
        "returns": {
          "_0": "用户创建的房间数量"
        }
      },
      "getUserGameTables(address)": {
        "details": "获取我参与的赌桌",
        "params": {
          "userAddr": "用户地址"
        },
        "returns": {
          "_0": "返回游戏桌信息"
        }
      },
      "initialize(uint8,uint8,uint8,uint8,uint8,uint256,uint256,address)": {
        "details": "初始化函数，替代构造函数"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "暂停合约（仅限合约拥有者）"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setGameTableFactoryAddress(address)": {
        "details": "设置游戏桌工厂合约地址",
        "params": {
          "_gameTableFactoryAddress": "游戏桌工厂合约地址"
        }
      },
      "setRoomCardAddress(address)": {
        "details": "设置房卡合约地址",
        "params": {
          "_roomCardAddress": "房卡合约地址"
        }
      },
      "setRoomLevelAddress(address)": {
        "details": "设置房间等级合约地址",
        "params": {
          "_roomLevelAddress": "房间等级合约地址"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "恢复合约（仅限合约拥有者）"
      },
      "updateGameConfig(uint8,uint8,uint8,uint256,uint256,uint8)": {
        "details": "更新游戏配置（仅限合约拥有者）"
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "BBGameMain",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getUserJoinedTables(address)": {
        "notice": "获取用户已加入的桌子（过滤空位）"
      },
      "userJoinTable(address)": {
        "notice": "用户加入某个游戏桌"
      },
      "userLeaveTable(address)": {
        "notice": "用户退出某个游戏桌"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9740,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "nextTableId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9742,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "maxRoomCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 9744,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "maxJoinTablesCount",
        "offset": 1,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 9746,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "maxPlayers",
        "offset": 2,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 9748,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "playerTimeout",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9750,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "tableInactiveTimeout",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 9752,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "maxBankerFeePercent",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 9754,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "liquidatorFeePercent",
        "offset": 1,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 9757,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "tableAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9761,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "gameTables",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9766,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "userInfos",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(UserInfo)19929_storage)"
      },
      {
        "astId": 9768,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "rewardPoolAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9770,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "roomCardAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 9772,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "roomLevelAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 9774,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "gameTableFactoryAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 9778,
        "contract": "contracts/BBGameMain.sol:BBGameMain",
        "label": "__gap",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint256)25_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)25_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[25]",
        "numberOfBytes": "800"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(UserInfo)19929_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)19929_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(UserInfo)19929_storage": {
        "encoding": "inplace",
        "label": "struct UserInfo",
        "members": [
          {
            "astId": 19921,
            "contract": "contracts/BBGameMain.sol:BBGameMain",
            "label": "tables",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 19924,
            "contract": "contracts/BBGameMain.sol:BBGameMain",
            "label": "joinedTables",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 19928,
            "contract": "contracts/BBGameMain.sol:BBGameMain",
            "label": "joinedTableIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}