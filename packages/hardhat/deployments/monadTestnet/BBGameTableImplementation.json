{
  "address": "0x2315AB62967C852a5A9C45E60b3888C1d3575e97",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tableAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameStartTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameEndTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "playerAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winnerAddrs",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "playerBets",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint8[5][]",
          "name": "playerCards",
          "type": "uint8[5][]"
        }
      ],
      "name": "CreateGameHistory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tableAddr",
          "type": "address"
        }
      ],
      "name": "GameTableChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tableAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "banker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "GameTableInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_allPlayersActed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "active",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankerAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankerFeePercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        }
      ],
      "name": "bankerRemovePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bankerStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "betAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canMoveToNextStep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canMove",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chatGroupId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creationTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRoundDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tableName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_betAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_maxPlayers",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_bankerFeePercent",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_firstRaise",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_secondRaise",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPoolId",
          "type": "uint256"
        }
      ],
      "name": "editGameTable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalSeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstBetX",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameEndTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameLiquidatedCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameMainAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameStartTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPlayerData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "enum PlayerState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalBet",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasActedThisRound",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isWinner",
              "type": "bool"
            },
            {
              "internalType": "uint8[5]",
              "name": "cards",
              "type": "uint8[5]"
            },
            {
              "internalType": "enum CardType",
              "name": "cardType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct BBPlayer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayerAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        }
      ],
      "name": "getPlayerData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "addr",
              "type": "address"
            },
            {
              "internalType": "enum PlayerState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalBet",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "hasActedThisRound",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isWinner",
              "type": "bool"
            },
            {
              "internalType": "uint8[5]",
              "name": "cards",
              "type": "uint8[5]"
            },
            {
              "internalType": "enum CardType",
              "name": "cardType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct BBPlayer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTableInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameRound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gameLiquidatedCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tableAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tableName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bankerAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "bankerFeePercent",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "totalPrizePool",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "playerCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxPlayers",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidateDeadline",
              "type": "uint256"
            },
            {
              "internalType": "enum GameState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "liquidatorFeePercent",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "playerContinuedCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "playerReadyCount",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "playerAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "currentRoundDeadline",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "playerTimeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tableInactiveTimeout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastActivityTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPoolId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "banker",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardPerGame",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "inUse",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[10]",
                  "name": "__gap",
                  "type": "uint256[10]"
                }
              ],
              "internalType": "struct RewardPoolInfo",
              "name": "rewardPoolInfo",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "implementationVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "firstBetX",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "secondBetX",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "bankerStakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canNext",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "nextTitle",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "nextReason",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "rewardAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rewardAmount",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "chatGroupId",
              "type": "string"
            }
          ],
          "internalType": "struct GameTableView",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTableInfoShort",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameRound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gameLiquidatedCount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tableAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tableId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "tableName",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "bankerAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "betAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "bankerFeePercent",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "playerCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "maxPlayers",
              "type": "uint8"
            },
            {
              "internalType": "enum GameState",
              "name": "state",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lastActivityTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPoolId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "poolId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "banker",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "rewardPerGame",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "winProbability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "remainingAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "inUse",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[10]",
                  "name": "__gap",
                  "type": "uint256[10]"
                }
              ],
              "internalType": "struct RewardPoolInfo",
              "name": "rewardPoolInfo",
              "type": "tuple"
            }
          ],
          "internalType": "struct GameTableInfoShort",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementationVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tableId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tableName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_bankerAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_betAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_maxPlayers",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_gameMainAddr",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_bankerFeePercent",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_firstRaise",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_secondRaise",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_implementationVersion",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "playerAddr",
          "type": "address"
        }
      ],
      "name": "isPlayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastActivityTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidateDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidateGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidatorFeePercent",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPlayers",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "randomValue",
          "type": "bytes32"
        }
      ],
      "name": "nextStep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "randomValue",
          "type": "bytes32"
        }
      ],
      "name": "playerContinue",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerContinuedCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "randomValue",
          "type": "bytes32"
        }
      ],
      "name": "playerFold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerJoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerQuit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "randomValue",
          "type": "bytes32"
        }
      ],
      "name": "playerReady",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerReadyCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerSettle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerUnready",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "enum PlayerState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "totalBet",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasActedThisRound",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isWinner",
          "type": "bool"
        },
        {
          "internalType": "enum CardType",
          "name": "cardType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeTableRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPoolAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPoolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomCardAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondBetX",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        }
      ],
      "name": "setTableRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roomCardId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "randomValue",
          "type": "bytes32"
        }
      ],
      "name": "startGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum GameState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tableId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tableInactiveTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tableName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrizePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_chatGroupId",
          "type": "string"
        }
      ],
      "name": "updateChatGroupId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa6715ece6c787b7e188316a4a56693edbd6ed91bd2a2a1fb40747e6196a1f1b6",
  "receipt": {
    "to": null,
    "from": "0xCf4eC0E2Fa3B3f1f706183128D729a9C86c69e4d",
    "contractAddress": "0x2315AB62967C852a5A9C45E60b3888C1d3575e97",
    "transactionIndex": 5,
    "gasUsed": "7157197",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000000000000000100800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000020000000000000000000000000000000000000000000000002000000000000000000",
    "blockHash": "0x259450a0f0c227d599f087f3a75c7d71b0c3bc79d1ed592a56e5fdce08ed41a6",
    "transactionHash": "0xa6715ece6c787b7e188316a4a56693edbd6ed91bd2a2a1fb40747e6196a1f1b6",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 15726264,
        "transactionHash": "0xa6715ece6c787b7e188316a4a56693edbd6ed91bd2a2a1fb40747e6196a1f1b6",
        "address": "0x2315AB62967C852a5A9C45E60b3888C1d3575e97",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cf4ec0e2fa3b3f1f706183128d729a9c86c69e4d"
        ],
        "data": "0x",
        "logIndex": 64,
        "blockHash": "0x259450a0f0c227d599f087f3a75c7d71b0c3bc79d1ed592a56e5fdce08ed41a6"
      }
    ],
    "blockNumber": 15726264,
    "cumulativeGasUsed": "10092104",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c9d85574554088af08147d962ab460bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameEndTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"playerAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winnerAddrs\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"playerBets\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint8[5][]\",\"name\":\"playerCards\",\"type\":\"uint8[5][]\"}],\"name\":\"CreateGameHistory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"}],\"name\":\"GameTableChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"GameTableInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_allPlayersActed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankerAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankerFeePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"bankerRemovePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bankerStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"betAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canMoveToNextStep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canMove\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chatGroupId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tableName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_firstRaise\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_secondRaise\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPoolId\",\"type\":\"uint256\"}],\"name\":\"editGameTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstBetX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameLiquidatedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameMainAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPlayerData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum PlayerState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasActedThisRound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"uint8[5]\",\"name\":\"cards\",\"type\":\"uint8[5]\"},{\"internalType\":\"enum CardType\",\"name\":\"cardType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct BBPlayer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayerAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"getPlayerData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum PlayerState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasActedThisRound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"uint8[5]\",\"name\":\"cards\",\"type\":\"uint8[5]\"},{\"internalType\":\"enum CardType\",\"name\":\"cardType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct BBPlayer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTableInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameLiquidatedCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bankerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalPrizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"playerCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidateDeadline\",\"type\":\"uint256\"},{\"internalType\":\"enum GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"liquidatorFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"playerContinuedCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"playerReadyCount\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"playerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"currentRoundDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tableInactiveTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActivityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"implementationVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"firstBetX\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"secondBetX\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"bankerStakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canNext\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"nextTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nextReason\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chatGroupId\",\"type\":\"string\"}],\"internalType\":\"struct GameTableView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTableInfoShort\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gameLiquidatedCount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"bankerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"playerCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"enum GameState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastActivityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPoolId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RewardPoolInfo\",\"name\":\"rewardPoolInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct GameTableInfoShort\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tableId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tableName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_bankerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_gameMainAddr\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_bankerFeePercent\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_firstRaise\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_secondRaise\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_implementationVersion\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"playerAddr\",\"type\":\"address\"}],\"name\":\"isPlayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActivityTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorFeePercent\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPlayers\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"randomValue\",\"type\":\"bytes32\"}],\"name\":\"nextStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"randomValue\",\"type\":\"bytes32\"}],\"name\":\"playerContinue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerContinuedCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"randomValue\",\"type\":\"bytes32\"}],\"name\":\"playerFold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerJoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerQuit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"randomValue\",\"type\":\"bytes32\"}],\"name\":\"playerReady\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerReadyCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerSettle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerUnready\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"enum PlayerState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalBet\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasActedThisRound\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"enum CardType\",\"name\":\"cardType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTableRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomCardAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondBetX\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"setTableRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roomCardId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"randomValue\",\"type\":\"bytes32\"}],\"name\":\"startGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GameState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tableId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tableInactiveTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tableName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrizePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chatGroupId\",\"type\":\"string\"}],\"name\":\"updateChatGroupId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"\\u725b\\u725b\\u6e38\\u620f\\u684c\\u5b9e\\u73b0\\u5408\\u7ea6\\uff0c\\u7ba1\\u7406\\u5355\\u4e2a\\u6e38\\u620f\\u684c\\u7684\\u903b\\u8f91\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"bankerRemovePlayer(address)\":{\"details\":\"\\u5e84\\u5bb6\\u79fb\\u9664\\u73a9\\u5bb6\"},\"initialize(uint256,string,address,uint256,uint8,address,uint8,uint8,uint8,uint256,uint256)\":{\"details\":\"\\u521d\\u59cb\\u5316\\u51fd\\u6570\\uff0c\\u66ff\\u4ee3\\u6784\\u9020\\u51fd\\u6570\"},\"liquidateGame()\":{\"details\":\"\\u6e05\\u7b97\\u4e0d\\u6d3b\\u8dc3\\u7684\\u6e38\\u620f\\u684c \\u6b64\\u51fd\\u6570\\u6765\\u6e05\\u7b97\\u957f\\u65f6\\u95f4\\u4e0d\\u6d3b\\u8dc3\\u7684\\u6e38\\u620f\\u684c \\u5e84\\u5bb6\\u7684\\u62bc\\u91d1\\u5c06\\u88ab\\u5206\\u914d\\u7ed9\\u73a9\\u5bb6\\u548c\\u6e05\\u7b97\\u4eba\"},\"nextStep(bytes32)\":{\"details\":\"\\u4e0b\\u4e00\\u6b65\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"playerContinue(bytes32)\":{\"details\":\"\\u73a9\\u5bb6\\u7ee7\\u7eed\\u6e38\\u620f\"},\"playerFold(bytes32)\":{\"details\":\"\\u73a9\\u5bb6\\u5f03\\u724c\"},\"playerJoin()\":{\"details\":\"\\u73a9\\u5bb6\\u52a0\\u5165\\u6e38\\u620f\"},\"playerQuit()\":{\"details\":\"\\u73a9\\u5bb6\\u9000\\u51fa\\u6e38\\u620f\"},\"playerReady(bytes32)\":{\"details\":\"\\u73a9\\u5bb6\\u51c6\\u5907\"},\"playerSettle()\":{\"details\":\"\\u73a9\\u5bb6\\u7ed3\\u7b97\\u6e38\\u620f\\uff0c\\u5982\\u679c\\u5e84\\u5bb6\\u6ca1\\u7ed3\\u7b97\\u7684\\u8bdd\"},\"playerUnready()\":{\"details\":\"\\u73a9\\u5bb6\\u53d6\\u6d88\\u51c6\\u5907\"},\"removeTableRewardPool()\":{\"details\":\"\\u5e84\\u5bb6\\u79fb\\u9664\\u6e38\\u620f\\u684c\\u7684\\u5956\\u52b1\\u6c60\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setTableRewardPool(uint256)\":{\"details\":\"\\u5e84\\u5bb6\\u4e3a\\u6e38\\u620f\\u684c\\u8bbe\\u7f6e\\u5956\\u52b1\\u6c60\",\"params\":{\"poolId\":\"\\u5956\\u52b1\\u6c60ID\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BBGameTableImplementation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BBGameTableImplementation.sol\":\"BBGameTableImplementation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/BBCardDealer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBCardUtils.sol\\\";\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BBCardDealer\\r\\n * @dev \\u724c\\u5c40\\u7ba1\\u7406\\u5de5\\u5177\\uff0c\\u8d1f\\u8d23\\u53d1\\u724c\\u548c\\u8bb0\\u5f55\\u5df2\\u53d1\\u7684\\u724c\\r\\n * @notice \\u8fdb\\u884c\\u4e86\\u4ee5\\u4e0b\\u4f18\\u5316\\uff1a\\r\\n *  - \\u6539\\u8fdb\\u968f\\u673a\\u6027\\u5904\\u7406\\r\\n *  - \\u4f18\\u5316\\u907f\\u514d\\u91cd\\u590d\\u724c\\u7684\\u7b97\\u6cd5\\r\\n *  - \\u660e\\u786e\\u4f7f\\u7528\\u6807\\u51c652\\u5f20\\u6251\\u514b\\u724c(\\u65e0\\u5927\\u5c0f\\u738b)\\r\\n *  - \\u589e\\u52a0\\u8fb9\\u754c\\u68c0\\u67e5\\r\\n *  - \\u51cf\\u5c11 gas \\u6d88\\u8017\\r\\n *  - \\u6dfb\\u52a0\\u4e8b\\u4ef6\\u901a\\u77e5\\r\\n *  - \\u5b8c\\u5584 NatSpec \\u6587\\u6863\\r\\n */\\r\\nlibrary BBCardDealer {\\r\\n    // \\u724c\\u7ec4\\u5e38\\u91cf\\r\\n    uint8 internal constant TOTAL_CARDS = 52; // \\u6807\\u51c652\\u5f20\\u6251\\u514b\\u724c(\\u65e0\\u5927\\u5c0f\\u738b)\\r\\n\\r\\n    /**\\r\\n     * @dev \\u53d1\\u724c\\u7ba1\\u7406\\u5668\\u72b6\\u6001\\r\\n     */\\r\\n    struct DealerState {\\r\\n        mapping(uint8 => bool) usedCards; // \\u5df2\\u4f7f\\u7528\\u7684\\u724c\\r\\n        uint256 lastSeed;      // \\u4e0a\\u6b21\\u4f7f\\u7528\\u7684\\u968f\\u673a\\u79cd\\u5b50\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u521d\\u59cb\\u5316\\u53d1\\u724c\\u72b6\\u6001(\\u4f7f\\u7528\\u9ed8\\u8ba4\\u76845\\u5f20\\u724c)\\r\\n     * @param self \\u53d1\\u724c\\u72b6\\u6001\\r\\n     * @param newSeed \\u521d\\u59cb\\u968f\\u673a\\u79cd\\u5b50\\r\\n     */\\r\\n    function initialize(DealerState storage self, uint256 newSeed) internal {\\r\\n        self.lastSeed = uint256(keccak256(abi.encodePacked(\\r\\n            self.lastSeed,\\r\\n            block.prevrandao,\\r\\n            block.timestamp,\\r\\n            newSeed\\r\\n        )));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u91cd\\u7f6e\\u53d1\\u724c\\u72b6\\u6001\\r\\n     * @param self \\u53d1\\u724c\\u72b6\\u6001\\r\\n     */\\r\\n    function reset(DealerState storage self) internal {\\r\\n        // Clear all used cards by iterating through 1 to TOTAL_CARDS\\r\\n        for (uint8 i = 1; i <= TOTAL_CARDS; i++) {\\r\\n            self.usedCards[i] = false;\\r\\n        }\\r\\n\\r\\n        // \\u91cd\\u7f6e\\u968f\\u673a\\u79cd\\u5b50\\r\\n        self.lastSeed = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u4f7f\\u7528\\u6539\\u8fdb\\u7684\\u7b97\\u6cd5\\u751f\\u6210\\u5355\\u5f20\\u724c\\uff0c\\u786e\\u4fdd\\u4e0d\\u4e0e\\u73a9\\u5bb6\\u5df2\\u6709\\u724c\\u91cd\\u590d\\r\\n     * @param self \\u53d1\\u724c\\u72b6\\u6001\\r\\n     * @param player \\u73a9\\u5bb6\\u5730\\u5740\\r\\n     * @return \\u65b0\\u751f\\u6210\\u7684\\u724c (1-52\\u8303\\u56f4\\u5185)\\r\\n     */\\r\\n    function generateCard(\\r\\n        DealerState storage self, \\r\\n        address player,\\r\\n        uint8 count\\r\\n    ) internal returns (uint8) {        \\r\\n        // \\u751f\\u62101-52\\u7684\\u724c (\\u6807\\u51c652\\u5f20\\u6251\\u514b\\u724c\\uff0c\\u65e0\\u5927\\u5c0f\\u738b)\\r\\n        uint8 newCard;\\r\\n        uint8 attempts = 0;\\r\\n        \\r\\n        // \\u4f7f\\u7528\\u6620\\u5c04\\u5feb\\u901f\\u68c0\\u67e5\\u662f\\u5426\\u91cd\\u590d\\uff0c\\u6700\\u591a\\u5c1d\\u8bd525\\u6b21\\r\\n        do {\\r\\n            uint256 hash = uint256(keccak256(abi.encodePacked(self.lastSeed, player, count, attempts)));\\r\\n            // \\u786e\\u4fdd\\u8303\\u56f4\\u57281-52\\u4e4b\\u95f4 (% TOTAL_CARDS + 1)\\r\\n            newCard = uint8((hash % TOTAL_CARDS) + 1);\\r\\n            attempts++;\\r\\n            \\r\\n            // \\u9632\\u6b62\\u65e0\\u9650\\u5faa\\u73af\\r\\n            require(attempts <= 25, \\\"Failed to generate unique card\\\");\\r\\n            \\r\\n        } while (self.usedCards[newCard]);\\r\\n        \\r\\n        // \\u8bb0\\u5f55\\u8be5\\u724c\\u5df2\\u88ab\\u4f7f\\u7528\\r\\n        self.usedCards[newCard] = true;\\r\\n\\r\\n        return newCard;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u4e3a\\u73a9\\u5bb6\\u53d1\\u6307\\u5b9a\\u6570\\u91cf\\u7684\\u724c\\r\\n     * @param self \\u53d1\\u724c\\u72b6\\u6001\\r\\n     * @param player \\u73a9\\u5bb6\\u5730\\u5740\\r\\n     * @param count \\u8981\\u53d1\\u7684\\u724c\\u6570\\u91cf\\r\\n     * @return \\u65b0\\u53d1\\u7684\\u724c\\r\\n     */\\r\\n    function dealCards(\\r\\n        DealerState storage self, \\r\\n        address player, \\r\\n        uint8 count\\r\\n    ) internal returns (uint8[] memory) {            \\r\\n        uint8[] memory newCards = new uint8[](count);\\r\\n\\r\\n        for (uint8 i = 0; i < count; i++) {\\r\\n            // \\u4e3a\\u6bcf\\u5f20\\u724c\\u4f7f\\u7528\\u4e0d\\u540c\\u7684\\u79cd\\u5b50\\r\\n            newCards[i] = generateCard(self, player, count);\\r\\n        }\\r\\n\\r\\n        return newCards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u6839\\u636e\\u8f6e\\u6b21\\u4e3a\\u591a\\u4e2a\\u73a9\\u5bb6\\u53d1\\u724c\\r\\n     * @param self \\u53d1\\u724c\\u72b6\\u6001\\r\\n     * @param round \\u5f53\\u524d\\u8f6e\\u6b21(1=\\u7b2c\\u4e00\\u8f6e\\u53d13\\u5f20, 2=\\u7b2c\\u4e8c\\u8f6e\\u53d11\\u5f20, 3=\\u7b2c\\u4e09\\u8f6e\\u53d11\\u5f20)\\r\\n     */\\r\\n    function dealCardsByRoundForPlayer(\\r\\n        DealerState storage self,\\r\\n        address player,\\r\\n        uint8 round\\r\\n    ) internal returns (uint8[] memory)  {\\r\\n        require(round >= 1 && round <= 3, \\\"Invalid round\\\");\\r\\n\\r\\n        // \\u6839\\u636e\\u8f6e\\u6b21\\u786e\\u5b9a\\u53d1\\u724c\\u6570\\u91cf\\r\\n        uint8 cardCount = round == 1 ? 3 : 1;\\r\\n\\r\\n        // \\u66f4\\u65b0\\u968f\\u673a\\u79cd\\u5b50\\uff0c\\u52a0\\u5165\\u8f6e\\u6b21\\u4fe1\\u606f\\u548c\\u533a\\u5757\\u4fe1\\u606f\\u589e\\u52a0\\u968f\\u673a\\u6027\\r\\n        self.lastSeed = uint256(keccak256(abi.encodePacked(\\r\\n            self.lastSeed, \\r\\n            player,\\r\\n            round, \\r\\n            block.timestamp, \\r\\n            block.difficulty\\r\\n        )));\\r\\n\\r\\n        return dealCards(self, player, cardCount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb1e9f97e8bc1a0d72ff7b0b1b1d362025a42e1c3ace90ce6c1ded54fe59aed94\",\"license\":\"MIT\"},\"contracts/BBCardUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title CardUtils\\r\\n * @dev \\u724c\\u578b\\u8ba1\\u7b97\\u548c\\u6bd4\\u8f83\\u7684\\u5de5\\u5177\\u5e93\\r\\n */\\r\\nlibrary BBCardUtils {\\r\\n    /**\\r\\n     * @dev \\u5408\\u5e76\\u4e24\\u8f6e\\u724c\\r\\n     */\\r\\n    function combineCards(uint8[3] memory firstCards, uint8[2] memory secondCards) internal pure returns (uint8[5] memory) {\\r\\n        uint8[5] memory allCards;\\r\\n\\r\\n        for (uint8 i = 0; i < 3; i++) {\\r\\n            allCards[i] = firstCards[i];\\r\\n        }\\r\\n\\r\\n        for (uint8 i = 0; i < 2; i++) {\\r\\n            allCards[i + 3] = secondCards[i];\\r\\n        }\\r\\n\\r\\n        return allCards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u8ba1\\u7b97\\u724c\\u578b\\r\\n     */\\r\\n    function calculateCardType(uint8[5] memory cards) internal pure returns (CardType) {\\r\\n        // \\u68c0\\u67e5\\u662f\\u5426\\u6709\\u65e0\\u6548\\u724c\\uff080\\u8868\\u793a\\u65e0\\u6548\\u724c\\uff09\\r\\n        for (uint8 i = 0; i < 5; i++) {\\r\\n            if (cards[i] == 0) {\\r\\n                return CardType.NONE;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // \\u8f6c\\u6362\\u724c\\u9762\\u503c\\uff081-13\\uff09\\u548c\\u82b1\\u8272\\uff080-3\\uff09\\r\\n        uint8[5] memory values;\\r\\n        for (uint8 i = 0; i < 5; i++) {\\r\\n            values[i] = ((cards[i] - 1) % 13) + 1;\\r\\n        }\\r\\n\\r\\n        // \\u68c0\\u67e5\\u7279\\u6b8a\\u724c\\u578b\\r\\n        if (isFiveFlower(values)) {\\r\\n            return CardType.FIVE_FLOWERS;\\r\\n        }\\r\\n        \\r\\n        if (isFiveBomb(values)) {\\r\\n            return CardType.FIVE_BOMB;\\r\\n        }\\r\\n\\r\\n        if (isFiveSmall(values)) {\\r\\n            return CardType.FIVE_SMALL;\\r\\n        }\\r\\n\\r\\n        // \\u8ba1\\u7b97\\u725b\\u725b\\u724c\\u578b\\r\\n        return calculateBullType(values);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u68c0\\u67e5\\u662f\\u5426\\u662f\\u4e94\\u82b1\\u725b\\uff085\\u5f20\\u724c\\u90fd\\u662fJQK\\uff09\\r\\n     */\\r\\n    function isFiveFlower(uint8[5] memory values) internal pure returns (bool) {\\r\\n        for (uint8 i = 0; i < 5; i++) {\\r\\n            if (values[i] < 11) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u68c0\\u67e5\\u662f\\u5426\\u662f\\u70b8\\u5f39\\u725b\\uff084\\u5f20\\u76f8\\u540c\\u70b9\\u6570\\uff09\\r\\n     */\\r\\n    function isFiveBomb(uint8[5] memory values) internal pure returns (bool) {\\r\\n        // \\u7edf\\u8ba1\\u6bcf\\u4e2a\\u70b9\\u6570\\u51fa\\u73b0\\u7684\\u6b21\\u6570\\r\\n        uint8[14] memory counts;\\r\\n\\r\\n        for (uint8 i = 0; i < 5; i++) {\\r\\n            counts[values[i]]++;\\r\\n        }\\r\\n\\r\\n        // \\u68c0\\u67e5\\u662f\\u5426\\u6709\\u70b9\\u6570\\u51fa\\u73b04\\u6b21\\r\\n        for (uint8 i = 1; i <= 13; i++) {\\r\\n            if (counts[i] == 4) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u68c0\\u67e5\\u662f\\u5426\\u662f\\u4e94\\u5c0f\\u725b\\uff085\\u5f20\\u724c\\u70b9\\u6570\\u548c\\u5c0f\\u4e8e\\u7b49\\u4e8e10\\uff09\\r\\n     */\\r\\n    function isFiveSmall(uint8[5] memory values) internal pure returns (bool) {\\r\\n        uint8 sum = 0;\\r\\n\\r\\n        for (uint8 i = 0; i < 5; i++) {\\r\\n            // J\\u3001Q\\u3001K\\u7684\\u70b9\\u6570\\u90fd\\u630910\\u8ba1\\u7b97\\r\\n            uint8 value = values[i] > 10 ? 10 : values[i];\\r\\n            sum += value;\\r\\n        }\\r\\n\\r\\n        return sum <= 10;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u8ba1\\u7b97\\u6709\\u725b\\u724c\\u578b\\r\\n     */\\r\\n    function calculateBullType(uint8[5] memory values) internal pure returns (CardType) {\\r\\n        // \\u8f6c\\u6362\\u70b9\\u6570\\uff08J\\u3001Q\\u3001K\\u90fd\\u630910\\u8ba1\\u7b97\\uff09\\r\\n        uint8[5] memory points;\\r\\n        uint8 sum = 0;\\r\\n\\r\\n        for (uint8 i = 0; i < 5; i++) {\\r\\n            points[i] = values[i] > 10 ? 10 : values[i];\\r\\n            sum += points[i];\\r\\n        }\\r\\n\\r\\n        // \\u5c1d\\u8bd5\\u6240\\u6709\\u53ef\\u80fd\\u76843\\u5f20\\u724c\\u7ec4\\u5408\\uff0c\\u770b\\u662f\\u5426\\u80fd\\u51d1\\u621010\\u7684\\u500d\\u6570\\r\\n        for (uint8 i = 0; i < 3; i++) {\\r\\n            for (uint8 j = i + 1; j < 4; j++) {\\r\\n                for (uint8 k = j + 1; k < 5; k++) {\\r\\n                    uint8 threeSum = points[i] + points[j] + points[k];\\r\\n\\r\\n                    if (threeSum % 10 == 0) {\\r\\n                        // \\u627e\\u5230\\u4e00\\u4e2a\\u6709\\u6548\\u7ec4\\u5408\\uff0c\\u8ba1\\u7b97\\u5269\\u4f59\\u4e24\\u5f20\\u724c\\u7684\\u70b9\\u6570\\u548c\\r\\n                        uint8 remainingSum = sum - threeSum;\\r\\n                        uint8 remainder = remainingSum % 10;\\r\\n\\r\\n                        if (remainder == 0) {\\r\\n                            return CardType.BULL_BULL;\\r\\n                        } else {\\r\\n                            // \\u8fd4\\u56de\\u5bf9\\u5e94\\u7684\\u725b\\u51e0\\uff0c\\u9700\\u8981\\u52a01\\u6765\\u5bf9\\u5e94\\u6b63\\u786e\\u7684\\u679a\\u4e3e\\u503c\\r\\n                            return CardType(remainder + 1);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // \\u6ca1\\u6709\\u627e\\u5230\\u6709\\u6548\\u7ec4\\u5408\\uff0c\\u8fd4\\u56de\\u65e0\\u725b\\r\\n        return CardType.NO_BULL;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u6bd4\\u8f83\\u4e24\\u4e2a\\u724c\\u578b\\u7684\\u5927\\u5c0f\\r\\n     * @return 1 \\u5982\\u679ccardType1\\u5927\\u4e8ecardType2\\uff0c0 \\u5982\\u679c\\u76f8\\u7b49\\uff0c-1 \\u5982\\u679ccardType1\\u5c0f\\u4e8ecardType2\\r\\n     */\\r\\n    function compareCardType(CardType cardType1, CardType cardType2) internal pure returns (int8) {\\r\\n        if (uint8(cardType1) > uint8(cardType2)) {\\r\\n            return 1;\\r\\n        } else if (uint8(cardType1) < uint8(cardType2)) {\\r\\n            return -1;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb09391e98266c0b641479528208a50cc32ac9ff31560d1ffa46a132f43b2a022\",\"license\":\"MIT\"},\"contracts/BBGameTableImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"./BBCardUtils.sol\\\";\\nimport \\\"./BBPlayer.sol\\\";\\nimport \\\"./BBTypes.sol\\\";\\nimport \\\"./BBCardDealer.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./BBInterfaces.sol\\\";\\n\\n/**\\n * @title BBGameTableImplementation\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u684c\\u5b9e\\u73b0\\u5408\\u7ea6\\uff0c\\u7ba1\\u7406\\u5355\\u4e2a\\u6e38\\u620f\\u684c\\u7684\\u903b\\u8f91\\n */\\ncontract BBGameTableImplementation is ReentrancyGuard, Ownable {\\n    using BBPlayerLib for BBPlayer;\\n    using BBCardUtils for uint8[5];\\n    using BBCardDealer for BBCardDealer.DealerState;\\n\\n    // \\u6e38\\u620f\\u684c\\u6570\\u636e\\n    bool public active;\\n    uint256 public tableId; // \\u6e38\\u620f\\u684cID\\n    string public tableName;\\n    address public bankerAddr;\\n    uint256 public betAmount;  // \\u56fa\\u5b9a\\u62bc\\u6ce8\\u91d1\\u989d\\n    uint8 public playerCount;\\n    uint8 public maxPlayers;\\n    uint256 public creationTimestamp;\\n    GameState public state;\\n    uint256 public rewardPoolId;\\n    uint256 public bankerStakeAmount;  //\\u5e84\\u5bb6\\u7684\\u62bc\\u91d1\\n    uint256 public totalIncome; // \\u603b\\u6536\\u5165\\n\\n    // \\u7b2c\\u4e00\\u3001\\u4e8c\\u8f6e\\u4e0b\\u6ce8\\u91d1\\u989d\\u662f\\u7b2c\\u4e00\\u8f6e\\u7684\\u500d\\u6570\\uff0c\\u9ed8\\u8ba42\\n    uint8 public firstBetX;\\n    uint8 public secondBetX;\\n\\n    uint256 public gameRound; //\\u6e38\\u620f\\u573a\\u6b21\\n    uint256 public gameLiquidatedCount; //\\u88ab\\u6e05\\u7b97\\u7684\\u6e38\\u620f\\u573a\\u6570\\n\\n    uint256 public finalSeed; // \\u6700\\u540e\\u4e00\\u6b21\\u4f7f\\u7528\\u7684\\u79cd\\u5b50\\n\\n    uint256 public gameStartTimestamp;\\n    uint256 public gameEndTimestamp;\\n    uint8 public playerContinuedCount;\\n    uint8 public playerReadyCount;\\n    uint256 public totalPrizePool;  //\\u5956\\u6c60\\u91d1\\u989d\\n    uint8 public bankerFeePercent; // \\u5e84\\u5bb6\\u8d39\\u7528\\u767e\\u5206\\u6bd4\\n    uint8 public liquidatorFeePercent; // \\u6e05\\u7b97\\u4eba\\u8d39\\u7528\\u767e\\u5206\\u6bd4\\n    uint256 public implementationVersion; // \\u5b9e\\u73b0\\u7248\\u672c\\u53f7\\n\\n    // \\u73a9\\u5bb6\\u6570\\u636e\\n    BBPlayer[] public players;\\n\\n    // \\u53d1\\u724c\\u8bb0\\u5f55\\n    BBCardDealer.DealerState private dealerState;\\n\\n    //\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\\n    address public gameMainAddr;\\n    address public rewardPoolAddr; // \\u5956\\u52b1\\u6c60\\u5408\\u7ea6\\u5730\\u5740\\n    address public roomCardAddr; // \\u623f\\u95f4\\u5361\\u5408\\u7ea6\\u5730\\u5740\\n\\n    // \\u6dfb\\u52a0\\u8d85\\u65f6\\u76f8\\u5173\\u72b6\\u6001\\u53d8\\u91cf\\n    uint256 public playerTimeout; // \\u73a9\\u5bb6\\u64cd\\u4f5c\\u8d85\\u65f6\\u65f6\\u95f4\\uff0c\\u5355\\u4f4d\\u4e3a\\u79d2\\n    uint256 public currentRoundDeadline; // \\u5f53\\u524d\\u56de\\u5408\\u7684\\u622a\\u6b62\\u65f6\\u95f4\\n    uint256 public liquidateDeadline; // \\u8d85\\u65f6\\u6e05\\u7b97\\u65f6\\u95f4\\n\\n    uint256 public tableInactiveTimeout; // \\u6e38\\u620f\\u684c\\u4e0d\\u6d3b\\u8dc3\\u8d85\\u65f6\\u65f6\\u95f4\\uff0c\\u5355\\u4f4d\\u4e3a\\u79d2\\n    uint256 public lastActivityTimestamp; // \\u6700\\u540e\\u6d3b\\u52a8\\u65f6\\u95f4\\u6233\\n\\n    //\\u5e84\\u5bb6\\u5956\\u52b1\\n    address public rewardAddr; // \\u5956\\u52b1\\u5730\\u5740\\n    uint256 public rewardAmount; // \\u5956\\u52b1\\u91d1\\u989d\\n\\n    string public chatGroupId; // \\u804a\\u5929\\u7ec4ID\\n\\n    // \\u9884\\u7559 25 \\u4e2a slot \\u7ed9\\u5c06\\u6765\\u65b0\\u589e\\u53d8\\u91cf\\u7528\\uff0c\\u9632\\u6b62\\u5b58\\u50a8\\u51b2\\u7a81\\n    uint256[25] private __gap;\\n\\n    // \\u4e8b\\u4ef6\\n    event GameTableChanged(address indexed tableAddr);\\n    event GameTableInitialized(address indexed tableAddr, address indexed banker, uint256 version);\\n    event CreateGameHistory(address indexed tableAddr, uint256 round, uint256 gameStartTimestamp, uint256 gameEndTimestamp, address[] playerAddrs, address[] winnerAddrs, uint256[] playerBets, uint8[5][] playerCards);\\n\\n\\n    // \\u4fee\\u6539\\u6784\\u9020\\u51fd\\u6570\\uff0c\\u4f20\\u5165\\u521d\\u59cb\\u6240\\u6709\\u8005\\n    constructor() Ownable(msg.sender){\\n        // \\u6784\\u9020\\u51fd\\u6570\\u4f53\\u53ef\\u4ee5\\u4e3a\\u7a7a\\uff0c\\u56e0\\u4e3a\\u6240\\u6709\\u6743\\u5df2\\u7ecf\\u5728 Ownable \\u6784\\u9020\\u51fd\\u6570\\u4e2d\\u8bbe\\u7f6e\\n    }\\n   \\n    /**\\n     * @dev \\u521d\\u59cb\\u5316\\u51fd\\u6570\\uff0c\\u66ff\\u4ee3\\u6784\\u9020\\u51fd\\u6570\\n     */\\n    function initialize(\\n        uint256 _tableId,\\n        string memory _tableName,\\n        address _bankerAddr,\\n        uint256 _betAmount,\\n        uint8 _maxPlayers,\\n        address _gameMainAddr,\\n        uint8 _bankerFeePercent,\\n        uint8 _firstRaise,\\n        uint8 _secondRaise,\\n        uint256 _rewardPoolId,\\n        uint256 _implementationVersion\\n    ) external {\\n        // \\u786e\\u4fdd\\u53ea\\u521d\\u59cb\\u5316\\u4e00\\u6b21\\u7684\\u68c0\\u67e5\\n        require(creationTimestamp == 0, \\\"Already initialized\\\");\\n        \\n        _transferOwnership(_gameMainAddr);\\n\\n        // \\u53c2\\u6570\\u9a8c\\u8bc1\\n        require(_maxPlayers >= 2, \\\"Invalid max players\\\");\\n\\n        active = true;\\n        tableId = _tableId;\\n        tableName = _tableName;\\n        bankerAddr = _bankerAddr;\\n        betAmount = _betAmount;\\n        maxPlayers = _maxPlayers;\\n        state = GameState.WAITING;\\n        gameMainAddr = _gameMainAddr;\\n        creationTimestamp = block.timestamp;\\n        lastActivityTimestamp = block.timestamp; // \\u521d\\u59cb\\u5316\\u6700\\u540e\\u6d3b\\u52a8\\u65f6\\u95f4\\n        bankerFeePercent = _bankerFeePercent;\\n        implementationVersion = _implementationVersion;\\n\\n        firstBetX = _firstRaise;\\n        secondBetX = _secondRaise;\\n\\n        refreshConfig();\\n\\n        if(_rewardPoolId > 0){\\n            IRewardPool rewardPool = IRewardPool(rewardPoolAddr);\\n            require(rewardPool.isBankerPool(bankerAddr, _rewardPoolId), \\\"Invalid reward pool\\\");\\n        }\\n        rewardPoolId = _rewardPoolId;\\n\\n        emit GameTableInitialized(address(this), _bankerAddr, _implementationVersion);\\n    }\\n\\n    //\\u5237\\u65b0\\u6e38\\u620f\\u914d\\u7f6e\\n    function refreshConfig() internal {\\n        IGameMain gameMain = IGameMain(gameMainAddr);\\n        GameConfig memory config = gameMain.getGameConfig();\\n        playerTimeout = config.playerTimeout;\\n        liquidatorFeePercent = config.liquidatorFeePercent;\\n        tableInactiveTimeout = config.tableInactiveTimeout;\\n        roomCardAddr = config.roomCardAddress;\\n        rewardPoolAddr = config.rewardPoolAddress;\\n    }\\n\\n    // \\u6dfb\\u52a0\\u4e00\\u4e2a\\u516c\\u5171\\u51fd\\u6570\\u6765\\u83b7\\u53d6\\u73a9\\u5bb6\\u5730\\u5740\\u5217\\u8868\\uff0c\\u6570\\u7ec4\\u9700\\u8981\\u663e\\u793a\\u5b9a\\u4e49get\\u51fd\\u6570\\uff0cint\\u3001string\\u7b49\\u4e0d\\u9700\\u8981\\n    function getPlayerAddresses() public view returns (address[] memory) {\\n        // \\u5982\\u679c\\u6ca1\\u6709\\u73a9\\u5bb6\\uff0c\\u76f4\\u63a5\\u8fd4\\u56de\\u7a7a\\u6570\\u7ec4\\n        if (playerCount == 0) {\\n            return new address[](0);\\n        }\\n\\n        address[] memory playerAddresses = new address[](playerCount);\\n        uint count = 0;\\n        for(uint i = 0; i < players.length; i++){\\n            if(players[i].addr != address(0)){\\n                playerAddresses[count] = players[i].addr;\\n                count++;\\n            }\\n        }\\n\\n        return playerAddresses;\\n    }\\n\\n    // \\u6dfb\\u52a0\\u7f16\\u8f91table\\u7684\\u51fd\\u6570\\n    function editGameTable(\\n        string memory _tableName,\\n        uint256 _betAmount,\\n        uint8 _maxPlayers,\\n        uint8 _bankerFeePercent,\\n        uint8 _firstRaise,\\n        uint8 _secondRaise,\\n        uint256 _rewardPoolId\\n    ) external onlyBanker nonReentrant {\\n        require(state == GameState.WAITING && playerCount == 0, \\\"Invalid game state or player count not equal zero\\\");\\n\\n        IGameMain gameMain = IGameMain(gameMainAddr);\\n        GameConfig memory config = gameMain.getGameConfig();\\n        \\n        require(_betAmount != 0, \\\"Bet amount too small\\\");\\n        require(_maxPlayers > 0 && _maxPlayers <= config.maxPlayers, \\\"Invalid max players\\\");\\n        require(_bankerFeePercent <= config.maxBankerFeePercent, \\\"Invalid banker fee percent\\\");\\n        require(bytes(_tableName).length > 0 && bytes(_tableName).length <= 20, \\\"Invalid table name\\\");\\n        require(_firstRaise >= 1 && _firstRaise <= 4, \\\"Invalid first raise\\\");\\n        require(_secondRaise >= 1 && _secondRaise <= 4, \\\"Invalid second raise\\\");\\n\\n        if(_rewardPoolId > 0){\\n            IRewardPool rewardPool = IRewardPool(rewardPoolAddr);\\n            require(rewardPool.isBankerPool(bankerAddr, _rewardPoolId), \\\"Invalid reward pool\\\");\\n        }\\n        \\n        tableName = _tableName;\\n        betAmount = _betAmount;\\n        maxPlayers = _maxPlayers;\\n        bankerFeePercent = _bankerFeePercent;\\n        firstBetX = _firstRaise;\\n        secondBetX = _secondRaise;\\n        rewardPoolId = _rewardPoolId;\\n        \\n        emit GameTableChanged(address(this));\\n    }\\n\\n    /**\\n     * @dev \\u66f4\\u65b0\\u6700\\u540e\\u6d3b\\u52a8\\u65f6\\u95f4\\n     */\\n    function _updateLastActivity() internal {\\n        lastActivityTimestamp = block.timestamp;\\n    }\\n\\n    modifier onlyParticipant() {\\n        if(msg.sender != bankerAddr) {\\n            _getPlayer(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev \\u4fee\\u9970\\u5668\\uff1a\\u9002\\u7528\\u4e8e\\u5e84\\u5bb6\\n     */\\n    modifier onlyBanker() {\\n        require(msg.sender == bankerAddr, \\\"not banker\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev \\u4fee\\u9970\\u5668\\uff1a\\u9002\\u7528\\u4e8e\\u73a9\\u6e38\\u620f\\u7684\\u73a9\\u5bb6\\uff0c\\u5982\\u679c\\u5e84\\u5bb6\\u4e5f\\u53c2\\u4e0e\\u6e38\\u620f\\uff0c\\u90a3\\u4e5f\\u7b97\\u5728\\u5185\\n     */\\n    modifier onlyPlayers() {\\n        _getPlayer(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev \\u4fee\\u9970\\u5668\\uff1a\\u53ea\\u5141\\u8bb8\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u8c03\\u7528\\n     */\\n    modifier onlyGameMain() {\\n        require(msg.sender == gameMainAddr, \\\"only main contract can call\\\");\\n        _;\\n    }\\n\\n\\n    /**\\n     * @dev \\u5e84\\u5bb6\\u4e3a\\u6e38\\u620f\\u684c\\u8bbe\\u7f6e\\u5956\\u52b1\\u6c60\\n     * @param poolId \\u5956\\u52b1\\u6c60ID\\n     */\\n    function setTableRewardPool(uint256 poolId) external onlyBanker nonReentrant {\\n        require(rewardPoolAddr != address(0), \\\"Invalid reward pool address\\\");\\n        bool isBankerPool = IRewardPool(rewardPoolAddr).isBankerPool(bankerAddr, poolId);\\n        require(isBankerPool, \\\"poolId is not your pool\\\");\\n\\n        rewardPoolId = poolId;\\n    }\\n\\n    /**\\n     * @dev \\u5e84\\u5bb6\\u79fb\\u9664\\u6e38\\u620f\\u684c\\u7684\\u5956\\u52b1\\u6c60\\n     */\\n    function removeTableRewardPool() external onlyBanker nonReentrant {\\n        rewardPoolId = 0;\\n    }\\n\\n    //\\u6dfb\\u52a0\\u73a9\\u5bb6\\n    function _addPlayer(address playerAddr) internal returns (uint256) {\\n        //\\u904d\\u5386players\\u627e\\u5230\\u7a7a\\u95f2\\u7684\\u4f4d\\u7f6e\\n        for(uint8 i = 0; i < players.length; i++){\\n            if(players[i].addr == address(0)){\\n                players[i].addr = playerAddr;\\n                players[i].state = PlayerState.JOINED;\\n                players[i].totalBet = 0;\\n                players[i].hasActedThisRound = false;\\n                players[i].cards = [0, 0, 0, 0, 0];\\n                players[i].cardType = CardType.NONE;\\n                playerCount++;\\n                return i;\\n            }\\n        }\\n\\n        players.push(BBPlayer({\\n            addr: playerAddr,\\n            state: PlayerState.JOINED,\\n            totalBet: 0,\\n            hasActedThisRound: false,\\n            isWinner: false,\\n            cards: [0, 0, 0, 0, 0],\\n            cardType: CardType.NONE,\\n            __gap: [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)]\\n        })); \\n\\n        playerCount++;\\n        return players.length - 1;   \\n    }\\n\\n    function _getPlayerIndex(address playerAddr) internal view returns (uint8) {\\n        for (uint8 i = 0; i < players.length; i++) {\\n            if (players[i].addr == playerAddr) {\\n                return i;\\n            }\\n        }\\n        require(false, \\\"Player not found\\\");\\n        return 0;\\n    }\\n\\n    function _getPlayer(address playerAddr) internal view returns (uint8 index, BBPlayer storage) {\\n        uint8 playerIndex = _getPlayerIndex(playerAddr);\\n        return (playerIndex, players[playerIndex]);\\n    }\\n\\n    //\\u79fb\\u9664\\u73a9\\u5bb6\\n    function _removePlayer(address playerAddr) internal {\\n        uint8 index = _getPlayerIndex(playerAddr);\\n        _removePlayerByIndex(index);\\n    }\\n\\n    function _removePlayerByIndex(uint8 index) internal {\\n        players[index].addr = address(0);\\n        players[index].state = PlayerState.NONE;\\n        players[index].totalBet = 0;\\n        players[index].hasActedThisRound = false;\\n        players[index].isWinner = false;\\n        players[index].cards = [0, 0, 0, 0, 0];\\n        players[index].cardType = CardType.NONE;\\n\\n        playerCount--;\\n    }\\n\\n    function _isPlayerExists(address playerAddr) internal view returns (bool) {\\n        for (uint8 i = 0; i < players.length; i++) {\\n            if (players[i].isValid() && players[i].addr == playerAddr) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // \\u66f4\\u65b0\\u804a\\u5929\\u7fa4\\u7ec4ID\\n    function updateChatGroupId(string memory _chatGroupId) external onlyBanker {\\n        chatGroupId = _chatGroupId;\\n        emit GameTableChanged(address(this));\\n    }\\n\\n\\n    /**\\n     * @dev \\u73a9\\u5bb6\\u52a0\\u5165\\u6e38\\u620f\\n     */\\n    function playerJoin() external nonReentrant {\\n        address playerAddr = msg.sender;\\n        require(!_isPlayerExists(playerAddr), \\\"Player already joined\\\");\\n        require(state == GameState.WAITING, \\\"Game not in waiting state\\\");\\n        require(playerCount < maxPlayers, \\\"Max players reached\\\");\\n\\n        _addPlayer(playerAddr);\\n\\n        _updateLastActivity();\\n\\n        IGameMain(gameMainAddr).userJoinTable(playerAddr);\\n\\n        emit GameTableChanged(address(this));\\n    }\\n\\n    /**\\n     * @dev \\u73a9\\u5bb6\\u51c6\\u5907\\n     */\\n    function playerReady(bytes32 randomValue) external payable onlyPlayers nonReentrant {\\n        require(randomValue != bytes32(0), \\\"Invalid random value\\\");\\n        require(state == GameState.WAITING, \\\"Game not in waiting state\\\");\\n        address playerAddr = msg.sender;\\n        (, BBPlayer storage player) = _getPlayer(playerAddr);\\n        require(player.state == PlayerState.JOINED, \\\"Player not in joined state\\\");\\n        require(msg.value == betAmount, \\\"Insufficient funds\\\");\\n\\n        player.totalBet = betAmount;\\n        totalPrizePool += betAmount;\\n        playerReadyCount++;\\n\\n        player.playerReady();\\n\\n        _updateLastActivity();\\n\\n        _updateFinalSeed(randomValue);\\n\\n        emit GameTableChanged(address(this));\\n    }\\n\\n    /**\\n     * @dev \\u73a9\\u5bb6\\u53d6\\u6d88\\u51c6\\u5907\\n     */\\n    function playerUnready() external payable onlyPlayers nonReentrant {\\n        require(state == GameState.WAITING, \\\"Game not in waiting state\\\");\\n        address playerAddr = msg.sender;\\n        (, BBPlayer storage player) = _getPlayer(playerAddr);\\n        require(player.state == PlayerState.READY, \\\"Player not in ready state\\\");\\n\\n        totalPrizePool -= betAmount;\\n        playerReadyCount--;\\n        player.totalBet = 0;\\n\\n        player.playerUnready();\\n\\n        _updateLastActivity();\\n\\n        // \\u8fd4\\u8fd8\\u62bc\\u91d1\\u7ed9\\u73a9\\u5bb6 - \\u4f7f\\u7528\\u66f4\\u5b89\\u5168\\u7684 call \\u65b9\\u6cd5\\u800c\\u4e0d\\u662f transfer\\n        (bool success, ) = payable(playerAddr).call{value: betAmount}(\\\"\\\");\\n        require(success, \\\"transfer failed\\\");\\n\\n        emit GameTableChanged(address(this));\\n    }\\n\\n    /**\\n     * @dev \\u73a9\\u5bb6\\u9000\\u51fa\\u6e38\\u620f\\n     */\\n    function playerQuit() external payable onlyPlayers nonReentrant {\\n        require(state == GameState.WAITING || state == GameState.SETTLED || state == GameState.LIQUIDATED, \\\"Game not in waiting or settled state\\\");\\n        address playerAddr = msg.sender;\\n        (uint8 playerIndex, BBPlayer storage player) = _getPlayer(playerAddr);\\n        if(state == GameState.WAITING){\\n            require(player.state == PlayerState.JOINED || player.state == PlayerState.READY, \\\"Player not in JOINED or READY state\\\");\\n\\n            // \\u5148\\u4fdd\\u5b58\\u9700\\u8981\\u8fd4\\u8fd8\\u7684\\u91d1\\u989d\\n            uint256 amountToReturn = player.totalBet;\\n\\n            if(player.state == PlayerState.READY){\\n                playerReadyCount--;\\n                totalPrizePool -= amountToReturn;\\n            }\\n\\n            // \\u79fb\\u9664\\u73a9\\u5bb6\\n            _removePlayerByIndex(playerIndex);\\n\\n            if(amountToReturn > 0){\\n                //\\u8fd4\\u8fd8\\u62bc\\u91d1\\n                (bool success, ) = payable(playerAddr).call{value: amountToReturn}(\\\"\\\");\\n                require(success, \\\"transfer failed\\\");\\n            }\\n        }else{\\n            // \\u79fb\\u9664\\u73a9\\u5bb6\\n            _removePlayerByIndex(playerIndex);\\n        }  \\n        \\n        IGameMain(gameMainAddr).userLeaveTable(playerAddr);\\n\\n        _updateLastActivity();\\n\\n        emit GameTableChanged(address(this));\\n    }\\n\\n    /**\\n     * @dev \\u5e84\\u5bb6\\u79fb\\u9664\\u73a9\\u5bb6\\n     */\\n    function bankerRemovePlayer(address playerAddr) external onlyBanker nonReentrant {\\n        require(state == GameState.WAITING, \\\"Game not in waiting state\\\");\\n        require(playerAddr != bankerAddr, \\\"Can not remove banker\\\");\\n        (uint8 playerIndex, BBPlayer storage player) = _getPlayer(playerAddr);\\n        require(player.state == PlayerState.JOINED, \\\"Player not in joined state\\\");\\n\\n        _removePlayerByIndex(playerIndex);\\n        _updateLastActivity();\\n\\n        IGameMain(gameMainAddr).userLeaveTable(playerAddr);\\n\\n        emit GameTableChanged(address(this));\\n    }\\n\\n    function _updateFinalSeed(bytes32 randomValue) internal {\\n        finalSeed = uint256(keccak256(abi.encodePacked(\\n            finalSeed,\\n            block.prevrandao,\\n            block.timestamp,\\n            msg.sender,\\n            randomValue\\n        )));\\n    }\\n\\n    function startGame(uint256 roomCardId, bytes32 randomValue) external payable onlyBanker nonReentrant {\\n        require(randomValue!= bytes32(0), \\\"Invalid random value\\\");\\n        // \\u5237\\u65b0\\u6e38\\u620f\\u6570\\u636e\\n        refreshConfig();\\n\\n        require(roomCardId != 0, \\\"Invalid room card params\\\");\\n        require(roomCardAddr != address(0), \\\"Invalid room card contract\\\");\\n        require(playerReadyCount == playerCount, \\\"Not all players ready\\\");\\n        require(state == GameState.WAITING, \\\"Game not in waiting state\\\");\\n        require(playerCount >= 2, \\\"Not enough players\\\");\\n\\n        // \\u5e84\\u5bb6\\u9700\\u8981\\u62bc\\u91d1\\n        require(msg.value == betAmount * 2, \\\"Insufficient funds\\\");\\n        bankerStakeAmount = betAmount * 2;\\n\\n        //\\u9a8c\\u8bc1\\u623f\\u5361\\n        IRoomCardNFT roomCard = IRoomCardNFT(roomCardAddr);\\n        require(roomCard.validateParams(roomCardId, playerCount), \\\"Invalid room card params\\\");\\n \\n        // \\u6d88\\u8017\\u623f\\u5361\\n        roomCard.consume(msg.sender, roomCardId);\\n        \\n        gameRound++;\\n\\n        _updateFinalSeed(randomValue);\\n\\n        _startFirstBetting();\\n    }\\n\\n    function _resetGame() internal {\\n        playerContinuedCount = 0;\\n        gameStartTimestamp = 0;\\n        gameEndTimestamp = 0;\\n        currentRoundDeadline = 0;\\n        liquidateDeadline = 0;\\n        bankerStakeAmount = 0;\\n        playerReadyCount = 0;\\n        totalPrizePool = 0;\\n        rewardAddr = address(0);\\n        rewardAmount = 0;\\n        dealerState.reset();\\n        for(uint i = 0; i < players.length; i++){\\n            if(players[i].isValid()){\\n                players[i].playerReset();\\n            }  \\n        }\\n    }\\n\\n    function _canSettleGame() internal view returns (bool) {\\n        if(state == GameState.WAITING || state == GameState.SETTLED || state == GameState.LIQUIDATED){\\n            return false;\\n        }\\n        if(state == GameState.ENDED){\\n            return true;\\n        }\\n\\n\\n        if(state == GameState.FIRST_BETTING || state == GameState.SECOND_BETTING){\\n            (uint8 foldedCount, uint8 totalActed) = _getPlayerActionCounts();\\n\\n            bool onlyOneLeft = playerContinuedCount == 1 && foldedCount == playerCount - 1;\\n            bool noOneLeft = foldedCount == playerCount;\\n            bool isDeadlinePassed = _isTimeOut();\\n            bool noOneActed = totalActed == 0;\\n            bool lessOneContinued = playerContinuedCount <= 1;  //\\u5c0f\\u4e8e\\u7b49\\u4e8e\\u4e00\\u4e2a\\u4eba\\u7ee7\\u7eed\\n\\n            if (onlyOneLeft || noOneLeft || (isDeadlinePassed && lessOneContinued) || (isDeadlinePassed && noOneActed)) {\\n                // \\u53ef\\u4ee5\\u7ed3\\u7b97\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev \\u4e0b\\u4e00\\u6b65\\n     */\\n    function nextStep(bytes32 randomValue) external onlyBanker nonReentrant {\\n        require(randomValue != bytes32(0), \\\"Invalid random value\\\");\\n        if(_canSettleGame()){\\n            _settleGame();\\n\\n            _updateFinalSeed(randomValue);\\n            _updateLastActivity();\\n            emit GameTableChanged(address(this));\\n            return;\\n        }\\n        \\n        (bool canMove, , string memory reason) = canMoveToNextStep();\\n        require(canMove, reason);\\n        if(state == GameState.FIRST_BETTING) {\\n            _startSecondBetting();\\n        }\\n        else if(state == GameState.SECOND_BETTING) {\\n            _endGame();\\n        }\\n        else if(state == GameState.SETTLED || state == GameState.LIQUIDATED) {\\n            _resetGame();\\n            setState(GameState.WAITING);\\n        }\\n\\n        // \\u5c06\\u6240\\u6709\\u4eba\\u8bbe\\u7f6e\\u4e3a\\u672a\\u64cd\\u4f5c\\u72b6\\u6001\\n        for(uint i = 0; i < players.length; i++){\\n            if(players[i].isValid()){\\n                players[i].hasActedThisRound = false;\\n            }\\n        }\\n        \\n        _updateFinalSeed(randomValue);\\n        _updateLastActivity();\\n        emit GameTableChanged(address(this));\\n    }\\n\\n    function _dealCardsByRound(uint8 round) internal {\\n        dealerState.initialize(finalSeed);\\n        if(round == 1){\\n            // \\u7b2c\\u4e00\\u8f6e\\u53d1\\u724c\\uff0c\\u6bcf\\u4e2a\\u73a9\\u5bb6\\u53d13\\u5f20\\u724c\\n            for(uint i = 0; i < players.length; i++){\\n                if(players[i].isValid()){\\n                    uint8[] memory newCards = dealerState.dealCardsByRoundForPlayer(players[i].addr, round);\\n                    for(uint j = 0; j < 3; j++){\\n                        players[i].cards[j] = newCards[j];\\n                    }\\n                }\\n            }\\n        }else{\\n            // \\u7b2c\\u4e8c\\u3001\\u4e09\\u8f6e\\u53d1\\u724c\\n            for(uint i = 0; i < players.length; i++){\\n                if(players[i].isValid() && players[i].state == PlayerState.ACTIVE){\\n                    uint8[] memory newCards = dealerState.dealCardsByRoundForPlayer(players[i].addr, round);\\n                    // \\u5408\\u5e76\\u7b2c\\u4e00\\u8f6e\\u548c\\u7b2c\\u4e8c\\u8f6e\\u7684\\u724c\\n                    for(uint j = 0; j < newCards.length; j++){\\n                        players[i].cards[j + round + 1] = newCards[j];\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev \\u68c0\\u67e5\\u63ed\\u793a\\u9636\\u6bb5\\u72b6\\u6001\\uff0c\\u5982\\u679c\\u6240\\u6709\\u73a9\\u5bb6\\u90fd\\u5df2\\u63ed\\u793a\\u6216\\u8d85\\u65f6\\uff0c\\u5b8c\\u6210\\u4f1a\\u8bdd\\u5e76\\u8fdb\\u5165\\u4e0b\\u6ce8\\u9636\\u6bb5\\n     */\\n    function _startFirstBetting() internal {\\n        // \\u5c06\\u6240\\u6709\\u73a9\\u5bb6\\u8bbe\\u7f6e\\u6210active\\u72b6\\u6001\\n        for (uint256 i = 0; i < players.length; i++) {\\n            BBPlayer storage player = players[i];\\n            if(player.isValid()){\\n                player.state = PlayerState.ACTIVE;\\n            }\\n        }\\n\\n        // \\u521d\\u59cb\\u5316\\u53d1\\u724c\\u72b6\\u6001\\n        dealerState.reset();\\n\\n        // \\u7b2c\\u4e00\\u8f6e\\u53d1\\u724c\\n        _dealCardsByRound(1);\\n\\n        // \\u8fdb\\u5165\\u7b2c\\u4e00\\u8f6e\\u4e0b\\u6ce8\\n        setState(GameState.FIRST_BETTING);\\n    }\\n\\n    function _getPlayerActionCounts() internal view returns (uint8, uint8){\\n        uint8 foldedCount = 0;\\n        uint8 actedCount = 0;\\n        for(uint i = 0; i < players.length; i++){\\n            BBPlayer storage player = players[i];\\n            if(player.isValid()){\\n                if(player.state == PlayerState.FOLDED){\\n                    foldedCount++;\\n                }\\n                if(player.hasActedThisRound){\\n                    actedCount++;\\n                }\\n            }\\n        }\\n\\n        return (foldedCount, actedCount);\\n    }\\n\\n    \\n\\n    function _startSecondBetting() internal {\\n        for(uint i = 0; i < players.length; i++){\\n            BBPlayer storage player = players[i];\\n            if(player.isValid() && !player.hasActedThisRound){\\n                player.playerFold();\\n            }\\n        }\\n\\n        _dealCardsByRound(2);\\n        setState(GameState.SECOND_BETTING);\\n        playerContinuedCount = 0;\\n    }\\n\\n    function _endGame() internal {\\n        for(uint i = 0; i < players.length; i++){\\n            BBPlayer storage player = players[i];\\n            if(player.isValid() && !player.hasActedThisRound){\\n                player.playerFold();\\n            }\\n        }\\n\\n        _dealCardsByRound(3);\\n        setState(GameState.ENDED);\\n        _settleGame();\\n    }\\n\\n    function _allPlayersActed() public view returns (bool){\\n        for(uint i = 0; i < players.length; i++){\\n            BBPlayer storage player = players[i];\\n            if(player.isValid()){\\n                if(player.state != PlayerState.FOLDED && !player.hasActedThisRound){\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function canMoveToNextStep() public view returns (bool canMove, string memory title, string memory reason) {\\n        if (state == GameState.LIQUIDATED) {\\n            return (true, \\\"Play Again\\\", \\\"Game has been liquidated\\\");\\n        }else if(state == GameState.SETTLED){\\n            return (true, \\\"Play Again\\\", \\\"\\\");\\n        }else if (state == GameState.ENDED) {\\n            return (true, \\\"Settle Game\\\", \\\"\\\");\\n        }else if (state == GameState.FIRST_BETTING || state == GameState.SECOND_BETTING) {\\n\\n            if (playerCount == 0) {\\n                // \\u5982\\u679c\\u6ca1\\u6709\\u73a9\\u5bb6\\uff0c\\u76f4\\u63a5\\u8fd4\\u56de\\n                return (false, \\\"\\\", \\\"No players in game\\\");\\n            }\\n\\n            bool isDeadlinePassed = _isTimeOut();\\n            bool allPlayersActed = _allPlayersActed();\\n\\n            if (_canSettleGame()) {\\n                return (true, \\\"Settle Game\\\", \\\"\\\");\\n            } else if (allPlayersActed || isDeadlinePassed) {\\n                return (true, \\\"Next Round\\\", \\\"\\\");\\n            } else {\\n                return (false, \\\"Next Round\\\", \\\"Waiting for players to act\\\");\\n            }\\n        }\\n\\n        return (false, \\\"\\\", \\\"Unknown state\\\");\\n    }\\n\\n\\n    function _isTimeOut() internal view returns (bool) {\\n        return currentRoundDeadline > 0 && block.timestamp > currentRoundDeadline;\\n    }\\n\\n    /**\\n     * @dev \\u73a9\\u5bb6\\u5f03\\u724c\\n     */\\n    function playerFold(bytes32 randomValue) external onlyPlayers nonReentrant{\\n        require(randomValue!= bytes32(0), \\\"Invalid random value\\\");\\n        require(state == GameState.FIRST_BETTING || state == GameState.SECOND_BETTING, \\\"Game not in playing state\\\");\\n        address playerAddr = msg.sender;\\n\\n        // \\u68c0\\u67e5\\u662f\\u5426\\u8d85\\u65f6\\n        require(!_isTimeOut(), \\\"action timeout\\\");\\n\\n        (, BBPlayer storage player) = _getPlayer(playerAddr);\\n        require(player.state == PlayerState.ACTIVE && player.hasActedThisRound == false, \\\"Player not in active state or has acted\\\");\\n\\n        _updateLastActivity();\\n        player.playerFold();\\n\\n        _updateFinalSeed(randomValue);\\n\\n        emit GameTableChanged(address(this));\\n    }\\n\\n    /**\\n     * @dev \\u73a9\\u5bb6\\u7ee7\\u7eed\\u6e38\\u620f\\n     */\\n    function playerContinue(bytes32 randomValue) external payable onlyPlayers nonReentrant{\\n        require(randomValue!= bytes32(0), \\\"Invalid random value\\\");\\n        require(state == GameState.FIRST_BETTING || state == GameState.SECOND_BETTING, \\\"Game not in playing state\\\");\\n        address playerAddr = msg.sender;\\n\\n        uint256 needBetAmount = 0;\\n\\n        if(state == GameState.FIRST_BETTING){\\n            needBetAmount = betAmount * firstBetX;\\n        }else{\\n            needBetAmount = betAmount * secondBetX;\\n        }\\n\\n        require(msg.value == needBetAmount, \\\"Insufficient funds\\\");\\n\\n        // \\u68c0\\u67e5\\u662f\\u5426\\u8d85\\u65f6\\n        require(!_isTimeOut(), \\\"action timeout\\\");\\n\\n        (, BBPlayer storage player) = _getPlayer(playerAddr);\\n        require(player.state == PlayerState.ACTIVE && player.hasActedThisRound == false, \\\"Player not in active state or has acted\\\");\\n\\n        player.playerContinue(needBetAmount);\\n        playerContinuedCount++;\\n        totalPrizePool += needBetAmount;\\n\\n        _updateLastActivity();\\n\\n        _updateFinalSeed(randomValue);\\n\\n        emit GameTableChanged(address(this));\\n    }\\n\\n    function _gameTimeout() internal view returns (bool)  {\\n        require(state == GameState.FIRST_BETTING || state == GameState.SECOND_BETTING, \\\"Game not in playing state\\\"); \\n\\n        // \\u68c0\\u67e5\\u662f\\u5426\\u8d85\\u65f6\\n        return block.timestamp > lastActivityTimestamp + tableInactiveTimeout;\\n    }\\n\\n    /**\\n     * @dev \\u73a9\\u5bb6\\u7ed3\\u7b97\\u6e38\\u620f\\uff0c\\u5982\\u679c\\u5e84\\u5bb6\\u6ca1\\u7ed3\\u7b97\\u7684\\u8bdd\\n     */\\n    function playerSettle() external payable onlyPlayers nonReentrant{\\n        require(_gameTimeout(), \\\"Game not timeout\\\");\\n\\n        _settleGame();\\n    }\\n\\n    function _settleGame() internal {\\n        setState(GameState.SETTLED);\\n\\n        gameEndTimestamp = block.timestamp;\\n\\n\\n        bool noOneContinued = playerContinuedCount == 0;\\n\\n        // \\u8ba1\\u7b97\\u8d39\\u7528\\n        uint256 bankerFee = (totalPrizePool * bankerFeePercent) / 100;\\n        if(noOneContinued){\\n            // \\u5982\\u679c\\u6ca1\\u6709\\u4eba\\u7ee7\\u7eed\\uff0c\\u5e84\\u5bb6\\u4e0d\\u6536\\u53d6\\u8d39\\u7528\\n            bankerFee = 0;\\n        }\\n        uint256 remainingPrizePool = totalPrizePool - bankerFee;\\n\\n        uint256 bankerTotal = bankerFee + bankerStakeAmount;\\n        bankerStakeAmount = 0;\\n\\n        // \\u5982\\u679c\\u53ea\\u6709\\u4e00\\u4e2a\\u73a9\\u5bb6\\u7ee7\\u7eed\\uff0c\\u5219\\u8be5\\u73a9\\u5bb6\\u83b7\\u80dc\\n        if (playerContinuedCount == 1) {\\n            _settleOneContinuedPlayer(remainingPrizePool);\\n        }\\n        // \\u5982\\u679c\\u6ca1\\u6709\\u4eba\\u7ee7\\u7eed\\uff0c\\u5219\\u6bcf\\u4e2a\\u4eba\\u62ff\\u56de\\u81ea\\u5df1\\u7684\\u94b1\\n        else if (noOneContinued) {\\n            _settleAllFolded();\\n        }\\n        // \\u6b63\\u5e38\\u6bd4\\u724c\\n        else {\\n            _settleNormalGame(remainingPrizePool);\\n        }\\n\\n        // \\u7edf\\u4e00\\u5904\\u7406\\u5e84\\u5bb6\\u8d39\\u7528\\u8f6c\\u8d26\\uff0c\\u5e84\\u5bb6\\u62bd\\u6210+\\u5e84\\u5bb6\\u62bc\\u91d1\\n        if (bankerTotal > 0) {\\n            totalIncome += bankerFee;\\n            (bool success, ) = payable(bankerAddr).call{value: bankerTotal}(\\\"\\\");\\n            require(success, \\\"transfer to banker failed\\\");\\n        }\\n\\n        // \\u5982\\u679c\\u8bbe\\u7f6e\\u4e86\\u5956\\u52b1\\u6c60\\uff0c\\u5c1d\\u8bd5\\u5206\\u914d\\u5956\\u52b1\\n        if (rewardPoolAddr != address(0) && rewardPoolId != 0) {\\n            address[] memory playerAddresses = getPlayerAddresses();\\n            IRewardPool rewardPool = IRewardPool(rewardPoolAddr);\\n            try rewardPool.tryDistributeReward(rewardPoolId, playerAddresses, finalSeed) returns (address winAddr, uint256 winAmount){\\n                if(winAddr != address(0)){\\n                    // \\u6709\\u4eba\\u83b7\\u5956\\uff0c\\u8bbe\\u7f6e\\u83b7\\u5956\\u7684\\u4eba\\u4fe1\\u606f\\n                    rewardAddr = winAddr;\\n                    rewardAmount = winAmount;\\n                }\\n            } catch {\\n            }\\n        }\\n\\n        emit GameTableChanged(address(this));\\n    }\\n\\n    /**\\n     * @dev \\u5904\\u7406\\u53ea\\u6709\\u4e00\\u4e2a\\u73a9\\u5bb6\\u7ee7\\u7eed\\u7684\\u60c5\\u51b5\\n     */\\n    function _settleOneContinuedPlayer(uint256 remainingPrizePool) internal {\\n        // \\u51c6\\u5907\\u6e38\\u620f\\u7ed3\\u679c\\u6570\\u636e\\n        address[] memory winnerAddrs = new address[](1);\\n        uint256[] memory playerBets = new uint256[](playerCount);\\n        uint8[5][] memory playerCards = new uint8[5][](playerCount);\\n        address[] memory playerAddresses = new address[](playerCount);\\n        uint256 winnerCount = 0;\\n\\n        // \\u627e\\u51fa\\u7ee7\\u7eed\\u7684\\u90a3\\u4e2a\\u73a9\\u5bb6\\n        address continuedPlayer = address(0);\\n        uint8 index = 0;\\n        for (uint i = 0; i < players.length; i++) {\\n            BBPlayer storage player = players[i];\\n            if (player.isValid()) {\\n                // \\u627e\\u51fa\\u7ee7\\u7eed\\u7684\\u73a9\\u5bb6\\n                if (player.state == PlayerState.ACTIVE &&\\n                    player.hasActedThisRound) {\\n                    continuedPlayer = player.addr;\\n                    winnerAddrs[winnerCount] = player.addr;\\n                    player.isWinner = true;\\n                    winnerCount++;\\n                }\\n\\n                playerBets[index] = player.totalBet;\\n                playerCards[index] = player.cards;\\n                playerAddresses[index] = player.addr;\\n\\n                index++;\\n            }\\n        }\\n\\n        // \\u5c06\\u5269\\u4f59\\u5956\\u6c60\\u7ed9\\u83b7\\u80dc\\u8005\\n        if (continuedPlayer != address(0)) {\\n            (bool success, ) = payable(continuedPlayer).call{value: remainingPrizePool}(\\\"\\\");\\n            require(success, \\\"transfer to winners failed\\\");\\n        }\\n\\n        emit CreateGameHistory(address(this), gameRound, gameStartTimestamp, gameEndTimestamp, playerAddresses, winnerAddrs, playerBets, playerCards);\\n    }\\n\\n    /**\\n     * @dev \\u5904\\u7406\\u6240\\u6709\\u73a9\\u5bb6\\u90fd\\u5f03\\u724c\\u7684\\u60c5\\u51b5\\n     */\\n    function _settleAllFolded() internal {\\n        // \\u521b\\u5efa\\u4e34\\u65f6\\u6570\\u7ec4\\u6765\\u5b58\\u50a8\\u9700\\u8981\\u8fd4\\u8fd8\\u8d44\\u91d1\\u7684\\u73a9\\u5bb6\\u548c\\u91d1\\u989d\\n        address[] memory refundAddresses = new address[](playerCount);\\n        uint256[] memory refundAmounts = new uint256[](playerCount);\\n        uint256[] memory playerBets = new uint256[](playerCount);\\n        uint8[5][] memory playerCards = new uint8[5][](playerCount);\\n        address[] memory playerAddresses = new address[](playerCount);\\n        address[] memory winnerAddrs = new address[](0);\\n        uint256 refundCount = 0;\\n\\n        // \\u6536\\u96c6\\u6240\\u6709\\u73a9\\u5bb6\\u6570\\u636e\\u5e76\\u8ba1\\u7b97\\u9700\\u8981\\u8fd4\\u8fd8\\u7684\\u91d1\\u989d\\n        uint8 index = 0;\\n        for (uint i = 0; i < players.length; i++) {\\n            if (players[i].isValid()) {\\n                BBPlayer storage player = players[i];\\n\\n                // \\u8ba1\\u7b97\\u9700\\u8981\\u8fd4\\u8fd8\\u7684\\u91d1\\u989d\\uff08\\u73a9\\u5bb6\\u7684\\u6240\\u6709\\u62bc\\u6ce8\\uff09\\n                uint256 refundAmount = player.totalBet;\\n                if (refundAmount > 0) {\\n                    refundAddresses[refundCount] = player.addr;\\n                    refundAmounts[refundCount] = refundAmount;\\n                    refundCount++;\\n                }\\n\\n                playerBets[index] = players[i].totalBet;\\n                playerCards[index] = players[i].cards;\\n                playerAddresses[index] = players[i].addr;\\n                index++;\\n            }        \\n        }\\n\\n        // \\u8fd4\\u8fd8\\u6bcf\\u4e2a\\u73a9\\u5bb6\\u7684\\u62bc\\u6ce8\\n        for (uint i = 0; i < refundCount; i++) {\\n            (bool success, ) = payable(refundAddresses[i]).call{value: refundAmounts[i]}(\\\"\\\");\\n            require(success, \\\"refund failed\\\");\\n        }\\n\\n        emit CreateGameHistory(address(this), gameRound, gameStartTimestamp, gameEndTimestamp, playerAddresses, winnerAddrs, playerBets, playerCards);\\n    }\\n\\n\\n    /**\\n     * @dev \\u5904\\u7406\\u6b63\\u5e38\\u6bd4\\u724c\\u7684\\u60c5\\u51b5\\n     */\\n    function _settleNormalGame(uint256 remainingPrizePool) internal {\\n        CardType _maxCardType = CardType.NONE;\\n\\n        // \\u51c6\\u5907\\u6e38\\u620f\\u7ed3\\u679c\\u6570\\u636e\\n        address[] memory winnerAddrs = new address[](playerCount);\\n        uint256[] memory playerBets = new uint256[](playerCount);\\n        uint8[5][] memory playerCards = new uint8[5][](playerCount);\\n        address[] memory playerAddresses = new address[](playerCount);\\n        uint256 winnerCount = 0;\\n\\n\\n        // \\u8ba1\\u7b97\\u6bcf\\u4e2a\\u73a9\\u5bb6\\u7684\\u724c\\u578b\\n        uint8 index = 0;\\n        for (uint i = 0; i < players.length; i++) {\\n            BBPlayer storage player = players[i];\\n            if (player.isValid()) {\\n                player.cardType = BBCardUtils.calculateCardType(player.cards);\\n                // \\u66f4\\u65b0\\u6700\\u5927\\u724c\\u578b\\n                if (uint8(player.cardType) > uint8(_maxCardType)) {\\n                    _maxCardType = player.cardType;\\n                }\\n\\n                playerBets[index] = player.totalBet;\\n                playerCards[index] = player.cards;\\n                playerAddresses[index] = player.addr;\\n                index++;\\n            }\\n        }\\n\\n        // \\u5982\\u679c\\u6240\\u6709\\u73a9\\u5bb6\\u90fd\\u6ca1\\u6709\\u725b\\u724c\\u578b\\uff0c\\u5219\\u6bd4\\u8f83\\u6700\\u5927\\u724c\\n        if (_maxCardType == CardType.NO_BULL) {\\n            (winnerAddrs, winnerCount) = _settleNormalGameWithNoBull();\\n        } else {\\n            // \\u627e\\u51fa\\u83b7\\u80dc\\u8005\\uff08\\u6709\\u725b\\u724c\\u578b\\u7684\\u60c5\\u51b5\\uff09\\n            for (uint i = 0; i < players.length; i++) {\\n                BBPlayer storage player = players[i];\\n                if (player.isValid()) {\\n                    // \\u5982\\u679c\\u662f\\u83b7\\u80dc\\u8005\\uff0c\\u6dfb\\u52a0\\u5230\\u83b7\\u80dc\\u8005\\u6570\\u7ec4\\n                    if (player.cardType == _maxCardType) {\\n                        winnerAddrs[winnerCount] = player.addr;\\n                        player.isWinner = true;\\n                        winnerCount++;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // \\u8c03\\u6574\\u83b7\\u80dc\\u8005\\u6570\\u7ec4\\u5927\\u5c0f\\n        assembly (\\\"memory-safe\\\")  {\\n            mstore(winnerAddrs, winnerCount)\\n        }\\n\\n\\n        // \\u5206\\u914d\\u5956\\u91d1\\u7ed9\\u83b7\\u80dc\\u8005\\n        if (winnerCount > 0) {\\n            // \\u6bcf\\u4e2a\\u83b7\\u80dc\\u8005\\u5e94\\u5f97\\u7684\\u5956\\u91d1\\n            uint256 prizePerWinner = remainingPrizePool / winnerCount;\\n\\n            // \\u5206\\u914d\\u5956\\u91d1\\u7ed9\\u6bcf\\u4e2a\\u83b7\\u80dc\\u8005\\n            for (uint i = 0; i < winnerCount; i++) {\\n                address winnerAddr = winnerAddrs[i];\\n                (bool success, ) = payable(winnerAddr).call{value: prizePerWinner}(\\\"\\\");\\n                require(success, \\\"transfer to winners failed\\\");\\n            }\\n\\n            // \\u5904\\u7406\\u53ef\\u80fd\\u7684\\u820d\\u5165\\u8bef\\u5dee\\uff0c\\u5c06\\u5269\\u4f59\\u7684\\u5c11\\u91cf\\u5956\\u91d1\\u7ed9\\u7b2c\\u4e00\\u4e2a\\u83b7\\u80dc\\u8005\\n            uint256 remainingPrize = remainingPrizePool - (prizePerWinner * winnerCount);\\n            if (remainingPrize > 0) {\\n                (bool success, ) = payable(winnerAddrs[0]).call{value: remainingPrize}(\\\"\\\");\\n                require(success, \\\"transfer to winners failed\\\");\\n            }\\n        }\\n\\n        emit CreateGameHistory(address(this), gameRound, gameStartTimestamp, gameEndTimestamp, playerAddresses, winnerAddrs, playerBets, playerCards);\\n    }\\n\\n    /**\\n     * @dev \\u5904\\u7406\\u6ca1\\u6709\\u725b\\u724c\\u578b\\u7684\\u60c5\\u51b5\\n     */\\n    function _settleNormalGameWithNoBull() internal view returns (address[] memory, uint256){\\n        uint8 maxCard = 0;\\n        uint256 winnerCount = 0;\\n        address[] memory winnerAddrs = new address[](playerCount);\\n\\n        // \\u5148\\u627e\\u51fa\\u6240\\u6709\\u73a9\\u5bb6\\u4e2d\\u7684\\u6700\\u5927\\u724c\\n        for (uint i = 0; i < players.length; i++) {\\n            BBPlayer storage player = players[i];\\n            if(player.isValid()){\\n                // \\u627e\\u51fa\\u73a9\\u5bb6\\u4e94\\u5f20\\u724c\\u4e2d\\u7684\\u6700\\u5927\\u724c\\n                uint8 playerMaxCard = 0;\\n                for (uint j = 0; j < 5; j++) {\\n                    uint8 cardValue = player.cards[j] % 13;\\n                    // \\u4fee\\u6b63\\uff1aA\\u662f\\u6700\\u5c0f\\u7684(\\u503c\\u4e3a1)\\uff0cK\\u662f\\u6700\\u5927\\u7684(\\u503c\\u4e3a13)\\n                    if (cardValue == 0) cardValue = 1; // A\\u7684\\u503c\\u4e3a1\\n                    if (cardValue > playerMaxCard) {\\n                        playerMaxCard = cardValue;\\n                    }\\n                }\\n\\n                // \\u66f4\\u65b0\\u5168\\u5c40\\u6700\\u5927\\u724c\\n                if (playerMaxCard > maxCard) {\\n                    maxCard = playerMaxCard;\\n                }\\n            }\\n        }\\n\\n        // \\u627e\\u51fa\\u62e5\\u6709\\u6700\\u5927\\u724c\\u7684\\u73a9\\u5bb6\\n        for (uint i = 0; i < players.length; i++) {\\n            BBPlayer storage player = players[i];\\n            if(player.isValid()){\\n                // \\u68c0\\u67e5\\u73a9\\u5bb6\\u662f\\u5426\\u6709\\u6700\\u5927\\u724c\\n                uint8 playerMaxCard = 0;\\n                for (uint j = 0; j < 5; j++) {\\n                    uint8 cardValue = player.cards[j] % 13;\\n                    // \\u4fee\\u6b63\\uff1aA\\u662f\\u6700\\u5c0f\\u7684(\\u503c\\u4e3a1)\\uff0cK\\u662f\\u6700\\u5927\\u7684(\\u503c\\u4e3a13)\\n                    if (cardValue == 0) cardValue = 1; // A\\u7684\\u503c\\u4e3a1\\n                    if (cardValue > playerMaxCard) {\\n                        playerMaxCard = cardValue;\\n                    }\\n                }\\n\\n                if (playerMaxCard == maxCard) {\\n                    winnerAddrs[winnerCount] = player.addr;\\n                    winnerCount++;\\n                }\\n            }  \\n        }\\n\\n        // \\u8c03\\u6574\\u83b7\\u80dc\\u8005\\u6570\\u7ec4\\u5927\\u5c0f\\n        assembly (\\\"memory-safe\\\")  {\\n            mstore(winnerAddrs, winnerCount)\\n        }\\n\\n        return (winnerAddrs, winnerCount);\\n    }\\n\\n    /**\\n     * @dev \\u6e05\\u7b97\\u4e0d\\u6d3b\\u8dc3\\u7684\\u6e38\\u620f\\u684c\\n     * \\u6b64\\u51fd\\u6570\\u6765\\u6e05\\u7b97\\u957f\\u65f6\\u95f4\\u4e0d\\u6d3b\\u8dc3\\u7684\\u6e38\\u620f\\u684c\\n     * \\u5e84\\u5bb6\\u7684\\u62bc\\u91d1\\u5c06\\u88ab\\u5206\\u914d\\u7ed9\\u73a9\\u5bb6\\u548c\\u6e05\\u7b97\\u4eba\\n     */\\n    function liquidateGame() external onlyPlayers nonReentrant {\\n        // \\u68c0\\u67e5\\u6e38\\u620f\\u684c\\u662f\\u5426\\u8d85\\u65f6\\n        require(msg.sender != bankerAddr, \\\"Banker cannot liquidate\\\");\\n        require(state == GameState.FIRST_BETTING || state == GameState.SECOND_BETTING || state == GameState.ENDED, \\\"Table not in gaming\\\");\\n\\n        require(block.timestamp > liquidateDeadline, \\\"Game not timeout\\\");\\n\\n        setState(GameState.LIQUIDATED);\\n\\n        uint256 bankerFunds = bankerStakeAmount;\\n        // \\u8ba1\\u7b97\\u6709\\u591a\\u5c11\\u73a9\\u5bb6\\u53ef\\u4ee5\\u5206\\u914d\\u5956\\u52b1\\uff08\\u4e0d\\u5305\\u62ec\\u5e84\\u5bb6\\uff09\\n        uint8 eligiblePlayerCount = 0;\\n        for(uint8 i = 0; i < players.length; i++){\\n            BBPlayer storage player = players[i];\\n            if(player.isValid() && player.addr != bankerAddr){\\n                eligiblePlayerCount++;\\n            }\\n            if(player.addr == bankerAddr){\\n                bankerFunds += player.totalBet;\\n            }\\n        }\\n\\n        // \\u6e05\\u7b97\\u4eba\\u7684\\u5956\\u52b1 (\\u4ece\\u5e84\\u5bb6\\u62bc\\u91d1\\u548c\\u73a9\\u6e38\\u620f\\u7684\\u8d44\\u91d1\\u4e2d\\u6536\\u53d6)\\n        uint256 liquidatorReward = bankerFunds * liquidatorFeePercent / 100;\\n\\n        // \\u5269\\u4f59\\u7684\\u5e84\\u5bb6\\u62bc\\u91d1\\u5e73\\u5747\\u5206\\u914d\\u7ed9\\u6240\\u6709\\u73a9\\u5bb6\\n        uint256 remainingBankerBet = bankerFunds - liquidatorReward;\\n        uint256 playerRewardTotal = 0;\\n\\n        \\n\\n        // \\u521b\\u5efa\\u4e34\\u65f6\\u6570\\u7ec4\\u5b58\\u50a8\\u9700\\u8981\\u652f\\u4ed8\\u7684\\u5730\\u5740\\u548c\\u91d1\\u989d\\n        address[] memory paymentAddresses = new address[](eligiblePlayerCount);\\n        uint256[] memory paymentAmounts = new uint256[](eligiblePlayerCount);\\n        uint256 paymentCount = 0;\\n\\n\\n        // \\u8ba1\\u7b97\\u6bcf\\u4e2a\\u73a9\\u5bb6\\u7684\\u5956\\u52b1\\n        uint256 rewardPerPlayer = remainingBankerBet / eligiblePlayerCount;\\n\\n        // \\u8ba1\\u7b97\\u6bcf\\u4e2a\\u73a9\\u5bb6\\u5e94\\u5f97\\u7684\\u91d1\\u989d\\n        for (uint i = 0; i < players.length; i++) {\\n            BBPlayer storage player = players[i];\\n            if(player.isValid() && player.addr != bankerAddr){\\n                uint256 totalPayment = 0;\\n\\n                // \\u8ba1\\u7b97\\u73a9\\u5bb6\\u5e94\\u5f97\\u7684\\u603b\\u91d1\\u989d\\uff08\\u62bc\\u91d1 + \\u5956\\u52b1\\uff09\\n                totalPayment += player.totalBet;\\n\\n                // \\u6dfb\\u52a0\\u5956\\u52b1\\u91d1\\u989d\\n                totalPayment += rewardPerPlayer;\\n\\n                // \\u8bb0\\u5f55\\u9700\\u8981\\u652f\\u4ed8\\u7684\\u91d1\\u989d\\n                if (totalPayment > 0) {\\n                    paymentAddresses[paymentCount] = player.addr;\\n                    paymentAmounts[paymentCount] = totalPayment;\\n                    paymentCount++;\\n                }\\n\\n                playerRewardTotal += rewardPerPlayer;\\n            }\\n        }\\n        \\n\\n        // \\u5904\\u7406\\u53ef\\u80fd\\u7684\\u820d\\u5165\\u8bef\\u5dee\\n        uint256 actualDistributed = playerRewardTotal + liquidatorReward;\\n        if (actualDistributed < bankerFunds) {\\n            liquidatorReward += (bankerFunds - actualDistributed);\\n        }\\n\\n        // _resetGame();\\n        gameLiquidatedCount++;\\n\\n\\n        // \\u6240\\u6709\\u72b6\\u6001\\u66f4\\u65b0\\u5b8c\\u6210\\u540e\\uff0c\\u8fdb\\u884c\\u8f6c\\u8d26\\u64cd\\u4f5c\\n        // \\u7136\\u540e\\u8fdb\\u884c\\u5176\\u4ed6\\u8f6c\\u8d26\\n        for (uint i = 0; i < paymentCount; i++) {\\n            (bool otherSuccess, ) = payable(paymentAddresses[i]).call{value: paymentAmounts[i]}(\\\"\\\");\\n            require(otherSuccess, \\\"transfer to players failed\\\");\\n        }\\n\\n        // \\u652f\\u4ed8\\u6e05\\u7b97\\u4eba\\u5956\\u52b1\\n        (bool liquidatorSuccess, ) = payable(msg.sender).call{value: liquidatorReward}(\\\"\\\");\\n        require(liquidatorSuccess, \\\"transfer to liquidator failed\\\");\\n\\n        emit GameTableChanged(address(this));\\n    }\\n\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u6e38\\u620f\\u72b6\\u6001\\n     */\\n    function setState(GameState _state) internal {\\n        state = _state;\\n\\n        // \\u5982\\u679c\\u8fdb\\u5165\\u4e0b\\u6ce8\\u9636\\u6bb5\\uff0c\\u4e3a\\u6240\\u6709\\u73a9\\u5bb6\\u8bbe\\u7f6e\\u64cd\\u4f5c\\u622a\\u6b62\\u65f6\\u95f4\\n        if (_state == GameState.FIRST_BETTING || _state == GameState.SECOND_BETTING) {\\n            currentRoundDeadline = block.timestamp + playerTimeout;\\n            liquidateDeadline = block.timestamp + tableInactiveTimeout;\\n        }\\n        if(_state == GameState.ENDED){\\n            liquidateDeadline = block.timestamp + tableInactiveTimeout;\\n        }\\n\\n        _updateLastActivity(); // \\u66f4\\u65b0\\u6700\\u540e\\u6d3b\\u52a8\\u65f6\\u95f4\\n\\n        emit GameTableChanged(address(this));\\n    }\\n\\n    // \\u83b7\\u53d6\\u6240\\u6709\\u73a9\\u5bb6\\u6570\\u636e\\n    function getAllPlayerData() external view returns (BBPlayer[] memory) {\\n        BBPlayer[] memory playerData = new BBPlayer[](playerCount);\\n        uint8 index = 0;\\n        for (uint i = 0; i < players.length; i++) {\\n            if(players[i].isValid()){\\n                playerData[index] = players[i];\\n                playerData[index].cardType = BBCardUtils.calculateCardType(players[i].cards);\\n                index++;\\n            }\\n        }\\n\\n        return playerData;\\n    }\\n\\n\\n    // \\u83b7\\u53d6\\u5355\\u4e2a\\u73a9\\u5bb6\\u6570\\u636e\\n    function getPlayerData(address playerAddr) external view returns (BBPlayer memory) {\\n        (, BBPlayer storage player) = _getPlayer(playerAddr);\\n        BBPlayer memory playerData = player;\\n        playerData.cardType = BBCardUtils.calculateCardType(player.cards);\\n        return playerData;\\n    }\\n\\n\\n    function getTableInfo() external view returns (GameTableView memory) {\\n        IRewardPool rewardPool = IRewardPool(rewardPoolAddr);\\n        (bool canNext, string memory nextTitle, string memory nextReason) = canMoveToNextStep();\\n        // \\u521b\\u5efa\\u4e00\\u4e2a\\u7a7a\\u7684 RewardPoolInfo \\u7ed3\\u6784\\u4f53\\n        RewardPoolInfo memory emptyRewardPoolInfo;\\n        if (rewardPoolId != 0) {\\n            emptyRewardPoolInfo = rewardPool.getRewardPoolInfo(bankerAddr, rewardPoolId);\\n        }\\n\\n        return GameTableView({\\n            // balance: address(this).balance / 1 ether,\\n            active: active,\\n            gameRound: gameRound,\\n            gameLiquidatedCount: gameLiquidatedCount,\\n            tableAddr: address(this),\\n            tableId: tableId,\\n            tableName: tableName,\\n            bankerAddr: bankerAddr,\\n            betAmount: betAmount,\\n            bankerFeePercent: bankerFeePercent,\\n            totalPrizePool: totalPrizePool,\\n            playerCount: playerCount,\\n            maxPlayers: maxPlayers,\\n            creationTimestamp: creationTimestamp,\\n            liquidateDeadline: liquidateDeadline,\\n            state: state,\\n            liquidatorFeePercent: liquidatorFeePercent,\\n            playerContinuedCount: playerContinuedCount,\\n            playerReadyCount: playerReadyCount,\\n            playerAddresses: getPlayerAddresses(),\\n            currentRoundDeadline: currentRoundDeadline,\\n            playerTimeout: playerTimeout,\\n            tableInactiveTimeout: tableInactiveTimeout,\\n            lastActivityTimestamp: lastActivityTimestamp,\\n            rewardPoolId: rewardPoolId,\\n            rewardPoolInfo: emptyRewardPoolInfo, // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\n            implementationVersion: implementationVersion,\\n            firstBetX: firstBetX,\\n            secondBetX: secondBetX,\\n            bankerStakeAmount: bankerStakeAmount,\\n            canNext: canNext,\\n            nextTitle: nextTitle,\\n            nextReason: nextReason,\\n            rewardAddr: rewardAddr,\\n            rewardAmount: rewardAmount,\\n            chatGroupId: chatGroupId\\n        });\\n    }\\n\\n    function getTableInfoShort() external view returns (GameTableInfoShort memory) {\\n        IRewardPool rewardPool = IRewardPool(rewardPoolAddr);\\n\\n        // \\u521b\\u5efa\\u4e00\\u4e2a\\u7a7a\\u7684 RewardPoolInfo \\u7ed3\\u6784\\u4f53\\n        RewardPoolInfo memory emptyRewardPoolInfo;\\n        if (rewardPoolId != 0) {\\n            emptyRewardPoolInfo = rewardPool.getRewardPoolInfo(bankerAddr, rewardPoolId);\\n        }\\n\\n        return GameTableInfoShort({\\n            active: active,\\n            gameRound: gameRound,\\n            gameLiquidatedCount: gameLiquidatedCount,\\n            tableAddr: address(this),\\n            tableId: tableId,\\n            tableName: tableName,\\n            bankerAddr: bankerAddr,\\n            betAmount: betAmount,\\n            bankerFeePercent: bankerFeePercent,\\n            playerCount: playerCount,\\n            maxPlayers: maxPlayers,\\n            state: state,\\n            lastActivityTimestamp: lastActivityTimestamp,\\n            rewardPoolId: rewardPoolId,\\n            rewardPoolInfo: emptyRewardPoolInfo // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\n        });\\n    }\\n\\n    function isPlayer(address playerAddr) external view returns (bool) {\\n        _getPlayer(playerAddr);\\n        return true;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x2256de31de859c7360606a473cbb5c646b55b29dae3afbe3e0a6f36bc4ff45ee\",\"license\":\"MIT\"},\"contracts/BBInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\nimport \\\"./BBStructs.sol\\\";\\r\\n\\r\\ninterface IGameTableFactory {\\r\\n    function createGameTable(\\r\\n        uint256 tableId,\\r\\n        string memory tableName,\\r\\n        address bankerAddr,\\r\\n        uint256 betAmount,\\r\\n        uint8 maxPlayers,\\r\\n        address gameMainAddr,\\r\\n        uint8 bankerFeePercent,\\r\\n        uint8 firstRaise,\\r\\n        uint8 secondRaise,\\r\\n        uint256 rewardPoolId\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IGameTableImplementation {\\r\\n    function bankerAddr() external view returns (address);\\r\\n    function getTableInfo() external view returns (GameTableView memory);\\r\\n    function getTableInfoShort() external view returns (GameTableInfoShort memory);\\r\\n    function lastActivityTimestamp() external view returns (uint256);\\r\\n    function state() external view returns (GameState);\\r\\n    function rewardPoolId() external view returns (uint256);\\r\\n    function initialize(\\r\\n        uint256 _tableId,\\r\\n        string memory _tableName,\\r\\n        address _bankerAddr,\\r\\n        uint256 _betAmount,\\r\\n        uint8 _maxPlayers,\\r\\n        address _gameMainAddr,\\r\\n        uint8 _bankerFeePercent,\\r\\n        uint8 _firstRaise,\\r\\n        uint8 _secondRaise,\\r\\n        uint256 _rewardPoolId,\\r\\n        uint256 _implementationVersion\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IGameMain {\\r\\n    function isValidGameTable(address) external view returns (bool);\\r\\n    function liquidatorFeePercent() external view returns (uint256);\\r\\n    function playerTimeout() external view returns (uint256);\\r\\n    function tableInactiveTimeout() external view returns (uint256);\\r\\n    function rewardPoolAddress() external view returns (address);\\r\\n    function roomCardAddress() external view returns (address);\\r\\n    function roomLevelAddress() external view returns (address);\\r\\n    function getGameConfig() external view returns (GameConfig memory);\\r\\n    function rewardPoolIsInUse(address, uint256) external view returns (bool);\\r\\n    function userJoinTable(address userAddr) external;\\r\\n    function userLeaveTable(address userAddr) external;\\r\\n}\\r\\n\\r\\ninterface IRewardPool{\\r\\n    function tryDistributeReward(uint256 _poolId, address[] calldata _players, uint256 finalSeed) external  returns (address, uint256);\\r\\n    function isBankerPool(address, uint256) external view returns (bool);\\r\\n    function getRewardPoolInfo(address, uint256) external view returns (RewardPoolInfo memory);\\r\\n}\\r\\n\\r\\ninterface IRoomCardNFT{\\r\\n    function validateParams(uint256, uint8) external view returns (bool);\\r\\n    function hasNft(address) external view returns (bool);\\r\\n    function consume(address, uint256) external;\\r\\n}\",\"keccak256\":\"0x31bc037d6f22f39b622e76414b6b77535958a3a9c37b07cce084179c2e9ea136\",\"license\":\"MIT\"},\"contracts/BBPlayer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\n\\r\\nstruct BBPlayer {\\r\\n    address addr;\\r\\n    PlayerState state;\\r\\n\\r\\n    uint256 totalBet;\\r\\n\\r\\n    bool hasActedThisRound;   // \\u672c\\u8f6e\\u662f\\u5426\\u5df2\\u64cd\\u4f5c\\r\\n    bool isWinner;   // \\u662f\\u5426\\u4e3a\\u8d62\\u5bb6\\r\\n\\r\\n    uint8[5] cards;\\r\\n    CardType cardType;\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\nlibrary BBPlayerLib {\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u51c6\\u5907\\r\\n     */\\r\\n    function playerReady(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.READY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u53d6\\u6d88\\u51c6\\u5907\\r\\n     */\\r\\n    function playerUnready(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u52a0\\u5165\\r\\n     */\\r\\n    function playerJoin(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u5f03\\u724c\\r\\n     */\\r\\n    function playerFold(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.FOLDED;\\r\\n        self.hasActedThisRound = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u7ee7\\u7eed\\u6e38\\u620f\\r\\n     */\\r\\n    function playerContinue(BBPlayer storage self, uint256 additionalBet) internal {\\r\\n        self.totalBet += additionalBet;\\r\\n        self.state = PlayerState.ACTIVE;\\r\\n        self.hasActedThisRound = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u662f\\u5426\\u6709\\u6548\\r\\n     */\\r\\n    function isValid(BBPlayer storage self) internal view returns (bool) {\\r\\n        return self.addr != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u91cd\\u7f6e\\u73a9\\u5bb6\\u6570\\u636e\\r\\n     */\\r\\n    function playerReset(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n        self.hasActedThisRound = false;\\r\\n        self.totalBet = 0;\\r\\n        self.isWinner = false;\\r\\n        self.cards = [0, 0, 0, 0, 0];\\r\\n        self.cardType = CardType.NONE;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf7d1ee4658a50be6690b6c085733ceb592f91baa15b7b7fb5e27a30e1ae7e215\",\"license\":\"UNLICENSED\"},\"contracts/BBStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\nimport \\\"./BBPlayer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BBStructs\\r\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u7ed3\\u6784\\u4f53\\u5b9a\\u4e49\\r\\n */\\r\\n\\r\\nstruct GameConfig {\\r\\n    uint8 maxRoomCount;\\r\\n    uint8 maxPlayers;\\r\\n    uint8 maxJoinTablesCount;\\r\\n    uint8 maxBankerFeePercent;\\r\\n    uint256 playerTimeout;\\r\\n    uint256 tableInactiveTimeout;\\r\\n    uint8 liquidatorFeePercent;\\r\\n    address gameMainAddress;\\r\\n    address rewardPoolAddress;\\r\\n    address roomCardAddress;\\r\\n    address roomLevelAddress;\\r\\n    address gameTableFactoryAddress;\\r\\n}\\r\\n\\r\\n// \\u5956\\u52b1\\u6c60\\u7ed3\\u6784\\r\\nstruct RewardPoolInfo {\\r\\n    uint256 poolId;           // \\u5956\\u52b1\\u6c60ID\\r\\n    string name;              // \\u5956\\u52b1\\u6c60\\u540d\\u79f0\\r\\n    address banker;           // \\u521b\\u5efa\\u8005\\uff08\\u5e84\\u5bb6\\uff09\\u5730\\u5740\\r\\n    uint256 totalAmount;      // \\u603b\\u5956\\u6c60\\u91d1\\u989d\\r\\n    uint256 rewardPerGame;    // \\u6bcf\\u5c40\\u6e38\\u620f\\u5956\\u52b1\\u91d1\\u989d\\r\\n    uint256 winProbability;   // \\u4e2d\\u5956\\u6982\\u7387\\uff08\\u4ee5\\u767e\\u5206\\u4e4b\\u4e00\\u4e3a\\u5355\\u4f4d\\uff09\\r\\n    uint256 remainingAmount;  // \\u5269\\u4f59\\u5956\\u6c60\\u91d1\\u989d\\r\\n    bool inUse;              // \\u662f\\u5426\\u6b63\\u5728\\u4f7f\\u7528\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\nstruct RoomCardNftType {\\r\\n    uint256 id;              // Unique identifier for the card type\\r\\n    string name;             // Name of the card type (e.g., \\\"SILVER\\\", \\\"GOLD\\\", \\\"DIAMOND\\\")\\r\\n    uint8 maxPlayers;        // Maximum number of players allowed\\r\\n    uint256 price;           // Price to purchase this card\\r\\n    string uriSuffix;        // URI suffix for metadata\\r\\n    bool active;             // Whether this card type is active\\r\\n    uint256 maxMint;         // Maximum mint amount for this card type\\r\\n    string rarity;           // Rarity of the card type\\r\\n    uint256 minted;          // \\u5df2mint\\u6570\\u91cf\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\n// \\u5b9a\\u4e49\\u5361\\u7247\\u8be6\\u7ec6\\u4fe1\\u606f\\u7ed3\\u6784\\u4f53\\r\\nstruct RoomCardNftDetail {\\r\\n    uint256 tokenId;       // \\u5361\\u7247\\u7684token ID\\r\\n    RoomCardNftType nftType;     // \\u7ee7\\u627fCardType\\u7684\\u6240\\u6709\\u5c5e\\u6027\\r\\n}\\r\\n\\r\\n// Room level structure\\r\\nstruct RoomLevelNftType {\\r\\n    uint256 id;              // Unique identifier for the level type\\r\\n    string name;             // Name of the level (e.g., \\\"BRONZE\\\", \\\"SILVER\\\", \\\"GOLD\\\")\\r\\n    uint256 maxRooms;        // Maximum number of rooms allowed with this level\\r\\n    uint256 price;           // Price to purchase this level\\r\\n    string uriSuffix;        // URI suffix for metadata\\r\\n    bool active;             // Whether this level type is active\\r\\n    uint256 maxMint;         // Maximum mint amount for this level type\\r\\n    uint256 minted;          // Already minted amount for this level type\\r\\n    string rarity;           // Rarity of this level type\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\n// Level details structure for returning comprehensive information\\r\\nstruct RoomLevelNftDetail {\\r\\n    uint256 tokenId;         // Level token ID\\r\\n    RoomLevelNftType nftType;     // Level type information\\r\\n}\\r\\n\\r\\n// \\u6dfb\\u52a0\\u4e00\\u4e2a\\u65b0\\u7684\\u7ed3\\u6784\\u4f53\\u7528\\u4e8e\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\r\\nstruct GameTableView {\\r\\n    bool active;\\r\\n    uint256 gameRound;\\r\\n    uint256 gameLiquidatedCount;\\r\\n    address tableAddr; // \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\r\\n    uint256 tableId;\\r\\n    string tableName;\\r\\n    address bankerAddr;\\r\\n    uint256 betAmount;\\r\\n    uint8 bankerFeePercent;\\r\\n    uint256 totalPrizePool;\\r\\n    uint8 playerCount;\\r\\n    uint8 maxPlayers;\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 liquidateDeadline;\\r\\n    GameState state;\\r\\n    uint8 liquidatorFeePercent;\\r\\n    uint8 playerContinuedCount;\\r\\n    uint8 playerReadyCount;\\r\\n    address[] playerAddresses;\\r\\n    uint256 currentRoundDeadline;\\r\\n    uint256 playerTimeout;\\r\\n    uint256 tableInactiveTimeout;\\r\\n    uint256 lastActivityTimestamp;\\r\\n    uint256 rewardPoolId;\\r\\n    RewardPoolInfo rewardPoolInfo; // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\r\\n    uint256 implementationVersion; // \\u6dfb\\u52a0\\u5b9e\\u73b0\\u7248\\u672c\\u53f7\\r\\n    uint8 firstBetX;\\r\\n    uint8 secondBetX;\\r\\n    uint256 bankerStakeAmount;\\r\\n    bool canNext;\\r\\n    string nextTitle;\\r\\n    string nextReason;\\r\\n    address rewardAddr;\\r\\n    uint256 rewardAmount;\\r\\n    string chatGroupId;\\r\\n}\\r\\n\\r\\n// \\u6dfb\\u52a0\\u4e00\\u4e2a\\u65b0\\u7684\\u7ed3\\u6784\\u4f53\\u7528\\u4e8e\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\r\\nstruct GameTableInfoShort {\\r\\n    bool active;\\r\\n    uint256 gameRound;\\r\\n    uint256 gameLiquidatedCount;\\r\\n    address tableAddr; // \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\r\\n    uint256 tableId;\\r\\n    string tableName;\\r\\n    address bankerAddr;\\r\\n    uint256 betAmount;\\r\\n    uint8 bankerFeePercent;\\r\\n    uint8 playerCount;\\r\\n    uint8 maxPlayers;\\r\\n    GameState state;\\r\\n    uint256 lastActivityTimestamp;\\r\\n    uint256 rewardPoolId;\\r\\n    RewardPoolInfo rewardPoolInfo; // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\r\\n}\\r\\n\\r\\nstruct UserInfo {\\r\\n    address[] tables;\\r\\n    address[] joinedTables;\\r\\n    mapping(address => uint256) joinedTableIndex;\\r\\n}\",\"keccak256\":\"0xf75acf148a2fd7e4aff569ca797a3ba47d2e2917109bf6839e0b00a496adcfe1\",\"license\":\"UNLICENSED\"},\"contracts/BBTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\n/**\\r\\n * @title BBTypes\\r\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u7c7b\\u578b\\u5b9a\\u4e49\\r\\n */\\r\\n\\r\\n// \\u6e38\\u620f\\u72b6\\u6001\\r\\nenum GameState {\\r\\n    NONE,\\r\\n    WAITING,\\r\\n    FIRST_BETTING,\\r\\n    SECOND_BETTING,\\r\\n    ENDED,\\r\\n    SETTLED,\\r\\n    LIQUIDATED\\r\\n}\\r\\n\\r\\n// \\u73a9\\u5bb6\\u72b6\\u6001\\r\\nenum PlayerState {\\r\\n    NONE,\\r\\n    JOINED,\\r\\n    READY,\\r\\n    ACTIVE,       // \\u5f53\\u524d\\u53c2\\u4e0e\\u6e38\\u620f\\u4e2d\\uff0c\\u672a\\u5f03\\u724c\\r\\n    FOLDED        // \\u5f03\\u724c\\r\\n}\\r\\n\\r\\n// \\u724c\\u578b\\r\\nenum CardType {\\r\\n    NONE,\\r\\n    NO_BULL,\\r\\n    BULL_1,\\r\\n    BULL_2,\\r\\n    BULL_3,\\r\\n    BULL_4,\\r\\n    BULL_5,\\r\\n    BULL_6,\\r\\n    BULL_7,\\r\\n    BULL_8,\\r\\n    BULL_9,\\r\\n    BULL_BULL,\\r\\n    FIVE_BOMB,\\r\\n    FIVE_SMALL,\\r\\n    FIVE_FLOWERS\\r\\n}\\r\\n\",\"keccak256\":\"0xf2839d776336a822efd1a9145374f9ad2ea44de1a7721be8bb4b201cd29c2e64\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "牛牛游戏桌实现合约，管理单个游戏桌的逻辑",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bankerRemovePlayer(address)": {
        "details": "庄家移除玩家"
      },
      "initialize(uint256,string,address,uint256,uint8,address,uint8,uint8,uint8,uint256,uint256)": {
        "details": "初始化函数，替代构造函数"
      },
      "liquidateGame()": {
        "details": "清算不活跃的游戏桌 此函数来清算长时间不活跃的游戏桌 庄家的押金将被分配给玩家和清算人"
      },
      "nextStep(bytes32)": {
        "details": "下一步"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "playerContinue(bytes32)": {
        "details": "玩家继续游戏"
      },
      "playerFold(bytes32)": {
        "details": "玩家弃牌"
      },
      "playerJoin()": {
        "details": "玩家加入游戏"
      },
      "playerQuit()": {
        "details": "玩家退出游戏"
      },
      "playerReady(bytes32)": {
        "details": "玩家准备"
      },
      "playerSettle()": {
        "details": "玩家结算游戏，如果庄家没结算的话"
      },
      "playerUnready()": {
        "details": "玩家取消准备"
      },
      "removeTableRewardPool()": {
        "details": "庄家移除游戏桌的奖励池"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setTableRewardPool(uint256)": {
        "details": "庄家为游戏桌设置奖励池",
        "params": {
          "poolId": "奖励池ID"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "BBGameTableImplementation",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 188,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1046,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "active",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 1048,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "tableId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1050,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "tableName",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1052,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "bankerAddr",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1054,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "betAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1056,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "playerCount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 1058,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "maxPlayers",
        "offset": 1,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 1060,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "creationTimestamp",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1063,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "state",
        "offset": 0,
        "slot": "8",
        "type": "t_enum(GameState)6041"
      },
      {
        "astId": 1065,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "rewardPoolId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1067,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "bankerStakeAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1069,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "totalIncome",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1071,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "firstBetX",
        "offset": 0,
        "slot": "12",
        "type": "t_uint8"
      },
      {
        "astId": 1073,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "secondBetX",
        "offset": 1,
        "slot": "12",
        "type": "t_uint8"
      },
      {
        "astId": 1075,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "gameRound",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1077,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "gameLiquidatedCount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1079,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "finalSeed",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1081,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "gameStartTimestamp",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1083,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "gameEndTimestamp",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 1085,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "playerContinuedCount",
        "offset": 0,
        "slot": "18",
        "type": "t_uint8"
      },
      {
        "astId": 1087,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "playerReadyCount",
        "offset": 1,
        "slot": "18",
        "type": "t_uint8"
      },
      {
        "astId": 1089,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "totalPrizePool",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 1091,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "bankerFeePercent",
        "offset": 0,
        "slot": "20",
        "type": "t_uint8"
      },
      {
        "astId": 1093,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "liquidatorFeePercent",
        "offset": 1,
        "slot": "20",
        "type": "t_uint8"
      },
      {
        "astId": 1095,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "implementationVersion",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 1099,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "players",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_struct(BBPlayer)5638_storage)dyn_storage"
      },
      {
        "astId": 1102,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "dealerState",
        "offset": 0,
        "slot": "23",
        "type": "t_struct(DealerState)262_storage"
      },
      {
        "astId": 1104,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "gameMainAddr",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 1106,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "rewardPoolAddr",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 1108,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "roomCardAddr",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 1110,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "playerTimeout",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 1112,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "currentRoundDeadline",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 1114,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "liquidateDeadline",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 1116,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "tableInactiveTimeout",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 1118,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "lastActivityTimestamp",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 1120,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "rewardAddr",
        "offset": 0,
        "slot": "33",
        "type": "t_address"
      },
      {
        "astId": 1122,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "rewardAmount",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 1124,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "chatGroupId",
        "offset": 0,
        "slot": "35",
        "type": "t_string_storage"
      },
      {
        "astId": 1128,
        "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
        "label": "__gap",
        "offset": 0,
        "slot": "36",
        "type": "t_array(t_uint256)25_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BBPlayer)5638_storage)dyn_storage": {
        "base": "t_struct(BBPlayer)5638_storage",
        "encoding": "dynamic_array",
        "label": "struct BBPlayer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)25_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[25]",
        "numberOfBytes": "800"
      },
      "t_array(t_uint8)5_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[5]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(CardType)6063": {
        "encoding": "inplace",
        "label": "enum CardType",
        "numberOfBytes": "1"
      },
      "t_enum(GameState)6041": {
        "encoding": "inplace",
        "label": "enum GameState",
        "numberOfBytes": "1"
      },
      "t_enum(PlayerState)6047": {
        "encoding": "inplace",
        "label": "enum PlayerState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint8,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BBPlayer)5638_storage": {
        "encoding": "inplace",
        "label": "struct BBPlayer",
        "members": [
          {
            "astId": 5617,
            "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5620,
            "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
            "label": "state",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(PlayerState)6047"
          },
          {
            "astId": 5622,
            "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
            "label": "totalBet",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5624,
            "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
            "label": "hasActedThisRound",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 5626,
            "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
            "label": "isWinner",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 5630,
            "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
            "label": "cards",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint8)5_storage"
          },
          {
            "astId": 5633,
            "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
            "label": "cardType",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(CardType)6063"
          },
          {
            "astId": 5637,
            "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
            "label": "__gap",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(DealerState)262_storage": {
        "encoding": "inplace",
        "label": "struct BBCardDealer.DealerState",
        "members": [
          {
            "astId": 259,
            "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
            "label": "usedCards",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint8,t_bool)"
          },
          {
            "astId": 261,
            "contract": "contracts/BBGameTableImplementation.sol:BBGameTableImplementation",
            "label": "lastSeed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}