{
  "address": "0x0D5cEb8300484964d30C7565bDC2bE4e3716e5A8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gameMainAddr",
          "type": "address"
        }
      ],
      "name": "GameMainAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tableAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "banker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerGame",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winProbability",
          "type": "uint256"
        }
      ],
      "name": "RewardPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "banker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingAmount",
          "type": "uint256"
        }
      ],
      "name": "RewardPoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tableAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "banker",
          "type": "address"
        }
      ],
      "name": "TableRewardPoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tableAddr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "banker",
          "type": "address"
        }
      ],
      "name": "TableRewardPoolSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_totalReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerGame",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_winProbability",
          "type": "uint256"
        }
      ],
      "name": "createRewardPool",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameMainAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_banker",
          "type": "address"
        }
      ],
      "name": "getBankerPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "banker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerGame",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "winProbability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "inUse",
              "type": "bool"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct RewardPoolInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_banker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getRewardPoolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "poolId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "banker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerGame",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "winProbability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "inUse",
              "type": "bool"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct RewardPoolInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameMainAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_banker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "isBankerPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "removeRewardPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameMainAddr",
          "type": "address"
        }
      ],
      "name": "setGameMainAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_players",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "finalSeed",
          "type": "uint256"
        }
      ],
      "name": "tryDistributeReward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xab22e88d936c741df2bc2669b64ddb3bc6c11a39d155b42ce5eb982d26e3ce39",
  "receipt": {
    "to": null,
    "from": "0xCf4eC0E2Fa3B3f1f706183128D729a9C86c69e4d",
    "contractAddress": "0x0D5cEb8300484964d30C7565bDC2bE4e3716e5A8",
    "transactionIndex": 8,
    "gasUsed": "2624549",
    "logsBloom": "0x
    "blockHash": "0xce048afcb25bf396393c5d0c16e399a9a023352695bb27f1f3b6d5b8bb856216",
    "transactionHash": "0xab22e88d936c741df2bc2669b64ddb3bc6c11a39d155b42ce5eb982d26e3ce39",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 15726442,
        "transactionHash": "0xab22e88d936c741df2bc2669b64ddb3bc6c11a39d155b42ce5eb982d26e3ce39",
        "address": "0x0D5cEb8300484964d30C7565bDC2bE4e3716e5A8",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 25,
        "blockHash": "0xce048afcb25bf396393c5d0c16e399a9a023352695bb27f1f3b6d5b8bb856216"
      }
    ],
    "blockNumber": 15726442,
    "cumulativeGasUsed": "5028933",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48576e987db7584d29c5cbb1887dec70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameMainAddr\",\"type\":\"address\"}],\"name\":\"GameMainAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerGame\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winProbability\",\"type\":\"uint256\"}],\"name\":\"RewardPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"}],\"name\":\"RewardPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"}],\"name\":\"TableRewardPoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"}],\"name\":\"TableRewardPoolSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winProbability\",\"type\":\"uint256\"}],\"name\":\"createRewardPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameMainAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_banker\",\"type\":\"address\"}],\"name\":\"getBankerPools\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RewardPoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getRewardPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerGame\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"winProbability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"inUse\",\"type\":\"bool\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RewardPoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameMainAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_banker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"isBankerPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"removeRewardPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameMainAddr\",\"type\":\"address\"}],\"name\":\"setGameMainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"finalSeed\",\"type\":\"uint256\"}],\"name\":\"tryDistributeReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"\\u725b\\u725b\\u6e38\\u620f\\u5956\\u52b1\\u6c60\\u5408\\u7ea6\\uff0c\\u5141\\u8bb8\\u5e84\\u5bb6\\u521b\\u5efa\\u5956\\u52b1\\u6c60\\uff0c\\u5728\\u6e38\\u620f\\u7ed3\\u675f\\u65f6\\u968f\\u673a\\u5956\\u52b1\\u73a9\\u5bb6\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createRewardPool(string,uint256,uint256,uint256)\":{\"details\":\"\\u521b\\u5efa\\u65b0\\u7684\\u5956\\u52b1\\u6c60\",\"params\":{\"_rewardPerGame\":\"\\u6bcf\\u5c40\\u6e38\\u620f\\u5956\\u52b1\\u91d1\\u989d\",\"_totalReward\":\"\\u603b\\u5956\\u52b1\\u91d1\\u989d\",\"_winProbability\":\"\\u4e2d\\u5956\\u6982\\u7387\\uff08\\u4ee5\\u767e\\u5206\\u4e4b\\u4e00\\u4e3a\\u5355\\u4f4d\\uff0c\\u4f8b\\u598210\\u8868\\u793a10%\\u7684\\u6982\\u7387\\uff09\",\"name\":\"\\u5956\\u52b1\\u6c60\\u540d\\u79f0\"}},\"getBankerPools(address)\":{\"details\":\"\\u83b7\\u53d6\\u6307\\u5b9a\\u5730\\u5740\\u7684\\u6240\\u6709\\u5956\\u52b1\\u6c60\",\"params\":{\"_banker\":\"\\u5e84\\u5bb6\\u5730\\u5740\"},\"returns\":{\"_0\":\"\\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\u6570\\u7ec4\"}},\"getRewardPoolInfo(address,uint256)\":{\"details\":\"\\u83b7\\u53d6\\u6307\\u5b9a\\u5e84\\u5bb6\\u7684\\u6307\\u5b9a\\u5956\\u52b1\\u6c60\\u4fe1\\u606f\",\"params\":{\"_banker\":\"\\u5e84\\u5bb6\\u5730\\u5740\",\"_poolId\":\"\\u5956\\u52b1\\u6c60ID\"},\"returns\":{\"_0\":\"\\u5956\\u52b1\\u6c60\\u4fe1\\u606f\"}},\"initialize(address)\":{\"details\":\"\\u521d\\u59cb\\u5316\\u51fd\\u6570\\uff0c\\u66ff\\u4ee3\\u6784\\u9020\\u51fd\\u6570\",\"params\":{\"_gameMainAddr\":\"\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeRewardPool(uint256)\":{\"details\":\"\\u5e84\\u5bb6\\u5220\\u9664\\u5956\\u52b1\\u6c60\\u5e76\\u53d6\\u56de\\u5269\\u4f59\\u8d44\\u91d1\",\"params\":{\"_poolId\":\"\\u8981\\u5220\\u9664\\u7684\\u5956\\u52b1\\u6c60ID\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setGameMainAddress(address)\":{\"details\":\"\\u8bbe\\u7f6e\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\",\"params\":{\"_gameMainAddr\":\"\\u65b0\\u7684\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"tryDistributeReward(uint256,address[],uint256)\":{\"details\":\"\\u6e38\\u620f\\u7ed3\\u675f\\u65f6\\u5c1d\\u8bd5\\u5206\\u914d\\u5956\\u52b1\",\"params\":{\"_players\":\"\\u53c2\\u4e0e\\u6e38\\u620f\\u7684\\u73a9\\u5bb6\\u5730\\u5740\\u6570\\u7ec4\",\"_poolId\":\"\\u5956\\u52b1\\u6c60ID\",\"finalSeed\":\"\\u6700\\u7ec8\\u79cd\\u5b50\"},\"returns\":{\"_0\":\"\\u662f\\u5426\\u5206\\u914d\\u4e86\\u5956\\u52b1\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"title\":\"BBRewardPool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BBRewardPool.sol\":\"BBRewardPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd861907d1168dcaec2a7846edbaed12feb8bad2d6781dba987be01374f90b495\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x361126a17677994081cd9cb69c3f50cffff6e920d25cb7e428acdb1ae41d1866\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"contracts/BBInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\nimport \\\"./BBStructs.sol\\\";\\r\\n\\r\\ninterface IGameTableFactory {\\r\\n    function createGameTable(\\r\\n        uint256 tableId,\\r\\n        string memory tableName,\\r\\n        address bankerAddr,\\r\\n        uint256 betAmount,\\r\\n        uint8 maxPlayers,\\r\\n        address gameMainAddr,\\r\\n        uint8 bankerFeePercent,\\r\\n        uint8 firstRaise,\\r\\n        uint8 secondRaise,\\r\\n        uint256 rewardPoolId\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IGameTableImplementation {\\r\\n    function bankerAddr() external view returns (address);\\r\\n    function getTableInfo() external view returns (GameTableView memory);\\r\\n    function getTableInfoShort() external view returns (GameTableInfoShort memory);\\r\\n    function lastActivityTimestamp() external view returns (uint256);\\r\\n    function state() external view returns (GameState);\\r\\n    function rewardPoolId() external view returns (uint256);\\r\\n    function initialize(\\r\\n        uint256 _tableId,\\r\\n        string memory _tableName,\\r\\n        address _bankerAddr,\\r\\n        uint256 _betAmount,\\r\\n        uint8 _maxPlayers,\\r\\n        address _gameMainAddr,\\r\\n        uint8 _bankerFeePercent,\\r\\n        uint8 _firstRaise,\\r\\n        uint8 _secondRaise,\\r\\n        uint256 _rewardPoolId,\\r\\n        uint256 _implementationVersion\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IGameMain {\\r\\n    function isValidGameTable(address) external view returns (bool);\\r\\n    function liquidatorFeePercent() external view returns (uint256);\\r\\n    function playerTimeout() external view returns (uint256);\\r\\n    function tableInactiveTimeout() external view returns (uint256);\\r\\n    function rewardPoolAddress() external view returns (address);\\r\\n    function roomCardAddress() external view returns (address);\\r\\n    function roomLevelAddress() external view returns (address);\\r\\n    function getGameConfig() external view returns (GameConfig memory);\\r\\n    function rewardPoolIsInUse(address, uint256) external view returns (bool);\\r\\n    function userJoinTable(address userAddr) external;\\r\\n    function userLeaveTable(address userAddr) external;\\r\\n}\\r\\n\\r\\ninterface IRewardPool{\\r\\n    function tryDistributeReward(uint256 _poolId, address[] calldata _players, uint256 finalSeed) external  returns (address, uint256);\\r\\n    function isBankerPool(address, uint256) external view returns (bool);\\r\\n    function getRewardPoolInfo(address, uint256) external view returns (RewardPoolInfo memory);\\r\\n}\\r\\n\\r\\ninterface IRoomCardNFT{\\r\\n    function validateParams(uint256, uint8) external view returns (bool);\\r\\n    function hasNft(address) external view returns (bool);\\r\\n    function consume(address, uint256) external;\\r\\n}\",\"keccak256\":\"0x31bc037d6f22f39b622e76414b6b77535958a3a9c37b07cce084179c2e9ea136\",\"license\":\"MIT\"},\"contracts/BBPlayer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\n\\r\\nstruct BBPlayer {\\r\\n    address addr;\\r\\n    PlayerState state;\\r\\n\\r\\n    uint256 totalBet;\\r\\n\\r\\n    bool hasActedThisRound;   // \\u672c\\u8f6e\\u662f\\u5426\\u5df2\\u64cd\\u4f5c\\r\\n    bool isWinner;   // \\u662f\\u5426\\u4e3a\\u8d62\\u5bb6\\r\\n\\r\\n    uint8[5] cards;\\r\\n    CardType cardType;\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\nlibrary BBPlayerLib {\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u51c6\\u5907\\r\\n     */\\r\\n    function playerReady(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.READY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u53d6\\u6d88\\u51c6\\u5907\\r\\n     */\\r\\n    function playerUnready(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u52a0\\u5165\\r\\n     */\\r\\n    function playerJoin(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u5f03\\u724c\\r\\n     */\\r\\n    function playerFold(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.FOLDED;\\r\\n        self.hasActedThisRound = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u7ee7\\u7eed\\u6e38\\u620f\\r\\n     */\\r\\n    function playerContinue(BBPlayer storage self, uint256 additionalBet) internal {\\r\\n        self.totalBet += additionalBet;\\r\\n        self.state = PlayerState.ACTIVE;\\r\\n        self.hasActedThisRound = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u662f\\u5426\\u6709\\u6548\\r\\n     */\\r\\n    function isValid(BBPlayer storage self) internal view returns (bool) {\\r\\n        return self.addr != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u91cd\\u7f6e\\u73a9\\u5bb6\\u6570\\u636e\\r\\n     */\\r\\n    function playerReset(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n        self.hasActedThisRound = false;\\r\\n        self.totalBet = 0;\\r\\n        self.isWinner = false;\\r\\n        self.cards = [0, 0, 0, 0, 0];\\r\\n        self.cardType = CardType.NONE;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf7d1ee4658a50be6690b6c085733ceb592f91baa15b7b7fb5e27a30e1ae7e215\",\"license\":\"UNLICENSED\"},\"contracts/BBRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.28;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"./BBTypes.sol\\\";\\nimport \\\"./BBStructs.sol\\\";\\nimport \\\"./BBInterfaces.sol\\\";\\n\\n/**\\n * @title BBRewardPool\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u5956\\u52b1\\u6c60\\u5408\\u7ea6\\uff0c\\u5141\\u8bb8\\u5e84\\u5bb6\\u521b\\u5efa\\u5956\\u52b1\\u6c60\\uff0c\\u5728\\u6e38\\u620f\\u7ed3\\u675f\\u65f6\\u968f\\u673a\\u5956\\u52b1\\u73a9\\u5bb6\\n */\\ncontract BBRewardPool is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    UUPSUpgradeable\\n{\\n    \\n\\n    // \\u72b6\\u6001\\u53d8\\u91cf\\n    uint256 private nextPoolId;                           // \\u4e0b\\u4e00\\u4e2a\\u5956\\u52b1\\u6c60ID\\n    mapping(address => RewardPoolInfo[]) private bankerPools;      // \\u5e84\\u5bb6\\u62e5\\u6709\\u7684\\u5956\\u52b1\\u6c60\\n\\n    // \\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\\n    address public gameMainAddr;\\n\\n    // \\u6700\\u5927\\u6982\\u7387\\u503c\\uff08100 = 100%\\uff09\\n    uint8 private constant MAX_PROBABILITY = 100;\\n\\n    // \\u9884\\u7559 25 \\u4e2a slot \\u7ed9\\u5c06\\u6765\\u65b0\\u589e\\u53d8\\u91cf\\u7528\\uff0c\\u9632\\u6b62\\u5b58\\u50a8\\u51b2\\u7a81\\n    uint256[25] private __gap;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev \\u521d\\u59cb\\u5316\\u51fd\\u6570\\uff0c\\u66ff\\u4ee3\\u6784\\u9020\\u51fd\\u6570\\n     * @param _gameMainAddr \\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\\n     */\\n    function initialize(address _gameMainAddr) public initializer {\\n        __Ownable_init(msg.sender);\\n        __ReentrancyGuard_init();\\n        __UUPSUpgradeable_init();\\n\\n        require(_gameMainAddr != address(0), \\\"Invalid game main address\\\");\\n        gameMainAddr = _gameMainAddr;\\n        nextPoolId = 1;\\n    }\\n\\n    modifier onlyValidTable() {\\n        IGameMain gameMain = IGameMain(gameMainAddr);\\n        require(gameMain.isValidGameTable(msg.sender), \\\"invalid table\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev \\u521b\\u5efa\\u65b0\\u7684\\u5956\\u52b1\\u6c60\\n     * @param name \\u5956\\u52b1\\u6c60\\u540d\\u79f0\\n     * @param _totalReward \\u603b\\u5956\\u52b1\\u91d1\\u989d\\n     * @param _rewardPerGame \\u6bcf\\u5c40\\u6e38\\u620f\\u5956\\u52b1\\u91d1\\u989d\\n     * @param _winProbability \\u4e2d\\u5956\\u6982\\u7387\\uff08\\u4ee5\\u767e\\u5206\\u4e4b\\u4e00\\u4e3a\\u5355\\u4f4d\\uff0c\\u4f8b\\u598210\\u8868\\u793a10%\\u7684\\u6982\\u7387\\uff09\\n     */\\n    function createRewardPool(string calldata name, uint256 _totalReward, uint256 _rewardPerGame, uint256 _winProbability) external payable nonReentrant {\\n        // \\u9a8c\\u8bc1\\u53c2\\u6570\\n        require(_rewardPerGame > 0 && _totalReward > 0, \\\"Invalid reward amount\\\");\\n        require(_winProbability > 0 && _winProbability <= MAX_PROBABILITY, \\\"Invalid win probability\\\");\\n        require(msg.value == _totalReward, \\\"Insufficient funds\\\");\\n\\n        // \\u521b\\u5efa\\u5956\\u52b1\\u6c60\\n        RewardPoolInfo memory pool;\\n        pool.name = name;\\n        pool.poolId = nextPoolId++;\\n        pool.banker = msg.sender;\\n        pool.totalAmount = _totalReward;\\n        pool.rewardPerGame = _rewardPerGame;\\n        pool.winProbability = _winProbability;\\n        pool.remainingAmount = _totalReward;\\n        pool.inUse = false;\\n        pool.__gap = [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)];\\n\\n        // \\u6dfb\\u52a0\\u5230\\u5e84\\u5bb6\\u7684\\u5956\\u52b1\\u6c60\\u5217\\u8868\\n        bankerPools[msg.sender].push(pool);\\n\\n        emit RewardPoolCreated(pool.poolId, msg.sender, msg.value, _rewardPerGame, _winProbability);\\n    }\\n\\n    //\\u9a8c\\u8bc1\\u662f\\u5426\\u662f\\u8fd9\\u4e2a\\u5e84\\u5bb6\\u7684\\u5956\\u52b1\\u6c60\\n    function isBankerPool(address _banker, uint256 _poolId) external view returns (bool) {\\n        require(_banker != address(0), \\\"Invalid banker address\\\");\\n        require(_poolId > 0, \\\"Invalid pool ID\\\");\\n        \\n        RewardPoolInfo[] memory pools = bankerPools[_banker];\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            if (pools[i].poolId == _poolId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    // \\u6839\\u636ebankerAddr\\u548cpoolId\\u83b7\\u53d6pool\\n    function _getPool(address _banker, uint256 _poolId) internal view returns (uint256, RewardPoolInfo storage) {\\n        RewardPoolInfo[] storage pools = bankerPools[_banker];\\n        uint256 poolIndex = 0;\\n        bool found = false;\\n        \\n        for (uint256 i = 0; i < pools.length; i++) {\\n            if (pools[i].poolId == _poolId) {\\n                poolIndex = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n        \\n        require(found, \\\"Pool not found\\\");\\n        return (poolIndex, pools[poolIndex]);\\n    }\\n\\n    /**\\n     * @dev \\u5e84\\u5bb6\\u5220\\u9664\\u5956\\u52b1\\u6c60\\u5e76\\u53d6\\u56de\\u5269\\u4f59\\u8d44\\u91d1\\n     * @param _poolId \\u8981\\u5220\\u9664\\u7684\\u5956\\u52b1\\u6c60ID\\n     */\\n    function removeRewardPool(uint256 _poolId) external nonReentrant {\\n        address bankerAddr = msg.sender;\\n        require(bankerAddr != address(0), \\\"Invalid banker address\\\");\\n\\n        (uint256 poolIndex, RewardPoolInfo storage pool) = _getPool(bankerAddr, _poolId);\\n        \\n        if(IGameMain(gameMainAddr).rewardPoolIsInUse(bankerAddr, _poolId)){\\n            require(false, \\\"Reward pool in use\\\");\\n        }\\n        \\n        uint256 remainingAmount = pool.remainingAmount;\\n\\n        // \\u4ece\\u6570\\u7ec4\\u4e2d\\u79fb\\u9664\\u5956\\u52b1\\u6c60\\uff08\\u901a\\u8fc7\\u5c06\\u6700\\u540e\\u4e00\\u4e2a\\u5143\\u7d20\\u79fb\\u5230\\u8981\\u5220\\u9664\\u7684\\u4f4d\\u7f6e\\uff09\\n        if (poolIndex != bankerPools[bankerAddr].length - 1) {\\n            bankerPools[bankerAddr][poolIndex] = bankerPools[bankerAddr][bankerPools[bankerAddr].length - 1];\\n        }\\n        bankerPools[bankerAddr].pop();\\n\\n        if(remainingAmount > 0){\\n            // \\u8f6c\\u8d26\\u5269\\u4f59\\u8d44\\u91d1\\u7ed9\\u5e84\\u5bb6\\n            (bool success, ) = payable(bankerAddr).call{value: remainingAmount}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n        }\\n        \\n\\n        emit RewardPoolRemoved(_poolId, bankerAddr, remainingAmount);\\n    }\\n\\n    /**\\n     * @dev \\u6e38\\u620f\\u7ed3\\u675f\\u65f6\\u5c1d\\u8bd5\\u5206\\u914d\\u5956\\u52b1\\n     * @param _poolId \\u5956\\u52b1\\u6c60ID\\n     * @param _players \\u53c2\\u4e0e\\u6e38\\u620f\\u7684\\u73a9\\u5bb6\\u5730\\u5740\\u6570\\u7ec4\\n     * @param finalSeed \\u6700\\u7ec8\\u79cd\\u5b50\\n     * @return \\u662f\\u5426\\u5206\\u914d\\u4e86\\u5956\\u52b1\\n     */\\n    function tryDistributeReward(uint256 _poolId, address[] calldata _players, uint256 finalSeed) external onlyValidTable nonReentrant returns (address, uint256) {\\n        address tableAddr = msg.sender;\\n        address bankerAddr = IGameTableImplementation(tableAddr).bankerAddr();\\n        require(bankerAddr != address(0), \\\"invalid banker address\\\");\\n\\n        (, RewardPoolInfo storage pool) = _getPool(bankerAddr, _poolId);\\n        if (pool.poolId == 0) return (address(0), 0);\\n\\n        // \\u9a8c\\u8bc1\\u6709\\u8db3\\u591f\\u7684\\u8d44\\u91d1\\n        if (pool.remainingAmount < pool.rewardPerGame) return (address(0), 0);\\n\\n        // \\u9a8c\\u8bc1\\u6709\\u73a9\\u5bb6\\u53c2\\u4e0e\\n        uint256 playerCount = _players.length;\\n        if (playerCount == 0) return (address(0), 0);\\n\\n        // \\u751f\\u6210\\u968f\\u673a\\u6570\\u51b3\\u5b9a\\u662f\\u5426\\u53d1\\u653e\\u5956\\u52b1\\n        uint256 randomValue = _generateRandomNumber(finalSeed, _poolId, tableAddr) % MAX_PROBABILITY;\\n\\n        // \\u5982\\u679c\\u968f\\u673a\\u6570\\u5c0f\\u4e8e\\u4e2d\\u5956\\u6982\\u7387\\uff0c\\u5219\\u53d1\\u653e\\u5956\\u52b1\\n        if (randomValue < pool.winProbability) {\\n            // \\u5b89\\u5168\\u5730\\u968f\\u673a\\u9009\\u62e9\\u4e00\\u540d\\u73a9\\u5bb6\\n            uint256 winnerIndex = 0;\\n            if (playerCount > 1) {\\n                winnerIndex = _generateRandomNumber(finalSeed, _poolId + 1, tableAddr) % playerCount;\\n            }\\n            \\n            // \\u989d\\u5916\\u5b89\\u5168\\u68c0\\u67e5\\uff0c\\u786e\\u4fdd\\u7d22\\u5f15\\u5728\\u8303\\u56f4\\u5185\\n            require(winnerIndex < playerCount, \\\"Winner index out of bounds\\\");\\n            \\n            address winner = _players[winnerIndex];\\n            require(winner != address(0), \\\"Invalid winner address\\\");\\n\\n            // \\u66f4\\u65b0\\u5956\\u52b1\\u6c60\\u4f59\\u989d\\n            pool.remainingAmount -= pool.rewardPerGame;\\n\\n            // \\u8f6c\\u8d26\\u5956\\u52b1\\u7ed9\\u83b7\\u80dc\\u8005\\n            (bool success, ) = payable(winner).call{value: pool.rewardPerGame}(\\\"\\\");\\n            require(success, \\\"Transfer failed\\\");\\n\\n            emit RewardDistributed(_poolId, tableAddr, winner, pool.rewardPerGame);\\n            return (winner, pool.rewardPerGame);\\n        }\\n\\n        return (address(0), 0);\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u6307\\u5b9a\\u5730\\u5740\\u7684\\u6240\\u6709\\u5956\\u52b1\\u6c60\\n     * @param _banker \\u5e84\\u5bb6\\u5730\\u5740\\n     * @return \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\u6570\\u7ec4\\n     */\\n    function getBankerPools(address _banker) external view returns (RewardPoolInfo[] memory) {\\n        uint256 poolCount = bankerPools[_banker].length;\\n        RewardPoolInfo[] memory pools = new RewardPoolInfo[](poolCount);\\n        for(uint256 i = 0; i < poolCount; i++) {\\n            pools[i] = bankerPools[_banker][i];\\n            pools[i].inUse = IGameMain(gameMainAddr).rewardPoolIsInUse(_banker, pools[i].poolId);\\n        }\\n        return pools;\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u6307\\u5b9a\\u5e84\\u5bb6\\u7684\\u6307\\u5b9a\\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\n     * @param _banker \\u5e84\\u5bb6\\u5730\\u5740\\n     * @param _poolId \\u5956\\u52b1\\u6c60ID\\n     * @return \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\n     */\\n    function getRewardPoolInfo(address _banker, uint256 _poolId) external view returns (RewardPoolInfo memory) {\\n        (, RewardPoolInfo storage pool) = _getPool(_banker, _poolId);\\n        return pool;\\n    }\\n\\n    /**\\n     * @dev \\u751f\\u6210\\u968f\\u673a\\u6570\\uff08\\u5185\\u90e8\\u51fd\\u6570\\uff09\\n     * @param _seed1 \\u79cd\\u5b50\\n     * @param _seed2 \\u79cd\\u5b50\\n     * @param _seed3 \\u79cd\\u5b50\\n     * @return \\u4f2a\\u968f\\u673a\\u6570\\n     */\\n    function _generateRandomNumber(uint256 _seed1, uint256 _seed2, address _seed3) internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\n            _seed1,\\n            _seed2,\\n            _seed3,\\n            block.timestamp,\\n            block.difficulty,\\n            blockhash(block.number - 1)\\n        )));\\n    }\\n\\n    /**\\n     * @dev \\u8bbe\\u7f6e\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\\n     * @param _gameMainAddr \\u65b0\\u7684\\u6e38\\u620f\\u4e3b\\u5408\\u7ea6\\u5730\\u5740\\n     */\\n    function setGameMainAddress(address _gameMainAddr) external onlyOwner {\\n        require(_gameMainAddr != address(0), \\\"Invalid game main address\\\");\\n        gameMainAddr = _gameMainAddr;\\n        emit GameMainAddressUpdated(_gameMainAddr);\\n    }\\n\\n    /**\\n     * @dev \\u5b9e\\u73b0UUPS\\u53ef\\u5347\\u7ea7\\u5408\\u7ea6\\u6240\\u9700\\u7684\\u6388\\u6743\\u68c0\\u67e5\\n     * @param newImplementation \\u65b0\\u7684\\u5b9e\\u73b0\\u5408\\u7ea6\\u5730\\u5740\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\n\\n    // \\u4e8b\\u4ef6\\u5b9a\\u4e49\\n    event RewardPoolCreated(uint256 indexed poolId, address indexed banker, uint256 totalAmount, uint256 rewardPerGame, uint256 winProbability);\\n    event RewardPoolRemoved(uint256 indexed poolId, address indexed banker, uint256 remainingAmount);\\n    event TableRewardPoolSet(address indexed tableAddr, uint256 indexed poolId, address indexed banker);\\n    event TableRewardPoolRemoved(address indexed tableAddr, uint256 indexed poolId, address indexed banker);\\n    event RewardDistributed(uint256 indexed poolId, address indexed tableAddr, address indexed winner, uint256 amount);\\n    event GameMainAddressUpdated(address indexed gameMainAddr);\\n\\n    \\n}\\n\",\"keccak256\":\"0x88659c46ccf3e38ab82d17f683d28acd1b7c0da54309ee5533752166782131cc\",\"license\":\"UNLICENSED\"},\"contracts/BBStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\nimport \\\"./BBPlayer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BBStructs\\r\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u7ed3\\u6784\\u4f53\\u5b9a\\u4e49\\r\\n */\\r\\n\\r\\nstruct GameConfig {\\r\\n    uint8 maxRoomCount;\\r\\n    uint8 maxPlayers;\\r\\n    uint8 maxJoinTablesCount;\\r\\n    uint8 maxBankerFeePercent;\\r\\n    uint256 playerTimeout;\\r\\n    uint256 tableInactiveTimeout;\\r\\n    uint8 liquidatorFeePercent;\\r\\n    address gameMainAddress;\\r\\n    address rewardPoolAddress;\\r\\n    address roomCardAddress;\\r\\n    address roomLevelAddress;\\r\\n    address gameTableFactoryAddress;\\r\\n}\\r\\n\\r\\n// \\u5956\\u52b1\\u6c60\\u7ed3\\u6784\\r\\nstruct RewardPoolInfo {\\r\\n    uint256 poolId;           // \\u5956\\u52b1\\u6c60ID\\r\\n    string name;              // \\u5956\\u52b1\\u6c60\\u540d\\u79f0\\r\\n    address banker;           // \\u521b\\u5efa\\u8005\\uff08\\u5e84\\u5bb6\\uff09\\u5730\\u5740\\r\\n    uint256 totalAmount;      // \\u603b\\u5956\\u6c60\\u91d1\\u989d\\r\\n    uint256 rewardPerGame;    // \\u6bcf\\u5c40\\u6e38\\u620f\\u5956\\u52b1\\u91d1\\u989d\\r\\n    uint256 winProbability;   // \\u4e2d\\u5956\\u6982\\u7387\\uff08\\u4ee5\\u767e\\u5206\\u4e4b\\u4e00\\u4e3a\\u5355\\u4f4d\\uff09\\r\\n    uint256 remainingAmount;  // \\u5269\\u4f59\\u5956\\u6c60\\u91d1\\u989d\\r\\n    bool inUse;              // \\u662f\\u5426\\u6b63\\u5728\\u4f7f\\u7528\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\nstruct RoomCardNftType {\\r\\n    uint256 id;              // Unique identifier for the card type\\r\\n    string name;             // Name of the card type (e.g., \\\"SILVER\\\", \\\"GOLD\\\", \\\"DIAMOND\\\")\\r\\n    uint8 maxPlayers;        // Maximum number of players allowed\\r\\n    uint256 price;           // Price to purchase this card\\r\\n    string uriSuffix;        // URI suffix for metadata\\r\\n    bool active;             // Whether this card type is active\\r\\n    uint256 maxMint;         // Maximum mint amount for this card type\\r\\n    string rarity;           // Rarity of the card type\\r\\n    uint256 minted;          // \\u5df2mint\\u6570\\u91cf\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\n// \\u5b9a\\u4e49\\u5361\\u7247\\u8be6\\u7ec6\\u4fe1\\u606f\\u7ed3\\u6784\\u4f53\\r\\nstruct RoomCardNftDetail {\\r\\n    uint256 tokenId;       // \\u5361\\u7247\\u7684token ID\\r\\n    RoomCardNftType nftType;     // \\u7ee7\\u627fCardType\\u7684\\u6240\\u6709\\u5c5e\\u6027\\r\\n}\\r\\n\\r\\n// Room level structure\\r\\nstruct RoomLevelNftType {\\r\\n    uint256 id;              // Unique identifier for the level type\\r\\n    string name;             // Name of the level (e.g., \\\"BRONZE\\\", \\\"SILVER\\\", \\\"GOLD\\\")\\r\\n    uint256 maxRooms;        // Maximum number of rooms allowed with this level\\r\\n    uint256 price;           // Price to purchase this level\\r\\n    string uriSuffix;        // URI suffix for metadata\\r\\n    bool active;             // Whether this level type is active\\r\\n    uint256 maxMint;         // Maximum mint amount for this level type\\r\\n    uint256 minted;          // Already minted amount for this level type\\r\\n    string rarity;           // Rarity of this level type\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\n// Level details structure for returning comprehensive information\\r\\nstruct RoomLevelNftDetail {\\r\\n    uint256 tokenId;         // Level token ID\\r\\n    RoomLevelNftType nftType;     // Level type information\\r\\n}\\r\\n\\r\\n// \\u6dfb\\u52a0\\u4e00\\u4e2a\\u65b0\\u7684\\u7ed3\\u6784\\u4f53\\u7528\\u4e8e\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\r\\nstruct GameTableView {\\r\\n    bool active;\\r\\n    uint256 gameRound;\\r\\n    uint256 gameLiquidatedCount;\\r\\n    address tableAddr; // \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\r\\n    uint256 tableId;\\r\\n    string tableName;\\r\\n    address bankerAddr;\\r\\n    uint256 betAmount;\\r\\n    uint8 bankerFeePercent;\\r\\n    uint256 totalPrizePool;\\r\\n    uint8 playerCount;\\r\\n    uint8 maxPlayers;\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 liquidateDeadline;\\r\\n    GameState state;\\r\\n    uint8 liquidatorFeePercent;\\r\\n    uint8 playerContinuedCount;\\r\\n    uint8 playerReadyCount;\\r\\n    address[] playerAddresses;\\r\\n    uint256 currentRoundDeadline;\\r\\n    uint256 playerTimeout;\\r\\n    uint256 tableInactiveTimeout;\\r\\n    uint256 lastActivityTimestamp;\\r\\n    uint256 rewardPoolId;\\r\\n    RewardPoolInfo rewardPoolInfo; // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\r\\n    uint256 implementationVersion; // \\u6dfb\\u52a0\\u5b9e\\u73b0\\u7248\\u672c\\u53f7\\r\\n    uint8 firstBetX;\\r\\n    uint8 secondBetX;\\r\\n    uint256 bankerStakeAmount;\\r\\n    bool canNext;\\r\\n    string nextTitle;\\r\\n    string nextReason;\\r\\n    address rewardAddr;\\r\\n    uint256 rewardAmount;\\r\\n    string chatGroupId;\\r\\n}\\r\\n\\r\\n// \\u6dfb\\u52a0\\u4e00\\u4e2a\\u65b0\\u7684\\u7ed3\\u6784\\u4f53\\u7528\\u4e8e\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\r\\nstruct GameTableInfoShort {\\r\\n    bool active;\\r\\n    uint256 gameRound;\\r\\n    uint256 gameLiquidatedCount;\\r\\n    address tableAddr; // \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\r\\n    uint256 tableId;\\r\\n    string tableName;\\r\\n    address bankerAddr;\\r\\n    uint256 betAmount;\\r\\n    uint8 bankerFeePercent;\\r\\n    uint8 playerCount;\\r\\n    uint8 maxPlayers;\\r\\n    GameState state;\\r\\n    uint256 lastActivityTimestamp;\\r\\n    uint256 rewardPoolId;\\r\\n    RewardPoolInfo rewardPoolInfo; // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\r\\n}\\r\\n\\r\\nstruct UserInfo {\\r\\n    address[] tables;\\r\\n    address[] joinedTables;\\r\\n    mapping(address => uint256) joinedTableIndex;\\r\\n}\",\"keccak256\":\"0xf75acf148a2fd7e4aff569ca797a3ba47d2e2917109bf6839e0b00a496adcfe1\",\"license\":\"UNLICENSED\"},\"contracts/BBTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\n/**\\r\\n * @title BBTypes\\r\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u7c7b\\u578b\\u5b9a\\u4e49\\r\\n */\\r\\n\\r\\n// \\u6e38\\u620f\\u72b6\\u6001\\r\\nenum GameState {\\r\\n    NONE,\\r\\n    WAITING,\\r\\n    FIRST_BETTING,\\r\\n    SECOND_BETTING,\\r\\n    ENDED,\\r\\n    SETTLED,\\r\\n    LIQUIDATED\\r\\n}\\r\\n\\r\\n// \\u73a9\\u5bb6\\u72b6\\u6001\\r\\nenum PlayerState {\\r\\n    NONE,\\r\\n    JOINED,\\r\\n    READY,\\r\\n    ACTIVE,       // \\u5f53\\u524d\\u53c2\\u4e0e\\u6e38\\u620f\\u4e2d\\uff0c\\u672a\\u5f03\\u724c\\r\\n    FOLDED        // \\u5f03\\u724c\\r\\n}\\r\\n\\r\\n// \\u724c\\u578b\\r\\nenum CardType {\\r\\n    NONE,\\r\\n    NO_BULL,\\r\\n    BULL_1,\\r\\n    BULL_2,\\r\\n    BULL_3,\\r\\n    BULL_4,\\r\\n    BULL_5,\\r\\n    BULL_6,\\r\\n    BULL_7,\\r\\n    BULL_8,\\r\\n    BULL_9,\\r\\n    BULL_BULL,\\r\\n    FIVE_BOMB,\\r\\n    FIVE_SMALL,\\r\\n    FIVE_FLOWERS\\r\\n}\\r\\n\",\"keccak256\":\"0xf2839d776336a822efd1a9145374f9ad2ea44de1a7721be8bb4b201cd29c2e64\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523461003257610011610037565b604051612d916101b182396080518181816126bb01526129af0152612d9190f35b600080fd5b61003f61007e565b610047610102565b565b61005d90610060906001600160a01b031682565b90565b6001600160a01b031690565b61005d90610049565b61005d9061006c565b61008730610075565b608052565b61005d9060401c60ff1690565b61005d905461008c565b61005d905b6001600160401b031690565b61005d90546100a3565b61005d906100a8906001600160401b031682565b906100e261005d6100fe926100be565b82546001600160401b0319166001600160401b03919091161790565b9055565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061012c81610099565b61019e57610139816100b4565b6001600160401b0391908290811603610150575050565b8161017f7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d293610199936100d2565b604051918291826001600160401b03909116815260200190565b0390a1565b63f92ee8a960e01b6000908152600490fdfe6080604052600436101561001257600080fd5b60003560e01c806341d5ffc9146101025780634f1ef286146100fd5780634fb8ed9b146100f857806352d1902d146100f3578063668d6d2b146100ee5780636dde1d50146100e9578063715018a6146100e45780637c33cba7146100df5780638da5cb5b146100da578063a05d5499146100d5578063ad3cb1cc146100d0578063c3867ce0146100cb578063c4d66de8146100c6578063e2b21eac146100c15763f2fde38b03610107576107de565b6107c6565b6107ae565b610780565b610759565b6106d1565b610624565b61060d565b61057c565b610554565b6104f9565b610492565b61046f565b61042f565b61030d565b600080fd5b6001600160a01b031690565b90565b6101248161010c565b0361010757565b905035906101388261011b565b565b90602082820312610107576101189161012b565b9052565b60005b8381106101655750506000910152565b8181015183820152602001610155565b61019661019f6020936101a99361018a815190565b80835293849260200190565b95869101610152565b601f01601f191690565b0190565b61014e9061010c565b6101c66101c2600a9390565b9190565b6000915b8383106101d75750505050565b6101f16101ea6001928451815260200190565b9260200190565b920191906101ca565b80518252906101189061010080610221610240840160208701518582036020870152610175565b94610234604082015160408601906101ad565b61024360608201516060860152565b61025260808201516080860152565b61026160a082015160a0860152565b61027060c082015160c0860152565b60e08181015115159085015201519101906101b6565b90610118916101fa565b906102a661029c835190565b8083529160200190565b90816102b86020830284019460200190565b926000915b8383106102cc57505050505090565b909192939460206102ef6102e883856001950387528951610286565b9760200190565b93019301919392906102bd565b602080825261011892910190610290565b346101075761033461032861032336600461013a565b610c58565b604051918291826102fc565b0390f35b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761036f57604052565b610338565b9061013861038160405190565b928361034e565b6001600160401b03811161036f57602090601f01601f19160190565b90826000939282370152565b909291926103c56103c082610388565b610374565b9381855281830111610107576101389160208501906103a4565b9080601f8301121561010757816020610118933591016103b0565b91909160408184031261010757610411838261012b565b9260208201356001600160401b0381116101075761011892016103df565b61044361043d3660046103fa565b90610db3565b604051005b80610124565b9050359061013882610448565b90602082820312610107576101189161044e565b346101075761044361048236600461045b565b6116fe565b600091031261010757565b34610107576104a2366004610487565b6103346104ad61174a565b6040515b9182918290815260200190565b610118916008021c6001600160a01b031690565b9061011891546104be565b610118600060026104d2565b60208101929161013891906101ad565b3461010757610509366004610487565b6103346105146104dd565b604051918291826104e9565b91906040838203126101075761011890602061053c828661012b565b940161044e565b6020808252610118929101906101fa565b346101075761033461057061056a366004610520565b90611754565b60405191829182610543565b346101075761058c366004610487565b61044361178e565b909182601f83011215610107578135916001600160401b03831161010757602001926001830284011161010757565b906080828203126101075781356001600160401b03811161010757816105ea918401610594565b9290936101186105fd846020850161044e565b93606061053c826040870161044e565b61044361061b3660046105c3565b93929092611cdc565b3461010757610634366004610487565b610334610514611ce9565b909182601f83011215610107578135916001600160401b03831161010757602001926020830284011161010757565b9060608282031261010757610683818361044e565b9260208301356001600160401b03811161010757826106a960409461011893870161063f565b9490950161044e565b9160206101389294936106cd604082019660008301906101ad565b0152565b34610107576106ed6106e436600461066e565b929190916121f5565b906103346106fa60405190565b928392836106b2565b906107106103c083610388565b918252565b61071f6005610703565b640352e302e360dc1b602082015290565b610118610715565b610118610730565b610118610738565b602080825261011892910190610175565b3461010757610769366004610487565b610334610774610740565b60405191829182610748565b346101075761033461079c610796366004610520565b906122a0565b60405191829182901515815260200190565b34610107576104436107c136600461013a565b6125e8565b34610107576104436107d936600461013a565b61264c565b34610107576104436107f136600461013a565b6126a7565b6101189061010c906001600160a01b031682565b610118906107f6565b6101189061080a565b9061082690610813565b600052602052604060002090565b6001600160401b03811161036f5760208091020190565b906107106103c083610834565b610118610120610374565b6001600160401b03811161036f5760200290565b6103c061011891610863565b369037565b9061013861089e61089884610877565b93610863565b83610883565b610118600a610888565b6108b6610858565b9060008252602080808080808080808a0160608152016000815201600081520160008152016000815201600081520160008152016108f26108a4565b905250565b6101186108ae565b60005b82811061090e57505050565b6020906109196108f7565b8184015201610902565b906101386109396109338461084b565b93610834565b601f1901602084016108ff565b6101186101186101189290565b634e487b7160e01b600052603260045260246000fd5b805482101561098c57610983601291600052602060002090565b91020190600090565b610953565b9061099a825190565b81101561098c576020809102010190565b6101189081565b61011890546109ab565b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156109f2575b60208310146109ed57565b6109bc565b91607f16916109e2565b80546000939291610a19610a0f836109d2565b8085529360200190565b9160018116908115610a6b5750600114610a3257505050565b610a459192939450600052602060002090565b916000925b818410610a575750500190565b805484840152602090930192600101610a4a565b92949550505060ff1916825215156020020190565b90610118916109fc565b90610138610aa492610a9b60405190565b93848092610a80565b038361034e565b6101189061010c565b6101189054610aab565b9061014e9061010c565b610118905b60ff1690565b6101189054610ac8565b610ae96101c2600a9390565b6000915b838310610afa5750505050565b610b1b610b14600192610b0c856109b2565b815260200190565b9260010190565b92019190610aed565b906101a98161014093610add565b90610138610aa492610b4360405190565b93848092610b24565b90610138610c126008610b5d610858565b94610b6e610b6a826109b2565b8752565b610b84610b7d60018301610a8a565b6020880152565b610b9c610b9360028301610ab4565b60408801610abe565b610bb2610bab600383016109b2565b6060880152565b610bc8610bc1600483016109b2565b6080880152565b610bde610bd7600583016109b2565b60a0880152565b610bf4610bed600683016109b2565b60c0880152565b610c0c610c0360078301610ad3565b151560e0880152565b01610b32565b610100840152565b61011890610b4c565b801515610124565b9050519061013882610c23565b906020828203126101075761011891610c2b565b6040513d6000823e3d90fd5b6001610c6b610c67838361081c565b5490565b610c7481610923565b9282600092610c836000610946565b915b610c92575b505050505090565b80821015610d8e5781610cba610cb4610d1e94610caf878a61081c565b610969565b50610c1a565b610cc48289610991565b52610ccf8188610991565b506020610ce5610ce0806002610ab4565b610813565b610cf987610cf3858c610991565b51015190565b90610d0360405190565b95869283918291631d29fc8960e21b83528a600484016106b2565b03915afa908115610d8957610d4f610d559288958891610d5b575b5060e0610d46848c610991565b51019015159052565b60010190565b91610c85565b610d7c915060203d8111610d82575b610d74818361034e565b810190610c38565b38610d39565b503d610d6a565b610c4c565b610c8a565b9061013891610da06126b0565b9061013891610dae81612739565b612763565b9061013891610d93565b610dce90610dc9612827565b61152c565b610138612885565b61010c6101186101189290565b61011890610dd6565b15610df357565b60405162461bcd60e51b8152602060048201526016602482015275496e76616c69642062616e6b6572206164647265737360501b604482015280606481015b0390fd5b15610e3d57565b60405162461bcd60e51b815260206004820152601260248201527152657761726420706f6f6c20696e2075736560701b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b9190610e98565b9290565b8203918211610ea357565b610e77565b634e487b7160e01b600052600060045260246000fd5b90600019905b9181191691161790565b90610ede610118610ee592610946565b8254610ebe565b9055565b61011890546109d2565b9160001960089290920291821b911b610ec4565b9190610f18610118610ee593610946565b908354610ef3565b61013891600091610f07565b818110610f37575050565b80610f456000600193610f20565b01610f2c565b9190601f8111610f5a57505050565b610f6c61013893600052602060002090565b906020601f840181900483019310610f8f575b6020601f909101045b0190610f2c565b9091508190610f7f565b9060001960089091021c191690565b81610fb291610f99565b906002021790565b9080821461109757610fcb81610ee9565b906001600160401b03821161036f57610fee82610fe885546109d2565b85610f4b565b600090601f831160011461101c57610ee5929160009183611011575b5050610fa8565b01549050388061100a565b90611031601f19841692600052602060002090565b9061104185600052602060002090565b92815b81811061107f57509160029391856001969410611065575b50505002019055565b611075910154601f841690610f99565b905538808061105c565b91936001806020928787015481550195019201611044565b5050565b9061013891610fba565b906001600160a01b0390610ec4565b906110c4610118610ee592610813565b82546110a5565b9060ff90610ec4565b906110e4610118610ee592151590565b82546110cb565b906110fe90600019906020036008021c90565b8154169055565b91909182821061111457505050565b6101389281019101610f2c565b90600160401b811161036f5761013891600a90611105565b81811461109757600a91611156610e946001926101188686611121565b9204918154916000925b84841061116e575050505050565b6001611178819290565b92019384549281850155019290611160565b9061013891611139565b81810361119f575050565b600880836111bb6111b5600061013897016109b2565b85610ece565b6111cb600182016001860161109b565b6111e36111da60028301610ab4565b600286016110b4565b6111fb6111f2600383016109b2565b60038601610ece565b61121361120a600483016109b2565b60048601610ece565b61122b611222600583016109b2565b60058601610ece565b61124361123a600683016109b2565b60068601610ece565b61125b61125260078301610ad3565b600786016110d4565b01910161118a565b91906112725761013891611194565b610ea8565b634e487b7160e01b600052603160045260246000fd5b906000916112ab6112a382600052602060002090565b928354610fa8565b905555565b919290602082101561130857601f84116001146112d257610ee5929350610fa8565b50906113036101389360016112fa6112ef85600052602060002090565b92601f602091010490565b82019101610f2c565b61128d565b50611341829361131f600194600052602060002090565b610f886020601f860104820192601f861680611349575b50601f602091010490565b600202179055565b611355908886036110eb565b38611336565b929091600160401b821161036f57602011156113a257602081101561138357610ee591610fa8565b60019160ff191661139984600052602060002090565b55600202019055565b60019150600202019055565b9081546113ba816109d2565b908183116113e3575b8183106113d1575b50505050565b6113da936112b0565b388080806113cb565b6113ef8383838761135b565b6113c3565b6000610138916113ae565b9060000361127257610138906113f4565b61013890600a810190610f2c565b906000036112725761013890611410565b600060086101389261144383808301610f20565b61145083600183016113ff565b8260028201556114638360038301610f20565b6114708360048301610f20565b61147d8360058301610f20565b61148a8360068301610f20565b8260078201550161141e565b90600003611272576101389061142f565b805480156114ca5760001901906114c76114c18383610969565b90611496565b55565b611277565b3d156114e9576114de3d610703565b903d6000602084013e565b606090565b156114f557565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b60009061155361154361153e84610de3565b61010c565b61154c3361010c565b1415610dec565b61155d81336128f7565b919092611570610ce0610ce06002610ab4565b602061157b60405190565b918290631d29fc8960e21b825281806115988833600484016106b2565b03915afa908115610d89576101186115ca600661161a97611604956115ff9588916116df575b506116d1575b016109b2565b966001906115f06101186115e1610c67338661081c565b6115ea85610946565b90610e8d565b8103611686575b50339061081c565b6114a7565b61160d81610946565b8411611656575b50610946565b7f0706e9f5d874e7d7db036db12b7763a4c9b38db9708af1330751f862cbc1ffae61165161164733610813565b936104b160405190565b0390a3565b8061168091611667610ce033610813565b6040518781805b03925af161167a6114cf565b506114ee565b38611614565b6116cb906116c56116b961169a338661081c565b6116b36116aa610c67338961081c565b6115ea88610946565b90610969565b5091610caf338661081c565b90611263565b386115f7565b6116da87610e36565b6115c4565b6116f8915060203d602011610d8257610d74818361034e565b386115be565b61013890610dbd565b6101189061171361299e565b611741565b6101187f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610946565b50610118611718565b6101186000611707565b6101189161176a916117646108f7565b506128f7565b9050610c1a565b6117796129da565b6101386101386117896000610de3565b612a11565b610138611771565b90610dce949392916117a6612827565b611af4565b156117b257565b60405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b6044820152606490fd5b610acd6101186101189290565b61011860646117ef565b6101186101186101189260ff1690565b1561181d57565b60405162461bcd60e51b8152602060048201526017602482015276496e76616c69642077696e2070726f626162696c69747960481b6044820152606490fd5b1561186357565b60405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b6044820152606490fd5b6101189136916103b0565b6000198114610ea35760010190565b906118c0815190565b906001600160401b03821161036f576118dd82610fe885546109d2565b602090601f831160011461190a57610ee59291600091836118ff575050610fa8565b01519050388061100a565b601f1983169161191f85600052602060002090565b9260005b818110611953575091600293918560019694106119435750505002019055565b611075910151601f841690610f99565b91936020600181928787015181550195019201611923565b90610138916118b7565b610118905161010c565b600a91611995610e946001926101188686611121565b92049160005b8381106119a85750505050565b60019060206119b8610118865190565b940193818401550161199b565b906101389161197f565b6008611a98610100610138946119ef6119e9600083015190565b86610ece565b611a066119fd602083015190565b6001870161196b565b611a1e611a1560408301611975565b600287016110b4565b611a35611a2c606083015190565b60038701610ece565b611a4c611a43608083015190565b60048701610ece565b611a63611a5a60a083015190565b60058701610ece565b611a7a611a7160c083015190565b60068701610ece565b611a93611a8a60e0830151151590565b600787016110d4565b015190565b91016119c5565b919061127257610138916119cf565b80549190600160401b83101561036f5782611ad191600161013895018155610969565b90611a9f565b9081526060810193926101389290916040916106cd906020830152565b7f6d3e1386229e2cb9911be0a8d83dbd798fc01a2de4f78f45af7300888acfe06a92611c7e611c8292611c8794979697611b77600091611b3383610946565b8b1180611cc6575b611b44906117ab565b611b4d83610946565b8a1180611ca8575b611b5e90611816565b611b6986341461185c565b611b716108f7565b9361189d565b6020830152611bdb611b88826109b2565b94611b9b611b95876118a8565b84610ece565b611ba6838501968752565b611bb33360408601610abe565b611bbe816060860152565b611bc98b6080860152565b611bd48a60a0860152565b60c0840152565b80151560e0830152611c65611bf0600a610877565b91611c04611bfd82610946565b8092850152565b611c0f816020850152565b611c1a816040850152565b611c25816060850152565b611c30816080850152565b611c3b8160a0850152565b611c468160c0850152565b611c518160e0850152565b611c5d81610100850152565b610120830152565b610100820152611c7961011833600161081c565b611aae565b5190565b610946565b91611c9133610813565b93611651611c9e60405190565b9283923484611ad7565b50611b5e611cbc611cb76117fc565b611806565b8b11159050611b55565b50611b44611cd384610946565b87119050611b3b565b9061013894939291611796565b61011860007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b01610ab4565b15611d1d57565b60405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964207461626c6560981b6044820152606490fd5b9493929190611d67610ce0610ce06002610ab4565b956020611d7360405190565b978890635ab8933560e11b82528180611d8f33600483016104e9565b03915afa968715610d8957611db597611db091600091611db9575b50611d16565b611dd8565b9091565b611dd2915060203d602011610d8257610d74818361034e565b38611daa565b90611dee9594939291611de9612827565b611f3b565b9091610138612885565b905051906101388261011b565b906020828203126101075761011891611df8565b15611e2057565b60405162461bcd60e51b8152602060048201526016602482015275696e76616c69642062616e6b6572206164647265737360501b6044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b8115611e7e570690565b611e5e565b91908201809211610ea357565b15611e9757565b60405162461bcd60e51b815260206004820152601a60248201527f57696e6e657220696e646578206f7574206f6620626f756e64730000000000006044820152606490fd5b919081101561098c576020020190565b356101188161011b565b15611efd57565b60405162461bcd60e51b8152602060048201526016602482015275496e76616c69642077696e6e6572206164647265737360501b6044820152606490fd5b9594959392935050611f4f610ce033610813565b926020611f5b60405190565b636240508960e11b815294859060049082905afa938415610d89576000946121c4575b50600095611fb183611f8f89610de3565b96611fac611f9c8961010c565b611fa58361010c565b1415611e19565b6128f7565b949050611fbf8886016109b2565b611fcb6101c28a610946565b146121b5576006850192611fde846109b2565b956004810196611ff36101c26101188a6109b2565b106121a45782906120038b610946565b82146121925761203a6101c26101186005612033612022338d8c612aac565b61202d611cb76117fc565b90611e74565b94016109b2565b1061205057505050505050506101189092610946565b6120ac6120a66120a18c966120dc966120fd99966101189d9f966120766120bc98610946565b938d6120826001610946565b8311612158575b505061209561209c9190565b8410611e90565b611edc565b611eec565b9a61010c565b6120b58b61010c565b1415611ef6565b6120d66120c8876109b2565b6120d1836109b2565b610e8d565b90610ece565b806120e9610ce089610813565b6120f2866109b2565b60405190818061166e565b61210f612109836109b2565b91610946565b61211833610813565b907f8b7985a52210ce409ea99655babe77d75168039a483252bb0f6d89ab695bc2e461215061214689610813565b946104b160405190565b0390a46109b2565b8261209c9396506121846120959361217d612189946121776001610946565b90611e83565b3391612aac565b611e74565b9491508d612089565b50505050505050506101189092610946565b505050505050506101189092610946565b50505050506101189092610946565b6121e791945060203d6020116121ee575b6121df818361034e565b810190611e05565b9238611f7e565b503d6121d5565b611db593929190600080611d52565b1561220b57565b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c1bdbdb081251608a1b6044820152606490fd5b9061224b825490565b6122548161084b565b926122686020850191600052602060002090565b6000915b8383106122795750505050565b6012602060019261228985610c1a565b81520192019201919061226c565b61011890612242565b6122e291906000916122c06122b761153e85610de3565b61154c8461010c565b6122d36122cc84610946565b8211612204565b6122e76001948593600161081c565b612297565b6122f084610946565b945b6122ff575b505050905090565b61230a610118825190565b8510156123405761231f84610cf38784610991565b82146123385761233183949560010190565b94936122f2565b505091505090565b6122f7565b6101189060401c610acd565b6101189054612345565b610118905b6001600160401b031690565b610118905461235b565b6123606101186101189290565b906001600160401b0390610ec4565b612360610118610118926001600160401b031690565b906123b8610118610ee592612392565b8254612383565b9060ff60401b9060401b610ec4565b906123de610118610ee592151590565b82546123bf565b61014e90612376565b60208101929161013891906123e5565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00908161243a61243461243083612351565b1590565b9161236c565b9060009261244784612376565b6001600160401b0384161480612541575b60019361247461246786612376565b916001600160401b031690565b14908161251d575b155b9081612514575b50612505576124ae90826124a58661249c87612376565b980197886123a8565b6124f657612590565b6124b757505050565b6124e56124f1927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2946123ce565b604051918291826123ee565b0390a1565b61250084876123ce565b612590565b63f92ee8a960e01b8452600484fd5b15905038612485565b905061247e61252b30610813565b3b6125386101c288610946565b1491905061247c565b5081612458565b1561254f57565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c69642067616d65206d61696e206164647265737360381b6044820152606490fd5b6125d49061259d33612b4c565b6125a5612b68565b6125ad612b78565b6125cd6125bd61153e6000610de3565b6125c68361010c565b1415612548565b60026110b4565b6101386125e16001610946565b6000610ece565b610138906123fe565b610138906125fd6129da565b61261c906126116125bd61153e6000610de3565b610ce08160026110b4565b7f7b78706aae990345fb7432d302b61e15f0a211419238fd433543cad10d2d462061264660405190565b600090a2565b610138906125f1565b610138906126616129da565b600061266c81610de3565b6126758161010c565b61267e8461010c565b1461268e57505061013890612a11565b631e4fbdf760e01b82528190610e3290600483016104e9565b61013890612655565b6126b930610813565b7f0000000000000000000000000000000000000000000000000000000000000000906126ed6126e78361010c565b9161010c565b14908115612712575b506126fd57565b63703e46dd60e11b600090815260045b036000fd5b90506127286126e7612722612b80565b9261010c565b1415386126f6565b506101386129da565b61013890612730565b9050519061013882610448565b906020828203126101075761011891612742565b91612770610ce084610813565b91602061277c60405190565b6352d1902d60e01b815293849060049082905afa600093816127ec575b506127b657634c9c8ce360e01b600090815261270d8560046104e9565b9091926127c4610118611718565b84036127d557610138929350612b90565b632a87526960e21b60009081526004859052602490fd5b61280f91945060203d602011612816575b612807818361034e565b81019061274f565b9238612799565b503d6127fd565b6101186002610946565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00612851816109b2565b61285961281d565b9081146128695761013891610ece565b633ee5aeb560e01b6000908152600490fd5b6101186001610946565b6101387f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0060006128b361287b565b9101610ece565b156128c157565b60405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081b9bdd08199bdd5b9960921b6044820152606490fd5b9190612909610118600194600161081c565b9060006129166000610946565b94859260009284835b61293d575b505050509061011892610caf612939936128ba565b5090565b909192939461294d610118885490565b821015612997575061296a826129638389610969565b50016109b2565b831461297f578392919060010188959461291f565b9650869350849150610caf9050612939610118612924565b9493612924565b6129a730610813565b6129d36126e77f000000000000000000000000000000000000000000000000000000000000000061010c565b036126fd57565b6129e2611ce9565b33906129f06126e78361010c565b036129f85750565b63118cdaa760e01b60009081529061270d9060046104e9565b612a51612a4b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300610ce084612a4583610ab4565b926110b4565b91610813565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0612a7c60405190565b8080611651565b612a8f61014e9161010c565b60601b90565b01918252565b018092612a83565b61011890610946565b612b1f9061011893612abc600090565b50612b13612ad3612acd6001610946565b43610e8d565b91612add60405190565b9586946020860194409244924292876101a994612a956014602099989596612a958b8099612a9b8289612a95829b612a959d9052565b9081038252038261034e565b612b31612b2a825190565b9160200190565b20612aa3565b61013890612b43612bfc565b61013890612c2b565b61013890612b37565b612b5d612bfc565b610138610138612c3c565b610138612b55565b610138612bfc565b610138612b70565b6101186000611d10610118611718565b90612b9a82612c44565b612ba382610813565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b612bcd60405190565b600090a28051612be06101c26000610946565b1115612bf257612bef91612caa565b50565b5050610138612c87565b612c07612430612cd1565b612c0d57565b631afcd79f60e31b6000908152600490fd5b61013890612661612bfc565b61013890612c1f565b610dce612bfc565b610138612c34565b6000813b612c546101c283610946565b14612c6f579061013891612c69610118611718565b016110b4565b610e328192634c9c8ce360e01b8352600483016104e9565b6000612c9281610946565b3411612c9b5750565b63b398979f60e01b8152600490fd5b60008061011893612cb9606090565b50602081519101845af4612ccb6114cf565b91612cfa565b6101187ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00612351565b90612d055750612d55565b815190600091612d176101c284610946565b1480612d40575b612d2757505090565b639996b31560e01b82528190610e3290600483016104e9565b50803b612d4f6101c284610946565b14612d1e565b8051600090612d666101c283610946565b1115612d755750805190602001fd5b63d6bda27560e01b8152600490fdfea164736f6c634300081c000a",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806341d5ffc9146101025780634f1ef286146100fd5780634fb8ed9b146100f857806352d1902d146100f3578063668d6d2b146100ee5780636dde1d50146100e9578063715018a6146100e45780637c33cba7146100df5780638da5cb5b146100da578063a05d5499146100d5578063ad3cb1cc146100d0578063c3867ce0146100cb578063c4d66de8146100c6578063e2b21eac146100c15763f2fde38b03610107576107de565b6107c6565b6107ae565b610780565b610759565b6106d1565b610624565b61060d565b61057c565b610554565b6104f9565b610492565b61046f565b61042f565b61030d565b600080fd5b6001600160a01b031690565b90565b6101248161010c565b0361010757565b905035906101388261011b565b565b90602082820312610107576101189161012b565b9052565b60005b8381106101655750506000910152565b8181015183820152602001610155565b61019661019f6020936101a99361018a815190565b80835293849260200190565b95869101610152565b601f01601f191690565b0190565b61014e9061010c565b6101c66101c2600a9390565b9190565b6000915b8383106101d75750505050565b6101f16101ea6001928451815260200190565b9260200190565b920191906101ca565b80518252906101189061010080610221610240840160208701518582036020870152610175565b94610234604082015160408601906101ad565b61024360608201516060860152565b61025260808201516080860152565b61026160a082015160a0860152565b61027060c082015160c0860152565b60e08181015115159085015201519101906101b6565b90610118916101fa565b906102a661029c835190565b8083529160200190565b90816102b86020830284019460200190565b926000915b8383106102cc57505050505090565b909192939460206102ef6102e883856001950387528951610286565b9760200190565b93019301919392906102bd565b602080825261011892910190610290565b346101075761033461032861032336600461013a565b610c58565b604051918291826102fc565b0390f35b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b0382111761036f57604052565b610338565b9061013861038160405190565b928361034e565b6001600160401b03811161036f57602090601f01601f19160190565b90826000939282370152565b909291926103c56103c082610388565b610374565b9381855281830111610107576101389160208501906103a4565b9080601f8301121561010757816020610118933591016103b0565b91909160408184031261010757610411838261012b565b9260208201356001600160401b0381116101075761011892016103df565b61044361043d3660046103fa565b90610db3565b604051005b80610124565b9050359061013882610448565b90602082820312610107576101189161044e565b346101075761044361048236600461045b565b6116fe565b600091031261010757565b34610107576104a2366004610487565b6103346104ad61174a565b6040515b9182918290815260200190565b610118916008021c6001600160a01b031690565b9061011891546104be565b610118600060026104d2565b60208101929161013891906101ad565b3461010757610509366004610487565b6103346105146104dd565b604051918291826104e9565b91906040838203126101075761011890602061053c828661012b565b940161044e565b6020808252610118929101906101fa565b346101075761033461057061056a366004610520565b90611754565b60405191829182610543565b346101075761058c366004610487565b61044361178e565b909182601f83011215610107578135916001600160401b03831161010757602001926001830284011161010757565b906080828203126101075781356001600160401b03811161010757816105ea918401610594565b9290936101186105fd846020850161044e565b93606061053c826040870161044e565b61044361061b3660046105c3565b93929092611cdc565b3461010757610634366004610487565b610334610514611ce9565b909182601f83011215610107578135916001600160401b03831161010757602001926020830284011161010757565b9060608282031261010757610683818361044e565b9260208301356001600160401b03811161010757826106a960409461011893870161063f565b9490950161044e565b9160206101389294936106cd604082019660008301906101ad565b0152565b34610107576106ed6106e436600461066e565b929190916121f5565b906103346106fa60405190565b928392836106b2565b906107106103c083610388565b918252565b61071f6005610703565b640352e302e360dc1b602082015290565b610118610715565b610118610730565b610118610738565b602080825261011892910190610175565b3461010757610769366004610487565b610334610774610740565b60405191829182610748565b346101075761033461079c610796366004610520565b906122a0565b60405191829182901515815260200190565b34610107576104436107c136600461013a565b6125e8565b34610107576104436107d936600461013a565b61264c565b34610107576104436107f136600461013a565b6126a7565b6101189061010c906001600160a01b031682565b610118906107f6565b6101189061080a565b9061082690610813565b600052602052604060002090565b6001600160401b03811161036f5760208091020190565b906107106103c083610834565b610118610120610374565b6001600160401b03811161036f5760200290565b6103c061011891610863565b369037565b9061013861089e61089884610877565b93610863565b83610883565b610118600a610888565b6108b6610858565b9060008252602080808080808080808a0160608152016000815201600081520160008152016000815201600081520160008152016108f26108a4565b905250565b6101186108ae565b60005b82811061090e57505050565b6020906109196108f7565b8184015201610902565b906101386109396109338461084b565b93610834565b601f1901602084016108ff565b6101186101186101189290565b634e487b7160e01b600052603260045260246000fd5b805482101561098c57610983601291600052602060002090565b91020190600090565b610953565b9061099a825190565b81101561098c576020809102010190565b6101189081565b61011890546109ab565b634e487b7160e01b600052602260045260246000fd5b90600160028304921680156109f2575b60208310146109ed57565b6109bc565b91607f16916109e2565b80546000939291610a19610a0f836109d2565b8085529360200190565b9160018116908115610a6b5750600114610a3257505050565b610a459192939450600052602060002090565b916000925b818410610a575750500190565b805484840152602090930192600101610a4a565b92949550505060ff1916825215156020020190565b90610118916109fc565b90610138610aa492610a9b60405190565b93848092610a80565b038361034e565b6101189061010c565b6101189054610aab565b9061014e9061010c565b610118905b60ff1690565b6101189054610ac8565b610ae96101c2600a9390565b6000915b838310610afa5750505050565b610b1b610b14600192610b0c856109b2565b815260200190565b9260010190565b92019190610aed565b906101a98161014093610add565b90610138610aa492610b4360405190565b93848092610b24565b90610138610c126008610b5d610858565b94610b6e610b6a826109b2565b8752565b610b84610b7d60018301610a8a565b6020880152565b610b9c610b9360028301610ab4565b60408801610abe565b610bb2610bab600383016109b2565b6060880152565b610bc8610bc1600483016109b2565b6080880152565b610bde610bd7600583016109b2565b60a0880152565b610bf4610bed600683016109b2565b60c0880152565b610c0c610c0360078301610ad3565b151560e0880152565b01610b32565b610100840152565b61011890610b4c565b801515610124565b9050519061013882610c23565b906020828203126101075761011891610c2b565b6040513d6000823e3d90fd5b6001610c6b610c67838361081c565b5490565b610c7481610923565b9282600092610c836000610946565b915b610c92575b505050505090565b80821015610d8e5781610cba610cb4610d1e94610caf878a61081c565b610969565b50610c1a565b610cc48289610991565b52610ccf8188610991565b506020610ce5610ce0806002610ab4565b610813565b610cf987610cf3858c610991565b51015190565b90610d0360405190565b95869283918291631d29fc8960e21b83528a600484016106b2565b03915afa908115610d8957610d4f610d559288958891610d5b575b5060e0610d46848c610991565b51019015159052565b60010190565b91610c85565b610d7c915060203d8111610d82575b610d74818361034e565b810190610c38565b38610d39565b503d610d6a565b610c4c565b610c8a565b9061013891610da06126b0565b9061013891610dae81612739565b612763565b9061013891610d93565b610dce90610dc9612827565b61152c565b610138612885565b61010c6101186101189290565b61011890610dd6565b15610df357565b60405162461bcd60e51b8152602060048201526016602482015275496e76616c69642062616e6b6572206164647265737360501b604482015280606481015b0390fd5b15610e3d57565b60405162461bcd60e51b815260206004820152601260248201527152657761726420706f6f6c20696e2075736560701b6044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b9190610e98565b9290565b8203918211610ea357565b610e77565b634e487b7160e01b600052600060045260246000fd5b90600019905b9181191691161790565b90610ede610118610ee592610946565b8254610ebe565b9055565b61011890546109d2565b9160001960089290920291821b911b610ec4565b9190610f18610118610ee593610946565b908354610ef3565b61013891600091610f07565b818110610f37575050565b80610f456000600193610f20565b01610f2c565b9190601f8111610f5a57505050565b610f6c61013893600052602060002090565b906020601f840181900483019310610f8f575b6020601f909101045b0190610f2c565b9091508190610f7f565b9060001960089091021c191690565b81610fb291610f99565b906002021790565b9080821461109757610fcb81610ee9565b906001600160401b03821161036f57610fee82610fe885546109d2565b85610f4b565b600090601f831160011461101c57610ee5929160009183611011575b5050610fa8565b01549050388061100a565b90611031601f19841692600052602060002090565b9061104185600052602060002090565b92815b81811061107f57509160029391856001969410611065575b50505002019055565b611075910154601f841690610f99565b905538808061105c565b91936001806020928787015481550195019201611044565b5050565b9061013891610fba565b906001600160a01b0390610ec4565b906110c4610118610ee592610813565b82546110a5565b9060ff90610ec4565b906110e4610118610ee592151590565b82546110cb565b906110fe90600019906020036008021c90565b8154169055565b91909182821061111457505050565b6101389281019101610f2c565b90600160401b811161036f5761013891600a90611105565b81811461109757600a91611156610e946001926101188686611121565b9204918154916000925b84841061116e575050505050565b6001611178819290565b92019384549281850155019290611160565b9061013891611139565b81810361119f575050565b600880836111bb6111b5600061013897016109b2565b85610ece565b6111cb600182016001860161109b565b6111e36111da60028301610ab4565b600286016110b4565b6111fb6111f2600383016109b2565b60038601610ece565b61121361120a600483016109b2565b60048601610ece565b61122b611222600583016109b2565b60058601610ece565b61124361123a600683016109b2565b60068601610ece565b61125b61125260078301610ad3565b600786016110d4565b01910161118a565b91906112725761013891611194565b610ea8565b634e487b7160e01b600052603160045260246000fd5b906000916112ab6112a382600052602060002090565b928354610fa8565b905555565b919290602082101561130857601f84116001146112d257610ee5929350610fa8565b50906113036101389360016112fa6112ef85600052602060002090565b92601f602091010490565b82019101610f2c565b61128d565b50611341829361131f600194600052602060002090565b610f886020601f860104820192601f861680611349575b50601f602091010490565b600202179055565b611355908886036110eb565b38611336565b929091600160401b821161036f57602011156113a257602081101561138357610ee591610fa8565b60019160ff191661139984600052602060002090565b55600202019055565b60019150600202019055565b9081546113ba816109d2565b908183116113e3575b8183106113d1575b50505050565b6113da936112b0565b388080806113cb565b6113ef8383838761135b565b6113c3565b6000610138916113ae565b9060000361127257610138906113f4565b61013890600a810190610f2c565b906000036112725761013890611410565b600060086101389261144383808301610f20565b61145083600183016113ff565b8260028201556114638360038301610f20565b6114708360048301610f20565b61147d8360058301610f20565b61148a8360068301610f20565b8260078201550161141e565b90600003611272576101389061142f565b805480156114ca5760001901906114c76114c18383610969565b90611496565b55565b611277565b3d156114e9576114de3d610703565b903d6000602084013e565b606090565b156114f557565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b60009061155361154361153e84610de3565b61010c565b61154c3361010c565b1415610dec565b61155d81336128f7565b919092611570610ce0610ce06002610ab4565b602061157b60405190565b918290631d29fc8960e21b825281806115988833600484016106b2565b03915afa908115610d89576101186115ca600661161a97611604956115ff9588916116df575b506116d1575b016109b2565b966001906115f06101186115e1610c67338661081c565b6115ea85610946565b90610e8d565b8103611686575b50339061081c565b6114a7565b61160d81610946565b8411611656575b50610946565b7f0706e9f5d874e7d7db036db12b7763a4c9b38db9708af1330751f862cbc1ffae61165161164733610813565b936104b160405190565b0390a3565b8061168091611667610ce033610813565b6040518781805b03925af161167a6114cf565b506114ee565b38611614565b6116cb906116c56116b961169a338661081c565b6116b36116aa610c67338961081c565b6115ea88610946565b90610969565b5091610caf338661081c565b90611263565b386115f7565b6116da87610e36565b6115c4565b6116f8915060203d602011610d8257610d74818361034e565b386115be565b61013890610dbd565b6101189061171361299e565b611741565b6101187f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610946565b50610118611718565b6101186000611707565b6101189161176a916117646108f7565b506128f7565b9050610c1a565b6117796129da565b6101386101386117896000610de3565b612a11565b610138611771565b90610dce949392916117a6612827565b611af4565b156117b257565b60405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081c995dd85c9908185b5bdd5b9d605a1b6044820152606490fd5b610acd6101186101189290565b61011860646117ef565b6101186101186101189260ff1690565b1561181d57565b60405162461bcd60e51b8152602060048201526017602482015276496e76616c69642077696e2070726f626162696c69747960481b6044820152606490fd5b1561186357565b60405162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e742066756e647360701b6044820152606490fd5b6101189136916103b0565b6000198114610ea35760010190565b906118c0815190565b906001600160401b03821161036f576118dd82610fe885546109d2565b602090601f831160011461190a57610ee59291600091836118ff575050610fa8565b01519050388061100a565b601f1983169161191f85600052602060002090565b9260005b818110611953575091600293918560019694106119435750505002019055565b611075910151601f841690610f99565b91936020600181928787015181550195019201611923565b90610138916118b7565b610118905161010c565b600a91611995610e946001926101188686611121565b92049160005b8381106119a85750505050565b60019060206119b8610118865190565b940193818401550161199b565b906101389161197f565b6008611a98610100610138946119ef6119e9600083015190565b86610ece565b611a066119fd602083015190565b6001870161196b565b611a1e611a1560408301611975565b600287016110b4565b611a35611a2c606083015190565b60038701610ece565b611a4c611a43608083015190565b60048701610ece565b611a63611a5a60a083015190565b60058701610ece565b611a7a611a7160c083015190565b60068701610ece565b611a93611a8a60e0830151151590565b600787016110d4565b015190565b91016119c5565b919061127257610138916119cf565b80549190600160401b83101561036f5782611ad191600161013895018155610969565b90611a9f565b9081526060810193926101389290916040916106cd906020830152565b7f6d3e1386229e2cb9911be0a8d83dbd798fc01a2de4f78f45af7300888acfe06a92611c7e611c8292611c8794979697611b77600091611b3383610946565b8b1180611cc6575b611b44906117ab565b611b4d83610946565b8a1180611ca8575b611b5e90611816565b611b6986341461185c565b611b716108f7565b9361189d565b6020830152611bdb611b88826109b2565b94611b9b611b95876118a8565b84610ece565b611ba6838501968752565b611bb33360408601610abe565b611bbe816060860152565b611bc98b6080860152565b611bd48a60a0860152565b60c0840152565b80151560e0830152611c65611bf0600a610877565b91611c04611bfd82610946565b8092850152565b611c0f816020850152565b611c1a816040850152565b611c25816060850152565b611c30816080850152565b611c3b8160a0850152565b611c468160c0850152565b611c518160e0850152565b611c5d81610100850152565b610120830152565b610100820152611c7961011833600161081c565b611aae565b5190565b610946565b91611c9133610813565b93611651611c9e60405190565b9283923484611ad7565b50611b5e611cbc611cb76117fc565b611806565b8b11159050611b55565b50611b44611cd384610946565b87119050611b3b565b9061013894939291611796565b61011860007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b01610ab4565b15611d1d57565b60405162461bcd60e51b815260206004820152600d60248201526c696e76616c6964207461626c6560981b6044820152606490fd5b9493929190611d67610ce0610ce06002610ab4565b956020611d7360405190565b978890635ab8933560e11b82528180611d8f33600483016104e9565b03915afa968715610d8957611db597611db091600091611db9575b50611d16565b611dd8565b9091565b611dd2915060203d602011610d8257610d74818361034e565b38611daa565b90611dee9594939291611de9612827565b611f3b565b9091610138612885565b905051906101388261011b565b906020828203126101075761011891611df8565b15611e2057565b60405162461bcd60e51b8152602060048201526016602482015275696e76616c69642062616e6b6572206164647265737360501b6044820152606490fd5b634e487b7160e01b600052601260045260246000fd5b8115611e7e570690565b611e5e565b91908201809211610ea357565b15611e9757565b60405162461bcd60e51b815260206004820152601a60248201527f57696e6e657220696e646578206f7574206f6620626f756e64730000000000006044820152606490fd5b919081101561098c576020020190565b356101188161011b565b15611efd57565b60405162461bcd60e51b8152602060048201526016602482015275496e76616c69642077696e6e6572206164647265737360501b6044820152606490fd5b9594959392935050611f4f610ce033610813565b926020611f5b60405190565b636240508960e11b815294859060049082905afa938415610d89576000946121c4575b50600095611fb183611f8f89610de3565b96611fac611f9c8961010c565b611fa58361010c565b1415611e19565b6128f7565b949050611fbf8886016109b2565b611fcb6101c28a610946565b146121b5576006850192611fde846109b2565b956004810196611ff36101c26101188a6109b2565b106121a45782906120038b610946565b82146121925761203a6101c26101186005612033612022338d8c612aac565b61202d611cb76117fc565b90611e74565b94016109b2565b1061205057505050505050506101189092610946565b6120ac6120a66120a18c966120dc966120fd99966101189d9f966120766120bc98610946565b938d6120826001610946565b8311612158575b505061209561209c9190565b8410611e90565b611edc565b611eec565b9a61010c565b6120b58b61010c565b1415611ef6565b6120d66120c8876109b2565b6120d1836109b2565b610e8d565b90610ece565b806120e9610ce089610813565b6120f2866109b2565b60405190818061166e565b61210f612109836109b2565b91610946565b61211833610813565b907f8b7985a52210ce409ea99655babe77d75168039a483252bb0f6d89ab695bc2e461215061214689610813565b946104b160405190565b0390a46109b2565b8261209c9396506121846120959361217d612189946121776001610946565b90611e83565b3391612aac565b611e74565b9491508d612089565b50505050505050506101189092610946565b505050505050506101189092610946565b50505050506101189092610946565b6121e791945060203d6020116121ee575b6121df818361034e565b810190611e05565b9238611f7e565b503d6121d5565b611db593929190600080611d52565b1561220b57565b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c1bdbdb081251608a1b6044820152606490fd5b9061224b825490565b6122548161084b565b926122686020850191600052602060002090565b6000915b8383106122795750505050565b6012602060019261228985610c1a565b81520192019201919061226c565b61011890612242565b6122e291906000916122c06122b761153e85610de3565b61154c8461010c565b6122d36122cc84610946565b8211612204565b6122e76001948593600161081c565b612297565b6122f084610946565b945b6122ff575b505050905090565b61230a610118825190565b8510156123405761231f84610cf38784610991565b82146123385761233183949560010190565b94936122f2565b505091505090565b6122f7565b6101189060401c610acd565b6101189054612345565b610118905b6001600160401b031690565b610118905461235b565b6123606101186101189290565b906001600160401b0390610ec4565b612360610118610118926001600160401b031690565b906123b8610118610ee592612392565b8254612383565b9060ff60401b9060401b610ec4565b906123de610118610ee592151590565b82546123bf565b61014e90612376565b60208101929161013891906123e5565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00908161243a61243461243083612351565b1590565b9161236c565b9060009261244784612376565b6001600160401b0384161480612541575b60019361247461246786612376565b916001600160401b031690565b14908161251d575b155b9081612514575b50612505576124ae90826124a58661249c87612376565b980197886123a8565b6124f657612590565b6124b757505050565b6124e56124f1927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2946123ce565b604051918291826123ee565b0390a1565b61250084876123ce565b612590565b63f92ee8a960e01b8452600484fd5b15905038612485565b905061247e61252b30610813565b3b6125386101c288610946565b1491905061247c565b5081612458565b1561254f57565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c69642067616d65206d61696e206164647265737360381b6044820152606490fd5b6125d49061259d33612b4c565b6125a5612b68565b6125ad612b78565b6125cd6125bd61153e6000610de3565b6125c68361010c565b1415612548565b60026110b4565b6101386125e16001610946565b6000610ece565b610138906123fe565b610138906125fd6129da565b61261c906126116125bd61153e6000610de3565b610ce08160026110b4565b7f7b78706aae990345fb7432d302b61e15f0a211419238fd433543cad10d2d462061264660405190565b600090a2565b610138906125f1565b610138906126616129da565b600061266c81610de3565b6126758161010c565b61267e8461010c565b1461268e57505061013890612a11565b631e4fbdf760e01b82528190610e3290600483016104e9565b61013890612655565b6126b930610813565b7f0000000000000000000000000000000000000000000000000000000000000000906126ed6126e78361010c565b9161010c565b14908115612712575b506126fd57565b63703e46dd60e11b600090815260045b036000fd5b90506127286126e7612722612b80565b9261010c565b1415386126f6565b506101386129da565b61013890612730565b9050519061013882610448565b906020828203126101075761011891612742565b91612770610ce084610813565b91602061277c60405190565b6352d1902d60e01b815293849060049082905afa600093816127ec575b506127b657634c9c8ce360e01b600090815261270d8560046104e9565b9091926127c4610118611718565b84036127d557610138929350612b90565b632a87526960e21b60009081526004859052602490fd5b61280f91945060203d602011612816575b612807818361034e565b81019061274f565b9238612799565b503d6127fd565b6101186002610946565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00612851816109b2565b61285961281d565b9081146128695761013891610ece565b633ee5aeb560e01b6000908152600490fd5b6101186001610946565b6101387f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0060006128b361287b565b9101610ece565b156128c157565b60405162461bcd60e51b815260206004820152600e60248201526d141bdbdb081b9bdd08199bdd5b9960921b6044820152606490fd5b9190612909610118600194600161081c565b9060006129166000610946565b94859260009284835b61293d575b505050509061011892610caf612939936128ba565b5090565b909192939461294d610118885490565b821015612997575061296a826129638389610969565b50016109b2565b831461297f578392919060010188959461291f565b9650869350849150610caf9050612939610118612924565b9493612924565b6129a730610813565b6129d36126e77f000000000000000000000000000000000000000000000000000000000000000061010c565b036126fd57565b6129e2611ce9565b33906129f06126e78361010c565b036129f85750565b63118cdaa760e01b60009081529061270d9060046104e9565b612a51612a4b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300610ce084612a4583610ab4565b926110b4565b91610813565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0612a7c60405190565b8080611651565b612a8f61014e9161010c565b60601b90565b01918252565b018092612a83565b61011890610946565b612b1f9061011893612abc600090565b50612b13612ad3612acd6001610946565b43610e8d565b91612add60405190565b9586946020860194409244924292876101a994612a956014602099989596612a958b8099612a9b8289612a95829b612a959d9052565b9081038252038261034e565b612b31612b2a825190565b9160200190565b20612aa3565b61013890612b43612bfc565b61013890612c2b565b61013890612b37565b612b5d612bfc565b610138610138612c3c565b610138612b55565b610138612bfc565b610138612b70565b6101186000611d10610118611718565b90612b9a82612c44565b612ba382610813565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b612bcd60405190565b600090a28051612be06101c26000610946565b1115612bf257612bef91612caa565b50565b5050610138612c87565b612c07612430612cd1565b612c0d57565b631afcd79f60e31b6000908152600490fd5b61013890612661612bfc565b61013890612c1f565b610dce612bfc565b610138612c34565b6000813b612c546101c283610946565b14612c6f579061013891612c69610118611718565b016110b4565b610e328192634c9c8ce360e01b8352600483016104e9565b6000612c9281610946565b3411612c9b5750565b63b398979f60e01b8152600490fd5b60008061011893612cb9606090565b50602081519101845af4612ccb6114cf565b91612cfa565b6101187ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00612351565b90612d055750612d55565b815190600091612d176101c284610946565b1480612d40575b612d2757505090565b639996b31560e01b82528190610e3290600483016104e9565b50803b612d4f6101c284610946565b14612d1e565b8051600090612d666101c283610946565b1115612d755750805190602001fd5b63d6bda27560e01b8152600490fdfea164736f6c634300081c000a",
  "devdoc": {
    "details": "牛牛游戏奖励池合约，允许庄家创建奖励池，在游戏结束时随机奖励玩家",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createRewardPool(string,uint256,uint256,uint256)": {
        "details": "创建新的奖励池",
        "params": {
          "_rewardPerGame": "每局游戏奖励金额",
          "_totalReward": "总奖励金额",
          "_winProbability": "中奖概率（以百分之一为单位，例如10表示10%的概率）",
          "name": "奖励池名称"
        }
      },
      "getBankerPools(address)": {
        "details": "获取指定地址的所有奖励池",
        "params": {
          "_banker": "庄家地址"
        },
        "returns": {
          "_0": "奖励池信息数组"
        }
      },
      "getRewardPoolInfo(address,uint256)": {
        "details": "获取指定庄家的指定奖励池信息",
        "params": {
          "_banker": "庄家地址",
          "_poolId": "奖励池ID"
        },
        "returns": {
          "_0": "奖励池信息"
        }
      },
      "initialize(address)": {
        "details": "初始化函数，替代构造函数",
        "params": {
          "_gameMainAddr": "游戏主合约地址"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "removeRewardPool(uint256)": {
        "details": "庄家删除奖励池并取回剩余资金",
        "params": {
          "_poolId": "要删除的奖励池ID"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setGameMainAddress(address)": {
        "details": "设置游戏主合约地址",
        "params": {
          "_gameMainAddr": "新的游戏主合约地址"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "tryDistributeReward(uint256,address[],uint256)": {
        "details": "游戏结束时尝试分配奖励",
        "params": {
          "_players": "参与游戏的玩家地址数组",
          "_poolId": "奖励池ID",
          "finalSeed": "最终种子"
        },
        "returns": {
          "_0": "是否分配了奖励"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "title": "BBRewardPool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16120,
        "contract": "contracts/BBRewardPool.sol:BBRewardPool",
        "label": "nextPoolId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 16126,
        "contract": "contracts/BBRewardPool.sol:BBRewardPool",
        "label": "bankerPools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_struct(RewardPoolInfo)19753_storage)dyn_storage)"
      },
      {
        "astId": 16128,
        "contract": "contracts/BBRewardPool.sol:BBRewardPool",
        "label": "gameMainAddr",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 16135,
        "contract": "contracts/BBRewardPool.sol:BBRewardPool",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)25_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(RewardPoolInfo)19753_storage)dyn_storage": {
        "base": "t_struct(RewardPoolInfo)19753_storage",
        "encoding": "dynamic_array",
        "label": "struct RewardPoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)25_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[25]",
        "numberOfBytes": "800"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(RewardPoolInfo)19753_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardPoolInfo[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(RewardPoolInfo)19753_storage)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RewardPoolInfo)19753_storage": {
        "encoding": "inplace",
        "label": "struct RewardPoolInfo",
        "members": [
          {
            "astId": 19734,
            "contract": "contracts/BBRewardPool.sol:BBRewardPool",
            "label": "poolId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19736,
            "contract": "contracts/BBRewardPool.sol:BBRewardPool",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 19738,
            "contract": "contracts/BBRewardPool.sol:BBRewardPool",
            "label": "banker",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 19740,
            "contract": "contracts/BBRewardPool.sol:BBRewardPool",
            "label": "totalAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19742,
            "contract": "contracts/BBRewardPool.sol:BBRewardPool",
            "label": "rewardPerGame",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19744,
            "contract": "contracts/BBRewardPool.sol:BBRewardPool",
            "label": "winProbability",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 19746,
            "contract": "contracts/BBRewardPool.sol:BBRewardPool",
            "label": "remainingAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 19748,
            "contract": "contracts/BBRewardPool.sol:BBRewardPool",
            "label": "inUse",
            "offset": 0,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 19752,
            "contract": "contracts/BBRewardPool.sol:BBRewardPool",
            "label": "__gap",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "576"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}