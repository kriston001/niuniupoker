{
  "address": "0x4d4289eBAa41216f70eEAFc3994C84f8b6a9A869",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721EnumerableForbiddenBatchMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "ERC721OutOfBoundsIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        }
      ],
      "name": "BatchRoomCardPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "CardTypeActiveStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "maxPlayers",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uriSuffix",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        }
      ],
      "name": "CardTypeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxMint",
          "type": "uint256"
        }
      ],
      "name": "CardTypeMaxMintIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "maxPlayers",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uriSuffix",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        }
      ],
      "name": "CardTypeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "RoomCardConsumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        }
      ],
      "name": "RoomCardPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "maxPlayers",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uriSuffix",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        }
      ],
      "name": "addType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "batchBuy",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "consume",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameMainAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveTypes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "maxPlayers",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "uriSuffix",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "maxMint",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct RoomCardNftType[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTypeIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getType",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint8",
              "name": "maxPlayers",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "uriSuffix",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "maxMint",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "rarity",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            },
            {
              "internalType": "uint256[10]",
              "name": "__gap",
              "type": "uint256[10]"
            }
          ],
          "internalType": "struct RoomCardNftType",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserNfts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "has",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "id",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint8",
                  "name": "maxPlayers",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "uriSuffix",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "active",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "maxMint",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "rarity",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "minted",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[10]",
                  "name": "__gap",
                  "type": "uint256[10]"
                }
              ],
              "internalType": "struct RoomCardNftType",
              "name": "nftType",
              "type": "tuple"
            }
          ],
          "internalType": "struct RoomCardNftDetail[]",
          "name": "details",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "hasNft",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        }
      ],
      "name": "increaseMaxMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseTokenURI",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "maxPlayers",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uriSuffix",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameMainAddress",
          "type": "address"
        }
      ],
      "name": "setGameMainAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setTypeActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenNftTypes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTypeId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "maxPlayers",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uriSuffix",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxMint",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        }
      ],
      "name": "updateType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "maxPlayers",
          "type": "uint8"
        }
      ],
      "name": "validateParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb1fe1ea3e6fcb006e27777e361096a04354326b62f43852f6078ef0128ee5f08",
  "receipt": {
    "to": null,
    "from": "0xCf4eC0E2Fa3B3f1f706183128D729a9C86c69e4d",
    "contractAddress": "0x4d4289eBAa41216f70eEAFc3994C84f8b6a9A869",
    "transactionIndex": 8,
    "gasUsed": "3749865",
    "logsBloom": "0x
    "blockHash": "0x9997f81e6f0a9f1c2498dbf479b9c131fbbc5650143e643ef893a31412067aae",
    "transactionHash": "0xb1fe1ea3e6fcb006e27777e361096a04354326b62f43852f6078ef0128ee5f08",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 15726321,
        "transactionHash": "0xb1fe1ea3e6fcb006e27777e361096a04354326b62f43852f6078ef0128ee5f08",
        "address": "0x4d4289eBAa41216f70eEAFc3994C84f8b6a9A869",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 23,
        "blockHash": "0x9997f81e6f0a9f1c2498dbf479b9c131fbbc5650143e643ef893a31412067aae"
      }
    ],
    "blockNumber": 15726321,
    "cumulativeGasUsed": "5254860",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48576e987db7584d29c5cbb1887dec70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721EnumerableForbiddenBatchMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"}],\"name\":\"BatchRoomCardPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"CardTypeActiveStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uriSuffix\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"name\":\"CardTypeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxMint\",\"type\":\"uint256\"}],\"name\":\"CardTypeMaxMintIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uriSuffix\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"name\":\"CardTypeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RoomCardConsumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"}],\"name\":\"RoomCardPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uriSuffix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"name\":\"addType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"batchBuy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"consume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameMainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveTypes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uriSuffix\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RoomCardNftType[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTypeIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getType\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uriSuffix\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RoomCardNftType\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserNfts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"has\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uriSuffix\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256[10]\",\"name\":\"__gap\",\"type\":\"uint256[10]\"}],\"internalType\":\"struct RoomCardNftType\",\"name\":\"nftType\",\"type\":\"tuple\"}],\"internalType\":\"struct RoomCardNftDetail[]\",\"name\":\"details\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"hasNft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"}],\"name\":\"increaseMaxMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uriSuffix\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameMainAddress\",\"type\":\"address\"}],\"name\":\"setGameMainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setTypeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenNftTypes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTypeId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uriSuffix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxMint\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"}],\"name\":\"updateType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"maxPlayers\",\"type\":\"uint8\"}],\"name\":\"validateParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Niu Niu game room card NFT contract with dynamic card types\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"ERC721EnumerableForbiddenBatchMint()\":[{\"details\":\"Batch mint is not allowed.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721OutOfBoundsIndex(address,uint256)\":[{\"details\":\"An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addType(string,uint8,uint256,string,uint256,string)\":{\"details\":\"Add a new card type\",\"params\":{\"maxPlayers\":\"Maximum number of players allowed\",\"name\":\"Name of the card type\",\"price\":\"Price to purchase this card\",\"uriSuffix\":\"URI suffix for metadata\"},\"returns\":{\"_0\":\"The ID of the newly created card type\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"batchBuy(uint256,uint256)\":{\"details\":\"Batch purchase room cards\",\"params\":{\"amount\":\"Purchase quantity\",\"nftTypeId\":\"Card type ID\"},\"returns\":{\"_0\":\"Returns an array of minted room card IDs\"}},\"buy(uint256)\":{\"details\":\"Purchase a room card\",\"params\":{\"nftTypeId\":\"Card type ID\"},\"returns\":{\"_0\":\"Returns the minted room card ID\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"consume(address,uint256)\":{\"details\":\"Consume room card\",\"params\":{\"owner\":\"Owner of the room card\",\"tokenId\":\"Room card ID to be consumed\"}},\"getActiveTypes()\":{\"details\":\"Get all active card types\",\"returns\":{\"_0\":\"Arrays of card type IDs and card types\"}},\"getAllTypeIds()\":{\"details\":\"Get all card type IDs\",\"returns\":{\"_0\":\"Array of all card type IDs\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getType(uint256)\":{\"details\":\"Get card type for a specific token\",\"params\":{\"tokenId\":\"Room card ID\"},\"returns\":{\"_0\":\"Card type information\"}},\"getUserNfts(address)\":{\"details\":\"\\u83b7\\u53d6\\u7528\\u6237\\u62e5\\u6709\\u7684\\u623f\\u5361\\u4fe1\\u606f\",\"params\":{\"userAddress\":\"\\u7528\\u6237\\u5730\\u5740\"},\"returns\":{\"details\":\"\\u623f\\u5361\\u8be6\\u7ec6\\u4fe1\\u606f\\u6570\\u7ec4\",\"has\":\"\\u662f\\u5426\\u62e5\\u6709\\u623f\\u5361\"}},\"hasNft(address)\":{\"details\":\"Check if a user owns any room cards\",\"params\":{\"owner\":\"User address\"},\"returns\":{\"_0\":\"Whether the user owns any room cards\"}},\"initialize(string,string,string)\":{\"details\":\"Initialization function, replaces constructor\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"details\":\"Set base URI\",\"params\":{\"baseURI\":\"New base URI\"}},\"setGameMainAddress(address)\":{\"details\":\"Set the game main contract address\",\"params\":{\"_gameMainAddress\":\"Game main contract address\"}},\"setTypeActive(uint256,bool)\":{\"details\":\"Set a card type's active status\",\"params\":{\"active\":\"New active status\",\"nftTypeId\":\"Card type ID\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"Override tokenURI function, returns different URIs based on room card type\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateType(uint256,uint8,uint256,string,uint256,string)\":{\"details\":\"Update an existing card type\",\"params\":{\"maxPlayers\":\"New maximum number of players\",\"nftTypeId\":\"Card type ID to update\",\"price\":\"New price\",\"uriSuffix\":\"New URI suffix\"}},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"validateParams(uint256,uint8)\":{\"details\":\"Validate if room card meets game parameter requirements\",\"params\":{\"maxPlayers\":\"Maximum number of players\",\"tokenId\":\"Room card ID\"},\"returns\":{\"_0\":\"Whether requirements are met\"}},\"withdraw()\":{\"details\":\"Withdraw ETH from the contract\"}},\"title\":\"BBRoomCard\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BBRoomCardNFT.sol\":\"BBRoomCardNFT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":100},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd861907d1168dcaec2a7846edbaed12feb8bad2d6781dba987be01374f90b495\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\\n    struct ERC721Storage {\\n        // Token name\\n        string _name;\\n\\n        // Token symbol\\n        string _symbol;\\n\\n        mapping(uint256 tokenId => address) _owners;\\n\\n        mapping(address owner => uint256) _balances;\\n\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\\n\\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\\n        assembly {\\n            $.slot := ERC721StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return $._balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        unchecked {\\n            $._balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                $._balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                $._balances[to] += 1;\\n            }\\n        }\\n\\n        $._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        $._tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0xfd473ea8f70e13eaa6475c7e348885b8a32925252e3bc237e07c0e3fde0f10f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721Upgradeable} from \\\"../ERC721Upgradeable.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},\\n * interfere with enumerability and should not be used together with {ERC721Enumerable}.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721Enumerable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721Enumerable\\n    struct ERC721EnumerableStorage {\\n        mapping(address owner => mapping(uint256 index => uint256)) _ownedTokens;\\n        mapping(uint256 tokenId => uint256) _ownedTokensIndex;\\n\\n        uint256[] _allTokens;\\n        mapping(uint256 tokenId => uint256) _allTokensIndex;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721Enumerable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721EnumerableStorageLocation = 0x645e039705490088daad89bae25049a34f4a9072d398537b1ab2425f24cbed00;\\n\\n    function _getERC721EnumerableStorage() private pure returns (ERC721EnumerableStorage storage $) {\\n        assembly {\\n            $.slot := ERC721EnumerableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return $._ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        return $._allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return $._allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        uint256 length = balanceOf(to) - 1;\\n        $._ownedTokens[to][length] = tokenId;\\n        $._ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        $._allTokensIndex[tokenId] = $._allTokens.length;\\n        $._allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = $._ownedTokensIndex[tokenId];\\n\\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = $._ownedTokens[from];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\\n\\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            $._ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete $._ownedTokensIndex[tokenId];\\n        delete _ownedTokensByOwner[lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = $._allTokens.length - 1;\\n        uint256 tokenIndex = $._allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = $._allTokens[lastTokenIndex];\\n\\n        $._allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        $._allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete $._allTokensIndex[tokenId];\\n        $._allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x374714bef85e753a13fdf792ca567ef734351029265f2cce8db533d7a942c740\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xc8ed8d2056934b7675b695dec032f2920c2f5c6cf33a17ca85650940675323ab\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/BBInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\nimport \\\"./BBStructs.sol\\\";\\r\\n\\r\\ninterface IGameTableFactory {\\r\\n    function createGameTable(\\r\\n        uint256 tableId,\\r\\n        string memory tableName,\\r\\n        address bankerAddr,\\r\\n        uint256 betAmount,\\r\\n        uint8 maxPlayers,\\r\\n        address gameMainAddr,\\r\\n        uint8 bankerFeePercent,\\r\\n        uint8 firstRaise,\\r\\n        uint8 secondRaise,\\r\\n        uint256 rewardPoolId\\r\\n    ) external returns (address);\\r\\n}\\r\\n\\r\\ninterface IGameTableImplementation {\\r\\n    function bankerAddr() external view returns (address);\\r\\n    function getTableInfo() external view returns (GameTableView memory);\\r\\n    function getTableInfoShort() external view returns (GameTableInfoShort memory);\\r\\n    function lastActivityTimestamp() external view returns (uint256);\\r\\n    function state() external view returns (GameState);\\r\\n    function rewardPoolId() external view returns (uint256);\\r\\n    function initialize(\\r\\n        uint256 _tableId,\\r\\n        string memory _tableName,\\r\\n        address _bankerAddr,\\r\\n        uint256 _betAmount,\\r\\n        uint8 _maxPlayers,\\r\\n        address _gameMainAddr,\\r\\n        uint8 _bankerFeePercent,\\r\\n        uint8 _firstRaise,\\r\\n        uint8 _secondRaise,\\r\\n        uint256 _rewardPoolId,\\r\\n        uint256 _implementationVersion\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IGameMain {\\r\\n    function isValidGameTable(address) external view returns (bool);\\r\\n    function liquidatorFeePercent() external view returns (uint256);\\r\\n    function playerTimeout() external view returns (uint256);\\r\\n    function tableInactiveTimeout() external view returns (uint256);\\r\\n    function rewardPoolAddress() external view returns (address);\\r\\n    function roomCardAddress() external view returns (address);\\r\\n    function roomLevelAddress() external view returns (address);\\r\\n    function getGameConfig() external view returns (GameConfig memory);\\r\\n    function rewardPoolIsInUse(address, uint256) external view returns (bool);\\r\\n    function userJoinTable(address userAddr) external;\\r\\n    function userLeaveTable(address userAddr) external;\\r\\n}\\r\\n\\r\\ninterface IRewardPool{\\r\\n    function tryDistributeReward(uint256 _poolId, address[] calldata _players, uint256 finalSeed) external  returns (address, uint256);\\r\\n    function isBankerPool(address, uint256) external view returns (bool);\\r\\n    function getRewardPoolInfo(address, uint256) external view returns (RewardPoolInfo memory);\\r\\n}\\r\\n\\r\\ninterface IRoomCardNFT{\\r\\n    function validateParams(uint256, uint8) external view returns (bool);\\r\\n    function hasNft(address) external view returns (bool);\\r\\n    function consume(address, uint256) external;\\r\\n}\",\"keccak256\":\"0x31bc037d6f22f39b622e76414b6b77535958a3a9c37b07cce084179c2e9ea136\",\"license\":\"MIT\"},\"contracts/BBPlayer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\n\\r\\nstruct BBPlayer {\\r\\n    address addr;\\r\\n    PlayerState state;\\r\\n\\r\\n    uint256 totalBet;\\r\\n\\r\\n    bool hasActedThisRound;   // \\u672c\\u8f6e\\u662f\\u5426\\u5df2\\u64cd\\u4f5c\\r\\n    bool isWinner;   // \\u662f\\u5426\\u4e3a\\u8d62\\u5bb6\\r\\n\\r\\n    uint8[5] cards;\\r\\n    CardType cardType;\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\nlibrary BBPlayerLib {\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u51c6\\u5907\\r\\n     */\\r\\n    function playerReady(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.READY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u53d6\\u6d88\\u51c6\\u5907\\r\\n     */\\r\\n    function playerUnready(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u52a0\\u5165\\r\\n     */\\r\\n    function playerJoin(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u5f03\\u724c\\r\\n     */\\r\\n    function playerFold(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.FOLDED;\\r\\n        self.hasActedThisRound = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u73a9\\u5bb6\\u7ee7\\u7eed\\u6e38\\u620f\\r\\n     */\\r\\n    function playerContinue(BBPlayer storage self, uint256 additionalBet) internal {\\r\\n        self.totalBet += additionalBet;\\r\\n        self.state = PlayerState.ACTIVE;\\r\\n        self.hasActedThisRound = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u662f\\u5426\\u6709\\u6548\\r\\n     */\\r\\n    function isValid(BBPlayer storage self) internal view returns (bool) {\\r\\n        return self.addr != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev \\u91cd\\u7f6e\\u73a9\\u5bb6\\u6570\\u636e\\r\\n     */\\r\\n    function playerReset(BBPlayer storage self) internal {\\r\\n        self.state = PlayerState.JOINED;\\r\\n        self.hasActedThisRound = false;\\r\\n        self.totalBet = 0;\\r\\n        self.isWinner = false;\\r\\n        self.cards = [0, 0, 0, 0, 0];\\r\\n        self.cardType = CardType.NONE;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf7d1ee4658a50be6690b6c085733ceb592f91baa15b7b7fb5e27a30e1ae7e215\",\"license\":\"UNLICENSED\"},\"contracts/BBRoomCardNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"./BBStructs.sol\\\";\\r\\nimport \\\"./BBInterfaces.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BBRoomCard\\r\\n * @dev Niu Niu game room card NFT contract with dynamic card types\\r\\n */\\r\\ncontract BBRoomCardNFT is\\r\\n    Initializable,\\r\\n    ERC721Upgradeable,\\r\\n    ERC721EnumerableUpgradeable,\\r\\n    OwnableUpgradeable,\\r\\n    UUPSUpgradeable\\r\\n{\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Room card type structure - combines type and config in one structure\\r\\n    \\r\\n\\r\\n    // Used to generate unique token IDs\\r\\n    uint256 private _tokenIdCounter;\\r\\n\\r\\n    // Used to generate unique card type IDs\\r\\n    uint256 private _nftTypeIdCounter;\\r\\n\\r\\n    // Room card base URI\\r\\n    string private _baseTokenURI;\\r\\n\\r\\n    // Game main contract address\\r\\n    address public gameMainAddress;\\r\\n\\r\\n    // Card types by ID\\r\\n    mapping(uint256 => RoomCardNftType) public nftTypes;\\r\\n\\r\\n    // Card type ID corresponding to each token ID\\r\\n    mapping(uint256 => uint256) public tokenNftTypes;\\r\\n\\r\\n    // Array of all card type IDs\\r\\n    uint256[] private _allNftTypeIds;\\r\\n\\r\\n    // \\u9884\\u7559 25 \\u4e2a slot \\u7ed9\\u5c06\\u6765\\u65b0\\u589e\\u53d8\\u91cf\\u7528\\uff0c\\u9632\\u6b62\\u5b58\\u50a8\\u51b2\\u7a81\\r\\n    uint256[25] private __gap;\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initialization function, replaces constructor\\r\\n     */\\r\\n    function initialize(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        string memory baseTokenURI\\r\\n    ) public initializer {\\r\\n        __ERC721_init(name, symbol);\\r\\n        __ERC721Enumerable_init();\\r\\n        __Ownable_init(msg.sender);\\r\\n        __UUPSUpgradeable_init();\\r\\n\\r\\n        _baseTokenURI = baseTokenURI;\\r\\n        _tokenIdCounter = 1;\\r\\n        _nftTypeIdCounter = 1; // Start from 1\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the game main contract address\\r\\n     * @param _gameMainAddress Game main contract address\\r\\n     */\\r\\n    function setGameMainAddress(address _gameMainAddress) external onlyOwner {\\r\\n        require(_gameMainAddress != address(0), \\\"Invalid game main address\\\");\\r\\n        gameMainAddress = _gameMainAddress;\\r\\n    }\\r\\n\\r\\n    modifier onlyGameTable() {\\r\\n        bool isValidTable = false;\\r\\n        if (gameMainAddress != address(0)) {\\r\\n            if(IGameMain(gameMainAddress).isValidGameTable(msg.sender)){\\r\\n                isValidTable = true;\\r\\n            }else{\\r\\n                isValidTable = false;\\r\\n            }\\r\\n        }\\r\\n        require(isValidTable, \\\"Only game table can call\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a new card type\\r\\n     * @param name Name of the card type\\r\\n     * @param maxPlayers Maximum number of players allowed\\r\\n     * @param price Price to purchase this card\\r\\n     * @param uriSuffix URI suffix for metadata\\r\\n     * @return The ID of the newly created card type\\r\\n     */\\r\\n    function addType(\\r\\n        string memory name,\\r\\n        uint8 maxPlayers,\\r\\n        uint256 price,\\r\\n        string memory uriSuffix,\\r\\n        uint256 maxMint,\\r\\n        string memory rarity\\r\\n    ) external onlyOwner returns (uint256) {\\r\\n        require(bytes(name).length > 0, \\\"Name cannot be empty\\\");\\r\\n        require(maxPlayers > 1, \\\"Max players must be greater than 1\\\");\\r\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\r\\n        require(maxMint > 0, \\\"Max mint must be greater than 0\\\");\\r\\n        require(bytes(rarity).length > 0, \\\"Rarity cannot be empty\\\");\\r\\n\\r\\n        uint256 newNftTypeId = _nftTypeIdCounter;\\r\\n        _nftTypeIdCounter++;\\r\\n\\r\\n        nftTypes[newNftTypeId] = RoomCardNftType({\\r\\n            id: newNftTypeId,\\r\\n            name: name,\\r\\n            maxPlayers: maxPlayers,\\r\\n            price: price,\\r\\n            uriSuffix: uriSuffix,\\r\\n            active: true,\\r\\n            maxMint: maxMint,\\r\\n            rarity: rarity,\\r\\n            minted: 0,\\r\\n            __gap: [uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0), uint256(0)]\\r\\n        });\\r\\n        _allNftTypeIds.push(newNftTypeId);\\r\\n        emit CardTypeAdded(newNftTypeId, name, maxPlayers, price, uriSuffix, maxMint, rarity);\\r\\n        return newNftTypeId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Update an existing card type\\r\\n     * @param nftTypeId Card type ID to update\\r\\n     * @param maxPlayers New maximum number of players\\r\\n     * @param price New price\\r\\n     * @param uriSuffix New URI suffix\\r\\n     */\\r\\n    function updateType(\\r\\n        uint256 nftTypeId,\\r\\n        uint8 maxPlayers,\\r\\n        uint256 price,\\r\\n        string memory uriSuffix,\\r\\n        uint256 maxMint,\\r\\n        string memory rarity\\r\\n    ) external onlyOwner {\\r\\n        require(nftTypes[nftTypeId].id == nftTypeId, \\\"Card type does not exist\\\");\\r\\n        require(maxPlayers > 1, \\\"Max players must be greater than 1\\\");\\r\\n        require(price > 0, \\\"Price must be greater than 0\\\");\\r\\n        require(maxMint > 0, \\\"Max mint must be greater than 0\\\");\\r\\n        require(bytes(rarity).length > 0, \\\"Rarity cannot be empty\\\");\\r\\n        RoomCardNftType storage nftType = nftTypes[nftTypeId];\\r\\n        nftType.maxPlayers = maxPlayers;\\r\\n        nftType.price = price;\\r\\n        nftType.uriSuffix = uriSuffix;\\r\\n        nftType.maxMint = maxMint;\\r\\n        nftType.rarity = rarity;\\r\\n        emit CardTypeUpdated(nftTypeId, maxPlayers, price, uriSuffix, maxMint, rarity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set a card type's active status\\r\\n     * @param nftTypeId Card type ID\\r\\n     * @param active New active status\\r\\n     */\\r\\n    function setTypeActive(uint256 nftTypeId, bool active) external onlyOwner {\\r\\n        // Verify card type exists\\r\\n        require(nftTypes[nftTypeId].id == nftTypeId, \\\"Card type does not exist\\\");\\r\\n\\r\\n        nftTypes[nftTypeId].active = active;\\r\\n        emit CardTypeActiveStatusChanged(nftTypeId, active);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Purchase a room card\\r\\n     * @param nftTypeId Card type ID\\r\\n     * @return Returns the minted room card ID\\r\\n     */\\r\\n    function buy(uint256 nftTypeId) external payable returns (uint256) {\\r\\n        RoomCardNftType storage nftType = nftTypes[nftTypeId];\\r\\n        require(nftType.id == nftTypeId, \\\"Card type does not exist\\\");\\r\\n        require(nftType.active, \\\"Card type not active\\\");\\r\\n        require(msg.value >= nftType.price, \\\"Insufficient payment\\\");\\r\\n        require(nftType.minted < nftType.maxMint, \\\"Max mint reached for this card type\\\");\\r\\n\\r\\n        nftType.minted += 1;\\r\\n        uint256 tokenId = _tokenIdCounter;\\r\\n        _tokenIdCounter++;\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        tokenNftTypes[tokenId] = nftTypeId;\\r\\n        if (msg.value > nftType.price) {\\r\\n            uint256 refundAmount = msg.value - nftType.price;\\r\\n            (bool success, ) = payable(msg.sender).call{value: refundAmount}(\\\"\\\");\\r\\n            require(success, \\\"Refund failed\\\");\\r\\n        }\\r\\n        emit RoomCardPurchased(msg.sender, tokenId, nftType.price, nftTypeId);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Batch purchase room cards\\r\\n     * @param nftTypeId Card type ID\\r\\n     * @param amount Purchase quantity\\r\\n     * @return Returns an array of minted room card IDs\\r\\n     */\\r\\n    function batchBuy(uint256 nftTypeId, uint256 amount) external payable returns (uint256[] memory) {\\r\\n        RoomCardNftType storage nftType = nftTypes[nftTypeId];\\r\\n        require(nftType.id == nftTypeId, \\\"Card type does not exist\\\");\\r\\n        require(nftType.active, \\\"Card type not active\\\");\\r\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n        require(msg.value >= nftType.price * amount, \\\"Insufficient payment\\\");\\r\\n        require(nftType.minted + amount <= nftType.maxMint, \\\"Max mint reached for this card type\\\");\\r\\n\\r\\n        uint256[] memory tokenIds = new uint256[](amount);\\r\\n        for (uint256 i = 0; i < amount; i++) {\\r\\n            nftType.minted += 1;\\r\\n            require(nftType.minted <= nftType.maxMint, \\\"Max mint reached for this card type\\\");\\r\\n\\r\\n            uint256 tokenId = _tokenIdCounter;\\r\\n            _tokenIdCounter++;\\r\\n            _safeMint(msg.sender, tokenId);\\r\\n            tokenIds[i] = tokenId;\\r\\n            tokenNftTypes[tokenId] = nftTypeId;\\r\\n        }\\r\\n        uint256 totalPrice = nftType.price * amount;\\r\\n        if (msg.value > totalPrice) {\\r\\n            uint256 refundAmount = msg.value - totalPrice;\\r\\n            (bool success, ) = payable(msg.sender).call{value: refundAmount}(\\\"\\\");\\r\\n            require(success, \\\"Refund failed\\\");\\r\\n        }\\r\\n        emit BatchRoomCardPurchased(msg.sender, tokenIds, totalPrice, nftTypeId);\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Consume room card\\r\\n     * @param owner Owner of the room card\\r\\n     * @param tokenId Room card ID to be consumed\\r\\n     */\\r\\n    function consume(address owner, uint256 tokenId) external onlyGameTable {\\r\\n        require(_ownerOf(tokenId) == owner, \\\"Not approved or owner\\\");\\r\\n        _burn(tokenId);\\r\\n\\r\\n        emit RoomCardConsumed(owner, tokenId);\\r\\n    }\\r\\n\\r\\n    function increaseMaxMint(uint256 nftTypeId, uint256 addAmount) external onlyOwner {\\r\\n        require(nftTypes[nftTypeId].id == nftTypeId, \\\"Card type does not exist\\\");\\r\\n        require(addAmount > 0, \\\"Add amount must be greater than 0\\\");\\r\\n        nftTypes[nftTypeId].maxMint += addAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set base URI\\r\\n     * @param baseURI New base URI\\r\\n     */\\r\\n    function setBaseURI(string memory baseURI) external onlyOwner {\\r\\n        _baseTokenURI = baseURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override base URI function\\r\\n     */\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return _baseTokenURI;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Override tokenURI function, returns different URIs based on room card type\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        _requireOwned(tokenId);\\r\\n\\r\\n        uint256 nftTypeId = tokenNftTypes[tokenId];\\r\\n        string memory baseURI = _baseURI();\\r\\n        string memory suffix = nftTypes[nftTypeId].uriSuffix;\\r\\n\\r\\n        return bytes(baseURI).length > 0 ?\\r\\n            string(abi.encodePacked(baseURI, suffix)) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw ETH from the contract\\r\\n     */\\r\\n    function withdraw() external onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"No funds to withdraw\\\");\\r\\n\\r\\n        (bool success, ) = payable(owner()).call{value: balance}(\\\"\\\");\\r\\n        require(success, \\\"Withdrawal failed\\\");\\r\\n\\r\\n        emit Withdrawn(owner(), balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if a user owns any room cards\\r\\n     * @param owner User address\\r\\n     * @return Whether the user owns any room cards\\r\\n     */\\r\\n    function hasNft(address owner) external view returns (bool) {\\r\\n        return balanceOf(owner) > 0;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev \\u83b7\\u53d6\\u7528\\u6237\\u62e5\\u6709\\u7684\\u623f\\u5361\\u4fe1\\u606f\\r\\n     * @param userAddress \\u7528\\u6237\\u5730\\u5740\\r\\n     * @return has \\u662f\\u5426\\u62e5\\u6709\\u623f\\u5361\\r\\n     * @return details \\u623f\\u5361\\u8be6\\u7ec6\\u4fe1\\u606f\\u6570\\u7ec4\\r\\n     */\\r\\n    function getUserNfts(address userAddress) external view returns (bool has, RoomCardNftDetail[] memory details) {\\r\\n        has = balanceOf(userAddress) > 0;\\r\\n\\r\\n        if (has) {\\r\\n            uint256 balance = balanceOf(userAddress);\\r\\n            details = new RoomCardNftDetail[](balance);\\r\\n\\r\\n            for (uint256 i = 0; i < balance; i++) {\\r\\n                uint256 tokenId = tokenOfOwnerByIndex(userAddress, i);\\r\\n                uint256 nftTypeId = tokenNftTypes[tokenId];\\r\\n                \\r\\n                details[i] = RoomCardNftDetail({\\r\\n                    tokenId: tokenId,\\r\\n                    nftType: nftTypes[nftTypeId]\\r\\n                });\\r\\n            }\\r\\n        } else {\\r\\n            details = new RoomCardNftDetail[](0);\\r\\n        }\\r\\n\\r\\n        return (has, details);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get card type for a specific token\\r\\n     * @param tokenId Room card ID\\r\\n     * @return Card type information\\r\\n     */\\r\\n    function getType(uint256 tokenId) external view returns (RoomCardNftType memory) {\\r\\n        _requireOwned(tokenId);\\r\\n        uint256 nftTypeId = tokenNftTypes[tokenId];\\r\\n        return nftTypes[nftTypeId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all card type IDs\\r\\n     * @return Array of all card type IDs\\r\\n     */\\r\\n    function getAllTypeIds() external view returns (uint256[] memory) {\\r\\n        return _allNftTypeIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get all active card types\\r\\n     * @return Arrays of card type IDs and card types\\r\\n     */\\r\\n    function getActiveTypes() external view returns (uint256[] memory, RoomCardNftType[] memory) {\\r\\n        uint256 activeCount = 0;\\r\\n\\r\\n        // Count active card types\\r\\n        for (uint256 i = 0; i < _allNftTypeIds.length; i++) {\\r\\n            uint256 typeId = _allNftTypeIds[i];\\r\\n            if (nftTypes[typeId].active) {\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Create arrays for active card types\\r\\n        uint256[] memory activeIds = new uint256[](activeCount);\\r\\n        RoomCardNftType[] memory activeTypes = new RoomCardNftType[](activeCount);\\r\\n\\r\\n        // Fill arrays\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < _allNftTypeIds.length; i++) {\\r\\n            uint256 typeId = _allNftTypeIds[i];\\r\\n            if (nftTypes[typeId].active) {\\r\\n                activeIds[index] = typeId;\\r\\n                activeTypes[index] = nftTypes[typeId];\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return (activeIds, activeTypes);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validate if room card meets game parameter requirements\\r\\n     * @param tokenId Room card ID\\r\\n     * @param maxPlayers Maximum number of players\\r\\n     * @return Whether requirements are met\\r\\n     */\\r\\n    function validateParams(uint256 tokenId, uint8 maxPlayers) external view returns (bool) {\\r\\n        _requireOwned(tokenId);\\r\\n        uint256 nftTypeId = tokenNftTypes[tokenId];\\r\\n        RoomCardNftType memory nftType = nftTypes[nftTypeId];\\r\\n\\r\\n        return (maxPlayers <= nftType.maxPlayers);\\r\\n    }\\r\\n\\r\\n    function _increaseBalance(address account, uint128 value) internal virtual override(ERC721Upgradeable, ERC721EnumerableUpgradeable) {\\r\\n        super._increaseBalance(account, value);\\r\\n    }\\r\\n\\r\\n    function _update(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        address auth\\r\\n    ) internal override(ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (address) {\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view override(ERC721Upgradeable, ERC721EnumerableUpgradeable) returns (bool) {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // Authorize upgrade\\r\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\r\\n\\r\\n    /**\\r\\n     * @dev Function that must be implemented by contracts that need to receive funds\\r\\n     */\\r\\n    receive() external payable {}\\r\\n\\r\\n    // Event definitions\\r\\n    event CardTypeAdded(uint256 indexed nftTypeId, string name, uint8 maxPlayers, uint256 price, string uriSuffix, uint256 maxMint, string rarity);\\r\\n    event CardTypeUpdated(uint256 indexed nftTypeId, uint8 maxPlayers, uint256 price, string uriSuffix, uint256 maxMint, string rarity);\\r\\n    event CardTypeMaxMintIncreased(uint256 indexed nftTypeId, uint256 newMaxMint);\\r\\n    event CardTypeActiveStatusChanged(uint256 indexed nftTypeId, bool active);\\r\\n    event RoomCardPurchased(address indexed buyer, uint256 tokenId, uint256 price, uint256 nftTypeId);\\r\\n    event BatchRoomCardPurchased(address indexed buyer, uint256[] tokenIds, uint256 totalPrice, uint256 nftTypeId);\\r\\n    event RoomCardConsumed(address indexed owner, uint256 tokenId);\\r\\n    event Withdrawn(address indexed to, uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x599744d5c6e96b07e32277e8a9ebfdf77add0c5ee9a210fbce276e6f51210a16\",\"license\":\"UNLICENSED\"},\"contracts/BBStructs.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\nimport \\\"./BBTypes.sol\\\";\\r\\nimport \\\"./BBPlayer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title BBStructs\\r\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u7ed3\\u6784\\u4f53\\u5b9a\\u4e49\\r\\n */\\r\\n\\r\\nstruct GameConfig {\\r\\n    uint8 maxRoomCount;\\r\\n    uint8 maxPlayers;\\r\\n    uint8 maxJoinTablesCount;\\r\\n    uint8 maxBankerFeePercent;\\r\\n    uint256 playerTimeout;\\r\\n    uint256 tableInactiveTimeout;\\r\\n    uint8 liquidatorFeePercent;\\r\\n    address gameMainAddress;\\r\\n    address rewardPoolAddress;\\r\\n    address roomCardAddress;\\r\\n    address roomLevelAddress;\\r\\n    address gameTableFactoryAddress;\\r\\n}\\r\\n\\r\\n// \\u5956\\u52b1\\u6c60\\u7ed3\\u6784\\r\\nstruct RewardPoolInfo {\\r\\n    uint256 poolId;           // \\u5956\\u52b1\\u6c60ID\\r\\n    string name;              // \\u5956\\u52b1\\u6c60\\u540d\\u79f0\\r\\n    address banker;           // \\u521b\\u5efa\\u8005\\uff08\\u5e84\\u5bb6\\uff09\\u5730\\u5740\\r\\n    uint256 totalAmount;      // \\u603b\\u5956\\u6c60\\u91d1\\u989d\\r\\n    uint256 rewardPerGame;    // \\u6bcf\\u5c40\\u6e38\\u620f\\u5956\\u52b1\\u91d1\\u989d\\r\\n    uint256 winProbability;   // \\u4e2d\\u5956\\u6982\\u7387\\uff08\\u4ee5\\u767e\\u5206\\u4e4b\\u4e00\\u4e3a\\u5355\\u4f4d\\uff09\\r\\n    uint256 remainingAmount;  // \\u5269\\u4f59\\u5956\\u6c60\\u91d1\\u989d\\r\\n    bool inUse;              // \\u662f\\u5426\\u6b63\\u5728\\u4f7f\\u7528\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\nstruct RoomCardNftType {\\r\\n    uint256 id;              // Unique identifier for the card type\\r\\n    string name;             // Name of the card type (e.g., \\\"SILVER\\\", \\\"GOLD\\\", \\\"DIAMOND\\\")\\r\\n    uint8 maxPlayers;        // Maximum number of players allowed\\r\\n    uint256 price;           // Price to purchase this card\\r\\n    string uriSuffix;        // URI suffix for metadata\\r\\n    bool active;             // Whether this card type is active\\r\\n    uint256 maxMint;         // Maximum mint amount for this card type\\r\\n    string rarity;           // Rarity of the card type\\r\\n    uint256 minted;          // \\u5df2mint\\u6570\\u91cf\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\n// \\u5b9a\\u4e49\\u5361\\u7247\\u8be6\\u7ec6\\u4fe1\\u606f\\u7ed3\\u6784\\u4f53\\r\\nstruct RoomCardNftDetail {\\r\\n    uint256 tokenId;       // \\u5361\\u7247\\u7684token ID\\r\\n    RoomCardNftType nftType;     // \\u7ee7\\u627fCardType\\u7684\\u6240\\u6709\\u5c5e\\u6027\\r\\n}\\r\\n\\r\\n// Room level structure\\r\\nstruct RoomLevelNftType {\\r\\n    uint256 id;              // Unique identifier for the level type\\r\\n    string name;             // Name of the level (e.g., \\\"BRONZE\\\", \\\"SILVER\\\", \\\"GOLD\\\")\\r\\n    uint256 maxRooms;        // Maximum number of rooms allowed with this level\\r\\n    uint256 price;           // Price to purchase this level\\r\\n    string uriSuffix;        // URI suffix for metadata\\r\\n    bool active;             // Whether this level type is active\\r\\n    uint256 maxMint;         // Maximum mint amount for this level type\\r\\n    uint256 minted;          // Already minted amount for this level type\\r\\n    string rarity;           // Rarity of this level type\\r\\n\\r\\n    uint256[10] __gap;\\r\\n}\\r\\n\\r\\n// Level details structure for returning comprehensive information\\r\\nstruct RoomLevelNftDetail {\\r\\n    uint256 tokenId;         // Level token ID\\r\\n    RoomLevelNftType nftType;     // Level type information\\r\\n}\\r\\n\\r\\n// \\u6dfb\\u52a0\\u4e00\\u4e2a\\u65b0\\u7684\\u7ed3\\u6784\\u4f53\\u7528\\u4e8e\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\r\\nstruct GameTableView {\\r\\n    bool active;\\r\\n    uint256 gameRound;\\r\\n    uint256 gameLiquidatedCount;\\r\\n    address tableAddr; // \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\r\\n    uint256 tableId;\\r\\n    string tableName;\\r\\n    address bankerAddr;\\r\\n    uint256 betAmount;\\r\\n    uint8 bankerFeePercent;\\r\\n    uint256 totalPrizePool;\\r\\n    uint8 playerCount;\\r\\n    uint8 maxPlayers;\\r\\n    uint256 creationTimestamp;\\r\\n    uint256 liquidateDeadline;\\r\\n    GameState state;\\r\\n    uint8 liquidatorFeePercent;\\r\\n    uint8 playerContinuedCount;\\r\\n    uint8 playerReadyCount;\\r\\n    address[] playerAddresses;\\r\\n    uint256 currentRoundDeadline;\\r\\n    uint256 playerTimeout;\\r\\n    uint256 tableInactiveTimeout;\\r\\n    uint256 lastActivityTimestamp;\\r\\n    uint256 rewardPoolId;\\r\\n    RewardPoolInfo rewardPoolInfo; // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\r\\n    uint256 implementationVersion; // \\u6dfb\\u52a0\\u5b9e\\u73b0\\u7248\\u672c\\u53f7\\r\\n    uint8 firstBetX;\\r\\n    uint8 secondBetX;\\r\\n    uint256 bankerStakeAmount;\\r\\n    bool canNext;\\r\\n    string nextTitle;\\r\\n    string nextReason;\\r\\n    address rewardAddr;\\r\\n    uint256 rewardAmount;\\r\\n    string chatGroupId;\\r\\n}\\r\\n\\r\\n// \\u6dfb\\u52a0\\u4e00\\u4e2a\\u65b0\\u7684\\u7ed3\\u6784\\u4f53\\u7528\\u4e8e\\u8fd4\\u56de\\u6e38\\u620f\\u684c\\u4fe1\\u606f\\r\\nstruct GameTableInfoShort {\\r\\n    bool active;\\r\\n    uint256 gameRound;\\r\\n    uint256 gameLiquidatedCount;\\r\\n    address tableAddr; // \\u6e38\\u620f\\u684c\\u5408\\u7ea6\\u5730\\u5740\\r\\n    uint256 tableId;\\r\\n    string tableName;\\r\\n    address bankerAddr;\\r\\n    uint256 betAmount;\\r\\n    uint8 bankerFeePercent;\\r\\n    uint8 playerCount;\\r\\n    uint8 maxPlayers;\\r\\n    GameState state;\\r\\n    uint256 lastActivityTimestamp;\\r\\n    uint256 rewardPoolId;\\r\\n    RewardPoolInfo rewardPoolInfo; // \\u5956\\u52b1\\u6c60\\u4fe1\\u606f\\uff0c\\u5982\\u679c\\u6ca1\\u6709\\u5956\\u52b1\\u6c60\\uff0c\\u5219\\u8fd4\\u56de\\u7a7a\\u7ed3\\u6784\\u4f53\\r\\n}\\r\\n\\r\\nstruct UserInfo {\\r\\n    address[] tables;\\r\\n    address[] joinedTables;\\r\\n    mapping(address => uint256) joinedTableIndex;\\r\\n}\",\"keccak256\":\"0xf75acf148a2fd7e4aff569ca797a3ba47d2e2917109bf6839e0b00a496adcfe1\",\"license\":\"UNLICENSED\"},\"contracts/BBTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.28;\\r\\n\\r\\n/**\\r\\n * @title BBTypes\\r\\n * @dev \\u725b\\u725b\\u6e38\\u620f\\u7c7b\\u578b\\u5b9a\\u4e49\\r\\n */\\r\\n\\r\\n// \\u6e38\\u620f\\u72b6\\u6001\\r\\nenum GameState {\\r\\n    NONE,\\r\\n    WAITING,\\r\\n    FIRST_BETTING,\\r\\n    SECOND_BETTING,\\r\\n    ENDED,\\r\\n    SETTLED,\\r\\n    LIQUIDATED\\r\\n}\\r\\n\\r\\n// \\u73a9\\u5bb6\\u72b6\\u6001\\r\\nenum PlayerState {\\r\\n    NONE,\\r\\n    JOINED,\\r\\n    READY,\\r\\n    ACTIVE,       // \\u5f53\\u524d\\u53c2\\u4e0e\\u6e38\\u620f\\u4e2d\\uff0c\\u672a\\u5f03\\u724c\\r\\n    FOLDED        // \\u5f03\\u724c\\r\\n}\\r\\n\\r\\n// \\u724c\\u578b\\r\\nenum CardType {\\r\\n    NONE,\\r\\n    NO_BULL,\\r\\n    BULL_1,\\r\\n    BULL_2,\\r\\n    BULL_3,\\r\\n    BULL_4,\\r\\n    BULL_5,\\r\\n    BULL_6,\\r\\n    BULL_7,\\r\\n    BULL_8,\\r\\n    BULL_9,\\r\\n    BULL_BULL,\\r\\n    FIVE_BOMB,\\r\\n    FIVE_SMALL,\\r\\n    FIVE_FLOWERS\\r\\n}\\r\\n\",\"keccak256\":\"0xf2839d776336a822efd1a9145374f9ad2ea44de1a7721be8bb4b201cd29c2e64\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a06040523461003257610011610037565b6040516141bb6101b1823960805181818161348801526135ec01526141bb90f35b600080fd5b61003f61007e565b610047610102565b565b61005d90610060906001600160a01b031682565b90565b6001600160a01b031690565b61005d90610049565b61005d9061006c565b61008730610075565b608052565b61005d9060401c60ff1690565b61005d905461008c565b61005d905b6001600160401b031690565b61005d90546100a3565b61005d906100a8906001600160401b031682565b906100e261005d6100fe926100be565b82546001600160401b0319166001600160401b03919091161790565b9055565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0061012c81610099565b61019e57610139816100b4565b6001600160401b0391908290811603610150575050565b8161017f7fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d293610199936100d2565b604051918291826001600160401b03909116815260200190565b0390a1565b63f92ee8a960e01b6000908152600490fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8062788b3d146102ba57806301ffc9a7146102b557806306fdde03146102b0578063081812fc146102ab578063094ae9ed146102a6578063095ea7b3146102a157806318160ddd1461029c578063224b5c721461029757806323b872dd146102925780632f745c591461028d5780633aca5922146102885780633ccfd60b146102835780634036ab781461027e57806342842e0e1461027957806348befd92146102745780634ed7ff631461026f5780634f1ef2861461026a5780634f6ccce71461026557806352d1902d1461026057806355f804b31461025b5780636352211e1461025657806370a0823114610251578063715018a61461024c5780637908d0091461024757806379b2ab23146102425780638b90dc851461023d5780638da5cb5b1461023857806395d89b4114610233578063a22cb4651461022e578063a6487c5314610229578063ab16d82314610224578063ad3cb1cc1461021f578063ad752eb81461021a578063b88d4fde14610215578063c87b56dd14610210578063d96a094a1461020b578063dfda3cb614610206578063e2b21eac14610201578063e985e9c5146101fc578063eb238441146101f7578063f2fde38b146101f25763fa55b7260361000e576111a3565b611101565b6110e6565b61109f565b611064565b61104b565b611019565b610ffe565b610fe2565b610f78565b610f5d565b610ef5565b610e7c565b610dfe565b610dab565b610d90565b610d75565b610d13565b610aa9565b6109e2565b6109c7565b6109ac565b610994565b610954565b610939565b610925565b6108d5565b6108a5565b610869565b610842565b610731565b610712565b6106e1565b6106c8565b610686565b61066b565b610652565b6105ed565b61045f565b6103ff565b61035a565b610302565b805b036102c857565b600080fd5b905035906102da826102bf565b565b91906040838203126102c8576102ff9060206102f882866102cd565b94016102cd565b90565b346102c85761031b6103153660046102dc565b90611341565b60405180805b0390f35b6001600160e01b031981166102c1565b905035906102da82610325565b906020828203126102c8576102ff91610335565b9052565b346102c857610321610375610370366004610342565b61134b565b6040515b91829182901515815260200190565b60009103126102c857565b60005b8381106103a65750506000910152565b8181015183820152602001610396565b6103d76103e06020936103ea936103cb815190565b80835293849260200190565b95869101610393565b601f01601f191690565b0190565b60208082526102ff929101906103b6565b346102c85761040f366004610388565b61032161041a61135d565b604051918291826103ee565b906020828203126102c8576102ff916102cd565b6001600160a01b031690565b6103569061043a565b6020810192916102da9190610446565b346102c85761032161047a610475366004610426565b611370565b6040519182918261044f565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176104bd57604052565b610486565b906102da6104cf60405190565b928361049c565b6001600160401b0381116104bd57602090601f01601f19160190565b90826000939282370152565b9092919261051361050e826104d6565b6104c2565b93818552818301116102c8576102da9160208501906104f2565b9080601f830112156102c8578160206102ff933591016104fe565b60ff81166102c1565b905035906102da82610548565b9160c0838303126102c85782356001600160401b0381116102c8578261058591850161052d565b926105938360208301610551565b926105a181604084016102cd565b9260608301356001600160401b0381116102c857826105c191850161052d565b926105cf83608083016102cd565b9260a08201356001600160401b0381116102c8576102ff920161052d565b346102c85761032161060f61060336600461055e565b94939093929192611b62565b6040515b9182918290815260200190565b6102c18161043a565b905035906102da82610620565b91906040838203126102c8576102ff9060206102f88286610629565b346102c85761031b610665366004610636565b90611b72565b346102c85761067b366004610388565b61032161060f611b7d565b346102c85761031b610699366004610636565b90611dda565b90916060828403126102c8576102ff6106b88484610629565b9360406102f88260208701610629565b346102c85761031b6106db36600461069f565b91611e12565b346102c85761032161060f6106f7366004610636565b90611ebb565b9160c0838303126102c85761058582846102cd565b346102c85761031b6107253660046106fd565b94939093929192612083565b346102c857610741366004610388565b61031b6121bc565b610759610755600a9390565b9190565b6000915b83831061076a5750505050565b61078461077d6001928451815260200190565b9260200190565b9201919061075d565b80518252906102ff90610120806108156107e86107ba6102608601602089015187820360208901526103b6565b60408881015160ff16908701526107d660608901516060880152565b608088015186820360808801526103b6565b60a08781015115159086015261080360c088015160c0870152565b60e087015185820360e08701526103b6565b94610827610100820151610100860152565b0151910190610749565b60208082526102ff9291019061078d565b346102c85761032161085d610858366004610426565b6123a4565b60405191829182610831565b346102c85761031b61087c36600461069f565b916123e2565b91906040838203126102c8576102ff90602061089e82866102cd565b9401610551565b346102c8576103216103756108bb366004610882565b906123f6565b906020828203126102c8576102ff91610629565b346102c8576103216103756108eb3660046108c1565b61242a565b9190916040818403126102c8576109078382610629565b9260208201356001600160401b0381116102c8576102ff920161052d565b61031b6109333660046108f0565b90612464565b346102c85761032161060f61094f366004610426565b61246e565b346102c857610964366004610388565b61032161060f612504565b906020828203126102c85781356001600160401b0381116102c8576102ff920161052d565b346102c85761031b6109a736600461096f565b612525565b346102c85761032161047a6109c2366004610426565b61252e565b346102c85761032161060f6109dd3660046108c1565b612537565b346102c8576109f2366004610388565b61031b6125a9565b805182526102ff9160408101916020015190602081840391015261078d565b906102ff916109fa565b90610a39610a2f835190565b8083529160200190565b9081610a4b6020830284019460200190565b926000915b838310610a5f57505050505090565b90919293946020610a82610a7b83856001950387528951610a19565b9760200190565b9301930191939290610a50565b90151581526040602082018190526102ff92910190610a23565b346102c857610ac1610abc3660046108c1565b612662565b90610321610ace60405190565b92839283610a8f565b6102ff6102ff6102ff9290565b90610aee90610ad7565b600052602052604060002090565b6102ff9081565b6102ff9054610afc565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610b43575b6020831014610b3e57565b610b0d565b91607f1691610b33565b80546000939291610b6a610b6083610b23565b8085529360200190565b9160018116908115610bbc5750600114610b8357505050565b610b969192939450600052602060002090565b916000925b818410610ba85750500190565b805484840152602090930192600101610b9b565b92949550505060ff1916825215156020020190565b906102ff91610b4d565b906102da610bf592610bec60405190565b93848092610bd1565b038361049c565b6102ff905b60ff1690565b6102ff9054610bfc565b610c1c906004610ae4565b610c2581610b03565b91610c3260018301610bdb565b91610c3f60028201610c07565b91610c4c60038301610b03565b91610c5960048201610bdb565b91610c6660058301610c07565b91610c7360068201610b03565b916102ff6008610c8560078501610bdb565b9301610b03565b99989690610cf06102da9994610d0e97610ce36101009a988f606090610cdf610cd3610cfa99610d019c610cc66101208601926000870152565b84820360208601526103b6565b60ff9097166040830152565b0152565b8d820360808f01526103b6565b94151560a08c0152565b60c08a0152565b87820360e08901526103b6565b940152565b346102c857610321610d2e610d29366004610426565b610c11565b95610d4199979995919594929460405190565b998a998a610c8c565b6102ff916008021c81565b906102ff9154610d4a565b6000610d706102ff926005610ae4565b610d55565b346102c85761032161060f610d8b366004610426565b610d60565b346102c857610da0366004610388565b61032161047a612727565b346102c857610dbb366004610388565b61032161041a612754565b8015156102c1565b905035906102da82610dc6565b91906040838203126102c8576102ff906020610df78286610629565b9401610dce565b346102c85761031b610e11366004610ddb565b90612761565b916060838303126102c85782356001600160401b0381116102c85782610e3e91850161052d565b9260208101356001600160401b0381116102c85783610e5e91830161052d565b9260408201356001600160401b0381116102c8576102ff920161052d565b346102c85761031b610e8f366004610e17565b916129c0565b90610eae61077d610ea4845190565b8084529260200190565b9060005b818110610ebf5750505090565b909192610edc610ed56001928651815260200190565b9460200190565b929101610eb2565b60208082526102ff92910190610e95565b610321610f0c610f063660046102dc565b90612b85565b60405191829182610ee4565b90610f2561050e836104d6565b918252565b610f346005610f18565b640352e302e360dc1b602082015290565b6102ff610f2a565b6102ff610f45565b6102ff610f4d565b346102c857610f6d366004610388565b61032161041a610f55565b346102c857610f88366004610388565b610321610f0c612df9565b906080828203126102c857610fa88183610629565b92610fb68260208501610629565b92610fc483604083016102cd565b9260608201356001600160401b0381116102c8576102ff920161052d565b346102c85761031b610ff5366004610f93565b92919091612e03565b346102c85761032161041a611014366004610426565b612e50565b61032161060f61102a366004610426565b612ede565b91906040838203126102c8576102ff906020610df782866102cd565b346102c85761031b61105e36600461102f565b90613076565b346102c85761031b6110773660046108c1565b61312a565b91906040838203126102c8576102ff9060206110988286610629565b9401610629565b346102c8576103216103756110b536600461107c565b90613133565b6102ff916008021c6001600160a01b031690565b906102ff91546110bb565b6102ff600060036110cf565b346102c8576110f6366004610388565b61032161047a6110da565b346102c85761031b6111143660046108c1565b6131b3565b906102ff9161078d565b9061112f610a2f835190565b90816111416020830284019460200190565b926000915b83831061115557505050505090565b90919293946020611171610a7b83856001950387528951611119565b9301930191939290611146565b60408082526102ff93919261119591840190610e95565b916020818403910152611123565b346102c8576111b3366004610388565b6111bb6131fd565b906103216111c860405190565b9283928361117e565b906102da916111de613312565b6112e1565b156111ea57565b60405162461bcd60e51b815260206004820152601860248201527710d85c99081d1e5c1948191bd95cc81b9bdd08195e1a5cdd60421b604482015280606481015b0390fd5b1561123657565b60405162461bcd60e51b815260206004820152602160248201527f41646420616d6f756e74206d7573742062652067726561746572207468616e206044820152600360fc1b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b91906112a6565b9290565b82018092116112b157565b611285565b90600019905b9181191691161790565b906112d66102ff6112dd92610ad7565b82546112b6565b9055565b9061133b600661132b6102da946113106113076000611301846004610ae4565b01610b03565b82905b146111e3565b61132461131d6000610ad7565b861161122f565b6004610ae4565b019161133683610b03565b61129b565b906112c6565b906102da916111d1565b6102ff90613349565b6102ff90610bdb565b6102ff600061136a613372565b01611354565b6102ff9061137d81613396565b506133d6565b906102ff969594939291611395613312565b61197f565b156113a157565b60405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606490fd5b610c016102ff6102ff9290565b156113f157565b60405162461bcd60e51b815260206004820152602260248201527f4d617820706c6179657273206d7573742062652067726561746572207468616e604482015261203160f01b6064820152608490fd5b1561144857565b60405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e2030000000006044820152606490fd5b1561149457565b60405162461bcd60e51b815260206004820152601f60248201527f4d6178206d696e74206d7573742062652067726561746572207468616e2030006044820152606490fd5b156114e057565b60405162461bcd60e51b81526020600482015260166024820152755261726974792063616e6e6f7420626520656d70747960501b6044820152606490fd5b60001981146112b15760010190565b6001600160401b0381116104bd5760200290565b61050e6102ff9161152d565b6102ff6101406104c2565b9160001960089290920291821b911b6112bc565b919061157d6102ff6112dd93610ad7565b908354611558565b6102da9160009161156c565b81811061159c575050565b806115aa6000600193611585565b01611591565b9190601f81116115bf57505050565b6115d16102da93600052602060002090565b906020601f8401819004830193106115f3575b6020601f909101040190611591565b90915081906115e4565b9060001960089091021c191690565b81611616916115fd565b906002021790565b90611627815190565b906001600160401b0382116104bd5761164a826116448554610b23565b856115b0565b602090601f8311600114611678576112dd92916000918361166d575b505061160c565b015190503880611666565b601f1983169161168d85600052602060002090565b9260005b8181106116cc575091600293918560019694106116b2575b50505002019055565b6116c2910151601f8416906115fd565b90553880806116a9565b91936020600181928787015181550195019201611691565b906102da9161161e565b9060ff906112bc565b610c016102ff6102ff9260ff1690565b906117176102ff6112dd926116f7565b82546116ee565b906117176102ff6112dd92151590565b818102929181159184041417156112b157565b91909182821061175057505050565b6102da9281019101611591565b90600160401b81116104bd576102da91600a90611741565b600a9161178b6112a26001926102ff868661175d565b92049160005b83811061179e5750505050565b60019060206117ae6102ff865190565b9401938184015501611791565b906102da91611775565b60096118a86101206102da946117e56117df600083015190565b866112c6565b6117fc6117f3602083015190565b600187016116e4565b61181661180d604083015160ff1690565b60028701611707565b61182d611824606083015190565b600387016112c6565b61184461183b608083015190565b600487016116e4565b61185d61185460a0830151151590565b6005870161171e565b61187461186b60c083015190565b600687016112c6565b61188b61188260e083015190565b600787016116e4565b6118a361189a61010083015190565b600887016112c6565b015190565b91016117bb565b906102da916117c5565b634e487b7160e01b600052603260045260246000fd5b80548210156118f2576118e9600191600052602060002090565b91020190600090565b6118b9565b80549190600160401b8310156104bd578261191a9160016102da950181556118cf565b9061156c565b92916102ff969461195d6119729461195661194a61196a9660c08a01908a820360008c01526103b6565b60ff9095166020890152565b6040870152565b84820360608601526103b6565b936080830152565b60a08184039101526103b6565b959091929394955061198e8290565b519560009661199c88610ad7565b106119a69061139a565b6001966119b2886113dd565b60ff8616116119c0906113ea565b6119c981610ad7565b86116119d490611441565b6119dd81610ad7565b82116119e89061148d565b82516119f382610ad7565b106119fd906114d9565b611a0688610b03565b97611a1081610b03565b611a199061151e565b611a2390826112c6565b611a2d600a611541565b90611a3783610ad7565b90611a428284860152565b611a4d826020850152565b611a58826040850152565b611a63826060850152565b611a6e826080850152565b611a798260a0850152565b611a848260c0850152565b611a8f8260e0850152565b611a9b82610100850152565b611aa782610120850152565b8a611ab061154d565b948501526020840187905260ff88166040850152611acf896060860152565b608084018a9052151560a0840152611ae88460c0850152565b60e08301859052610100830152610120820152611b06886004610ae4565b90611b10916118af565b611b1b8760066118f7565b611b2487610ad7565b95611b2e60405190565b958695611b3b9587611920565b037f3a5e2e36ac53adb658032492c66ca1b865ed4d8dbf9f248ddaecdc1457c6dd8691a290565b6102ff9594939291906000611383565b6102da9133916133fb565b6102ff6002611b8a613408565b015490565b6102ff9061043a565b6102ff9054611b8f565b61043a6102ff6102ff9290565b6102ff90611ba2565b6102ff9061043a906001600160a01b031682565b6102ff90611bb8565b6102ff90611bcc565b905051906102da82610dc6565b906020828203126102c8576102ff91611bde565b6040513d6000823e3d90fd5b15611c1257565b60405162461bcd60e51b815260206004820152601860248201527713db9b1e4819d85b59481d18589b194818d85b8818d85b1b60421b6044820152606490fd5b9060009182611c616003611b98565b611c7b611c75611c7084611baf565b61043a565b9161043a565b03611c93575b50611c8e6102da93611c0b565b611d7c565b9250611caa611ca5611ca56003611b98565b611bd5565b926020611cb660405190565b948590635ab8933560e11b82528180611cd2336004830161044f565b03915afa8015611d33576102da948291611d04575b5015611cfb5750611c8e60015b9350611c81565b611c8e90611cf4565b611d26915060203d602011611d2c575b611d1e818361049c565b810190611beb565b38611ce7565b503d611d14565b611bff565b15611d3f57565b60405162461bcd60e51b81526020600482015260156024820152742737ba1030b8383937bb32b21037b91037bbb732b960591b6044820152606490fd5b611dd5611dcb7fd2a1c8eed5b52b5f7dd72d9b49c8901a19690207345595b61a5c633a4978d41b92611dc2611db08661342c565b611dbc611c758461043a565b14611d38565b611ca585613446565b9261061360405190565b0390a2565b906102da91611c52565b604090611e0b6102da9496959396611e0460608401986000850190610446565b6020830152565b0190610446565b9091600092611e2084611baf565b611e298161043a565b611e328361043a565b14611e7d5750611e4490823391613472565b91611e4e8161043a565b611e578461043a565b03611e625750505050565b6364283d7b60e01b8452839261122b92909160048501611de4565b8461122b8192633250574960e11b83526004830161044f565b9160206102da929493610cdf60408201966000830190610446565b90610aee90611bd5565b611ec3613408565b611ecf6102ff83612537565b831015611ef45791611eea611eef9260006102ff9501611eb1565b610ae4565b610b03565b63295f44f760e21b6000908152611f0d84846004611e96565b036000fd5b906102da9594939291611f23613312565b611f76565b91611f69916102ff9694611f54611f6193611f4d60a0880194600089019060ff169052565b6020870152565b84820360408601526103b6565b936060830152565b60808184039101526103b6565b947f89f111784ea123a14b3f97adf8c42611da99ed48f03cb179d205f58173076bf294612070611dd59394959761206b846007886120588d8c612051600491611fce611fc760006113018d87610ae4565b8b9061130a565b611fe5611fdb60016113dd565b60ff8816116113ea565b611ff9611ff26000610ad7565b8211611441565b6120108c61200a6107556000610ad7565b1161148d565b61202e61201b895190565b6120286107556000610ad7565b116114d9565b61204861203e6102ff8c86610ae4565b9660028801611707565b600386016112c6565b83016116e4565b61206587600683016112c6565b016116e4565b610ad7565b9661207a60405190565b95869586611f28565b906102da9594939291611f12565b612099613312565b6102da612143565b156120a857565b60405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b6044820152606490fd5b3d156120fe576120f33d610f18565b903d6000602084013e565b606090565b1561210a57565b60405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606490fd5b61214c30611bd5565b3161216161215a6000610ad7565b82116120a1565b61218d600080612175611ca5611ca5612727565b60405160009186905af16121876120e4565b50612103565b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5611dd5611dcb611ca5612727565b6102da612091565b369037565b906102da6121df6121d984611541565b9361152d565b836121c4565b6102ff600a6121c9565b6121f761154d565b906000825260208080808080808080808b01606081520160008152016000815201606081520160008152016000815201606081520160008152016122396121e5565b905250565b6102ff6121ef565b612252610755600a9390565b6000915b8383106122635750505050565b61228461227d60019261227585610b03565b815260200190565b9260010190565b92019190612256565b906103ea8161014093612246565b906102da610bf5926122ac60405190565b9384809261228d565b906102da61239360096122c661154d565b946122d76122d382610b03565b8752565b6122ed6122e660018301610bdb565b6020880152565b6123066122fc60028301610c07565b60ff166040880152565b61231c61231560038301610b03565b6060880152565b61233261232b60048301610bdb565b6080880152565b61234a61234160058301610c07565b151560a0880152565b61236061235960068301610b03565b60c0880152565b61237661236f60078301610bdb565b60e0880152565b61238d61238560088301610b03565b610100880152565b0161229b565b610120840152565b6102ff906122b5565b6123cb611324611eef6102ff936123b961223e565b506123c381613396565b506005610ae4565b61239b565b6102ff6000610f18565b6102ff6123d0565b90916102da926123f06123da565b92612e03565b61241e610c0160406124166123cb611324611eef612425976123b9600090565b015160ff1690565b9160ff1690565b111590565b61243390612537565b6124406107556000610ad7565b1190565b906102da9161245161347d565b906102da9161245f816134f7565b613521565b906102da91612444565b612476613408565b6124816102ff611b7d565b82101561249e576102ff91600261249892016118cf565b90610d55565b60008061122b846124ae83611baf565b63295f44f760e21b845260048401611e96565b6102ff906124cd6135db565b6124fb565b6102ff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610ad7565b506102ff6124d2565b6102ff60006124c1565b6102da9061251a613312565b6102da9060026116e4565b6102da9061250e565b6102ff90613396565b61253f613372565b600061254a81611baf565b6125538161043a565b61255c8561043a565b146125735750506102ff916003611eef9201611eb1565b6322718ad960e21b8252819061122b906004830161044f565b612594613312565b6102da6102da6125a46000611baf565b613617565b6102da61258c565b6001600160401b0381116104bd5760208091020190565b90610f2561050e836125b1565b6102ff60406104c2565b6125e76125d5565b9060008252602080830161223961223e565b6102ff6125df565b60005b82811061261057505050565b60209061261b6125f9565b8184015201612604565b906102da61263b612635846125c8565b936125b1565b601f190160208401612601565b90612651825190565b8110156118f2576020809102010190565b61266b81612537565b60009061267a61075583610ad7565b119182156127125761268b81612537565b9261269584612625565b9485916126a185610ad7565b865b81101561270757612700816126bb6126a39388611ebb565b6126e4611e046126d2611324611eef856005610ae4565b6123cb6126dd6125d5565b948d860152565b6126ee828c612648565b526126f9818b612648565b5060010190565b90506126a1565b509550909350915050565b506127226102ff91939293610ad7565b612625565b6102ff60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b01611b98565b6102ff600161136a613372565b6102da91903361368a565b6102ff9060401c610c01565b6102ff905461276c565b6102ff905b6001600160401b031690565b6102ff9054612782565b6127876102ff6102ff9290565b906001600160401b03906112bc565b6127876102ff6102ff926001600160401b031690565b906127df6102ff6112dd926127b9565b82546127aa565b9060ff60401b9060401b6112bc565b906128056102ff6112dd92151590565b82546127e6565b6103569061279d565b6020810192916102da919061280c565b907ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0092839061286361285d61285984612778565b1590565b92612793565b926000946128708661279d565b6001600160401b038616148061296c575b60019561289d6128908861279d565b916001600160401b031690565b149081612948575b155b908161293f575b5061293057906128d99291846128d0886128c78961279d565b9a01998a6127cf565b61292157612973565b6128e257505050565b61291061291c927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2946127f5565b60405191829182612815565b0390a1565b61292b86896127f5565b612973565b63f92ee8a960e01b8652600486fd5b159050386128ae565b90506128a761295630611bd5565b3b6129636107558a610ad7565b149190506128a5565b5083612881565b6129a1929161298191613733565b612989613745565b61299233613762565b61299a613745565b60026116e4565b6102da6129ae6001610ad7565b6129b98160006112c6565b60016112c6565b906102da9291612825565b156129d257565b60405162461bcd60e51b8152602060048201526014602482015273436172642074797065206e6f742061637469766560601b6044820152606490fd5b15612a1557565b60405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606490fd5b15612a6157565b60405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606490fd5b15612aa457565b60405162461bcd60e51b815260206004820152602360248201527f4d6178206d696e74207265616368656420666f7220746869732063617264207460448201526279706560e81b6064820152608490fd5b906102da612b05612635846125c8565b601f1901602084016121c4565b919082039182116112b157565b15612b2657565b60405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606490fd5b604090610cdf612b7d6102da9597969460608401908482036000860152610e95565b966020830152565b9190612b956102ff846004610ae4565b90612ba9612ba283610b03565b859061130a565b612bbd612bb860058401610c07565b6129cb565b600091612bd3612bcc84610ad7565b8311612a0e565b6003810193612bf8612bf06102ff85612beb89610b03565b61172e565b341015612a5a565b6008820190612c286006612c0f8661133686610b03565b940193612c216107556102ff87610b03565b1115612a9d565b612c3184612af5565b93612c3b86610ad7565b81811015612cd75780612ccc8a612cc7612cae612cc08c612cbd612cd2988e612c918f8f6107556102ff612c8b612c2193611eef612c85612c7c6001610ad7565b61133684610b03565b826112c6565b93610b03565b612c9a84610b03565b958461133b612ca98997610b03565b61151e565b612cb8843361376b565b612648565b52565b6005610ae4565b6112c6565b60010190565b612c3b565b5090969250612d0c9150612beb7f9e0f55090ce950de8278f10f58780bc67078a861e5667651b71f46f12f16b31a9496610b03565b92833411612d3c575b50612d1f33611bd5565b92612d36612d2c60405190565b9283928784612b5b565b0390a290565b80612d7691612d4b8634612b12565b612d57611ca533611bd5565b90612d6160405190565b90818003925af1612d706120e4565b50612b1f565b38612d15565b90612d97612d8b610ea4845490565b92600052602060002090565b9060005b818110612da85750505090565b909192612dc4612dbd60019261227587610b03565b9460010190565b929101612d9b565b906102ff91612d7c565b906102da610bf592612de760405190565b93848092612dcc565b6102ff90612dd6565b6102ff6006612df0565b906102da939291612e15838383611e12565b336137dc565b6103ea612e3392602092612e2d815190565b94859290565b93849101610393565b612e4a906102ff9392612e1b565b90612e1b565b611eef612e5f916123b9606090565b612e76600461136a612e6f6138fa565b9382610ae4565b8151612e856107556000610ad7565b1115612eb9576102ff612ead916102ff93612e9f60405190565b938492602084019283612e3c565b9081038252038261049c565b50506102ff6123da565b9081526060810193926102da929091604091610cdf90611e04565b612eec6102ff826004610ae4565b90612ef961130783610b03565b612f08612bb860058401610c07565b612f5e6003830192612f1f612bf06102ff86610b03565b612f486008820191612f426107556102ff6006612f3b87610b03565b9401610b03565b10612a9d565b61133b612f556001610ad7565b61133683610b03565b7ffeb0a6d9a39332a80a0bf5d24af7d578c47f681cb3596305f2093d63f2827042612fd4612f8c6000610b03565b93612fa4612f9d612ca96000610b03565b60006112c6565b612fae853361376b565b612fbd84612cc7876005610ae4565b612fc96102ff82610b03565b3411612ff557610b03565b91612fde33611bd5565b92612d36612feb60405190565b9283928784612ec3565b611eef600080612d4b61300785610b03565b34612b12565b906102da9161301a613312565b611dd561306c7fb58f0f5a57890402ca596a98b9a57bed7713f59eb09a71d5167e174d8716814c926130556113076000611301846004610ae4565b61206b856005613066846004610ae4565b0161171e565b9261037960405190565b906102da9161300d565b6102da9061308c613312565b6130ff565b1561309857565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c69642067616d65206d61696e206164647265737360381b6044820152606490fd5b906001600160a01b03906112bc565b906130f86102ff6112dd92611bd5565b82546130d9565b6102da90613123613113611c706000611baf565b61311c8361043a565b1415613091565b60036130e8565b6102da90613080565b6102ff9161315761315c92613146600090565b506005613151613372565b01611eb1565b611eb1565b610c07565b6102da9061316d613312565b600061317881611baf565b6131818161043a565b61318a8461043a565b1461319a5750506102da90613617565b631e4fbdf760e01b8252819061122b906004830161044f565b6102da90613161565b60005b8281106131cb57505050565b6020906131d661223e565b81840152016131bf565b906102da6131f0612635846125c8565b601f1901602084016131bc565b6132076000610ad7565b90815b60066132176102ff825490565b82101561326057600561323361132461249885613239956118cf565b01610c07565b61324b575b60010161320a565b61320a565b916132586132469161151e565b92905061323e565b505061327461326e83612af5565b926131e0565b61327e6000610ad7565b805b600661328d6102ff825490565b82101561330c57612498826132a1926118cf565b6004866132b360056132338585610ae4565b6132ca575b5050506132c59060010190565b613280565b6123cb838693611eea61330396612cbd6132c5999a6132e897612648565b6132f28287612648565b526132fd8186612648565b5061151e565b919038866132b8565b50505090565b61331a612727565b3390613328611c758361043a565b036133305750565b63118cdaa760e01b600090815290611f0d90600461044f565b63780e9d6360e01b6001600160e01b0319821614908115613368575090565b6102ff9150613904565b7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930090565b61339f8161342c565b906000906133af611c7083611baf565b6133b88461043a565b146133c257505090565b637e27328960e01b82526004820152602490fd5b6133f66102ff916133e5600090565b5060046133f0613372565b01610ae4565b611b98565b916001916102da9361394f565b7f645e039705490088daad89bae25049a34f4a9072d398537b1ab2425f24cbed0090565b6133f66102ff9161343b600090565b5060026133f0613372565b60009061345282611baf565b613469611c75613463838581613472565b9261043a565b146133c2575050565b6102ff929190613a88565b61348630611bd5565b7f0000000000000000000000000000000000000000000000000000000000000000906134b4611c758361043a565b149081156134d6575b506134c457565b63703e46dd60e11b6000908152600490fd5b90506134e6611c75613463613b21565b1415386134bd565b506102da613312565b6102da906134ee565b905051906102da826102bf565b906020828203126102c8576102ff91613500565b9161352e611ca584611bd5565b91602061353a60405190565b6352d1902d60e01b815293849060049082905afa600093816135aa575b5061357457634c9c8ce360e01b6000908152611f0d85600461044f565b9091926135826102ff6124d2565b8403613593576102da929350613b31565b632a87526960e21b60009081526004859052602490fd5b6135cd91945060203d6020116135d4575b6135c5818361049c565b81019061350d565b9238613557565b503d6135bb565b6135e430611bd5565b613610611c757f000000000000000000000000000000000000000000000000000000000000000061043a565b036134c457565b6136576136517f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300611ca58461364b83611b98565b926130e8565b91611bd5565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e061368260405190565b80805b0390a3565b613692613372565b60006136a0611c7082611baf565b6136a98561043a565b1461370457506136fa6136f483611ca5876136ef886131577f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319960056136859a01611eb1565b61171e565b93611bd5565b9361037960405190565b630b61174360e31b81528061122b856004830161044f565b906102da91613729613b9d565b906102da91613be6565b906102da9161371c565b6102da613b9d565b6102da61373d565b6102da90613759613b9d565b6102da90613bfc565b6102da9061374d565b6102da916137776123da565b91613c05565b905051906102da82610325565b906020828203126102c8576102ff9161377d565b90926137cf906137c86102ff96946137be60808601976000870190610446565b6020850190610446565b6040830152565b60608184039101526103b6565b600094929390843b6137f061075588610ad7565b116137fe575b505050505050565b6020928661380e611ca588611bd5565b9261383561381b60405190565b97889687958694630a85bd0160e11b86526004860161379e565b03925af18391816138c9575b50613884575061384f6120e4565b805161385d61075585610ad7565b0361387c5750633250574960e11b8252819061122b906004830161044f565b805190602001fd5b61389e630a85bd0160e11b5b916001600160e01b03191690565b036138b05750503880808080806137f6565b633250574960e11b8252819061122b906004830161044f565b6138ec91925060203d6020116138f3575b6138e4818361049c565b81019061378a565b9038613841565b503d6138da565b6102ff6002611354565b6380ac58cd60e01b6001600160e01b0319821614908115613934575b811561392a575090565b6102ff9150613c26565b6001600160e01b03198116635b5e139f60e01b149150613920565b92909161395a613372565b91808115613a6a575b613980575b50506102da9291600461397b9201610ae4565b6130e8565b61398984613396565b91600090613999611c7083611baf565b6139a28261043a565b141580613a50575b80613a3d575b613a2457505061397b926102da9594926004926139d4575b50925081939450613968565b6139dd90611bd5565b6139e686611bd5565b6139ef85610ad7565b917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925613a1a60405190565b600090a4386139c8565b63a9fbf51f60e01b8252819061122b906004830161044f565b50613a4b6128598286613133565b6139b0565b50613a5a8161043a565b613a638561043a565b14156139aa565b50613a78611c706000611baf565b613a818361043a565b1415613963565b9091613a95908383613c3a565b91613ac3613aa36000611baf565b613aac8161043a565b613ab58661043a565b03613b0057611c7083613dfa565b613acc8361043a565b03613adb576102ff9150613eaa565b613ae48261043a565b613aed8461043a565b03613af757505090565b6102ff91613e2b565b613b098461043a565b613b128661043a565b1461043a57611c708386613d77565b6102ff600061274e6102ff6124d2565b90613b3b82613f14565b613b4482611bd5565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b613b6e60405190565b600090a28051613b816107556000610ad7565b1115613b9357613b9091613f7a565b50565b50506102da613f57565b613ba8612859613fa1565b613bae57565b631afcd79f60e31b6000908152600490fd5b906102da91613bcd613b9d565b9060016102da92612065613bdf613372565b91826116e4565b906102da91613bc0565b6102da9061316d613b9d565b6102da90613bf0565b906102da9291613c158282613fca565b33613c206000611baf565b906137dc565b613c366301ffc9a760e01b613890565b1490565b90613cb58261397b836002613c4d613372565b613ca1613c598461342c565b9960008b86613c6783611baf565b93613c718561043a565b613c7a8261043a565b03613d66575b505050613c8c8261043a565b613c958d61043a565b03613d28575b5061043a565b613caa8661043a565b03613cfc5701610ae4565b613cca613cc46136f485611bd5565b91610ad7565b917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef613cf560405190565b600090a490565b613d23613d096001610ad7565b61133b613d198860038601611eb1565b916103ea83610b03565b6133f0565b613d349082878161394f565b613d608b61133b613d52613d486001610ad7565b9260038801611eb1565b91613d5c83610b03565b0390565b38613c9b565b613d6f92614040565b8b8638613c80565b613dc76000916102da93611eea84613dc7613d90613408565b93613d9a86612537565b95613db8600187019185613db1611eef8686610ae4565b9801611eb1565b95878103613dcc575b50610ae4565b611585565b613df490612cc7613de0611eef8b8b610ae4565b613dee81612cc7858d610ae4565b84610ae4565b38613dc1565b6102da90613e26613e09613408565b6102ff6002820191612cc7856003613e1f865490565b9301610ae4565b6118f7565b612cc76102da926001611eea936133f083612cc7613e47613408565b93613e63613e5482612537565b613e5d88610ad7565b90612b12565b98899186611eb1565b634e487b7160e01b600052603160045260246000fd5b80548015613ea5576000190190613ea2613e9c83836118cf565b90611585565b55565b613e6c565b613f0f6102da916102ff6000613dc7613ec1613408565b936002850194611eea6003613ee1613ed7895490565b613e5d6001610ad7565b920191612cc7613f01612498613efa611eef8888610ae4565b938b6118cf565b613dee8161191a858d6118cf565b613e82565b6000813b613f2461075583610ad7565b14613f3f57906102da91613f396102ff6124d2565b016130e8565b61122b8192634c9c8ce360e01b83526004830161044f565b6000613f6281610ad7565b3411613f6b5750565b63b398979f60e01b8152600490fd5b6000806102ff93613f89606090565b50602081519101845af4613f9b6120e4565b916140a0565b6102ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00612778565b600091613fd683611baf565b91613fe08361043a565b613fe98261043a565b1461402757613ff9918391613472565b614005611c758361043a565b0361400e575050565b6339e3563760e11b8252819061122b906004830161044f565b633250574960e11b8452838061122b856004830161044f565b9061404f6128598483856140fb565b61405857505050565b600092839261406c611c75611c7086611baf565b0361408957637e27328960e01b8352600483015250602481010390fd5b63177e802f60e01b835261122b9160048401611e96565b906140ab575061417f565b8151906000916140bd61075584610ad7565b14806140e6575b6140cd57505090565b639996b31560e01b8252819061122b906004830161044f565b50803b6140f561075584610ad7565b146140c4565b90614109611c706000611baf565b6141128261043a565b141592836141205750505090565b9091925061412d8261043a565b6141368461043a565b1492831561416b575b508215614151575b505038808061330c565b614163919250613463611c75916133d6565b143880614147565b6141789193508290613133565b913861413f565b805160009061419061075583610ad7565b111561419f5750805190602001fd5b63d6bda27560e01b8152600490fdfea164736f6c634300081c000a",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c8062788b3d146102ba57806301ffc9a7146102b557806306fdde03146102b0578063081812fc146102ab578063094ae9ed146102a6578063095ea7b3146102a157806318160ddd1461029c578063224b5c721461029757806323b872dd146102925780632f745c591461028d5780633aca5922146102885780633ccfd60b146102835780634036ab781461027e57806342842e0e1461027957806348befd92146102745780634ed7ff631461026f5780634f1ef2861461026a5780634f6ccce71461026557806352d1902d1461026057806355f804b31461025b5780636352211e1461025657806370a0823114610251578063715018a61461024c5780637908d0091461024757806379b2ab23146102425780638b90dc851461023d5780638da5cb5b1461023857806395d89b4114610233578063a22cb4651461022e578063a6487c5314610229578063ab16d82314610224578063ad3cb1cc1461021f578063ad752eb81461021a578063b88d4fde14610215578063c87b56dd14610210578063d96a094a1461020b578063dfda3cb614610206578063e2b21eac14610201578063e985e9c5146101fc578063eb238441146101f7578063f2fde38b146101f25763fa55b7260361000e576111a3565b611101565b6110e6565b61109f565b611064565b61104b565b611019565b610ffe565b610fe2565b610f78565b610f5d565b610ef5565b610e7c565b610dfe565b610dab565b610d90565b610d75565b610d13565b610aa9565b6109e2565b6109c7565b6109ac565b610994565b610954565b610939565b610925565b6108d5565b6108a5565b610869565b610842565b610731565b610712565b6106e1565b6106c8565b610686565b61066b565b610652565b6105ed565b61045f565b6103ff565b61035a565b610302565b805b036102c857565b600080fd5b905035906102da826102bf565b565b91906040838203126102c8576102ff9060206102f882866102cd565b94016102cd565b90565b346102c85761031b6103153660046102dc565b90611341565b60405180805b0390f35b6001600160e01b031981166102c1565b905035906102da82610325565b906020828203126102c8576102ff91610335565b9052565b346102c857610321610375610370366004610342565b61134b565b6040515b91829182901515815260200190565b60009103126102c857565b60005b8381106103a65750506000910152565b8181015183820152602001610396565b6103d76103e06020936103ea936103cb815190565b80835293849260200190565b95869101610393565b601f01601f191690565b0190565b60208082526102ff929101906103b6565b346102c85761040f366004610388565b61032161041a61135d565b604051918291826103ee565b906020828203126102c8576102ff916102cd565b6001600160a01b031690565b6103569061043a565b6020810192916102da9190610446565b346102c85761032161047a610475366004610426565b611370565b6040519182918261044f565b634e487b7160e01b600052604160045260246000fd5b90601f01601f191681019081106001600160401b038211176104bd57604052565b610486565b906102da6104cf60405190565b928361049c565b6001600160401b0381116104bd57602090601f01601f19160190565b90826000939282370152565b9092919261051361050e826104d6565b6104c2565b93818552818301116102c8576102da9160208501906104f2565b9080601f830112156102c8578160206102ff933591016104fe565b60ff81166102c1565b905035906102da82610548565b9160c0838303126102c85782356001600160401b0381116102c8578261058591850161052d565b926105938360208301610551565b926105a181604084016102cd565b9260608301356001600160401b0381116102c857826105c191850161052d565b926105cf83608083016102cd565b9260a08201356001600160401b0381116102c8576102ff920161052d565b346102c85761032161060f61060336600461055e565b94939093929192611b62565b6040515b9182918290815260200190565b6102c18161043a565b905035906102da82610620565b91906040838203126102c8576102ff9060206102f88286610629565b346102c85761031b610665366004610636565b90611b72565b346102c85761067b366004610388565b61032161060f611b7d565b346102c85761031b610699366004610636565b90611dda565b90916060828403126102c8576102ff6106b88484610629565b9360406102f88260208701610629565b346102c85761031b6106db36600461069f565b91611e12565b346102c85761032161060f6106f7366004610636565b90611ebb565b9160c0838303126102c85761058582846102cd565b346102c85761031b6107253660046106fd565b94939093929192612083565b346102c857610741366004610388565b61031b6121bc565b610759610755600a9390565b9190565b6000915b83831061076a5750505050565b61078461077d6001928451815260200190565b9260200190565b9201919061075d565b80518252906102ff90610120806108156107e86107ba6102608601602089015187820360208901526103b6565b60408881015160ff16908701526107d660608901516060880152565b608088015186820360808801526103b6565b60a08781015115159086015261080360c088015160c0870152565b60e087015185820360e08701526103b6565b94610827610100820151610100860152565b0151910190610749565b60208082526102ff9291019061078d565b346102c85761032161085d610858366004610426565b6123a4565b60405191829182610831565b346102c85761031b61087c36600461069f565b916123e2565b91906040838203126102c8576102ff90602061089e82866102cd565b9401610551565b346102c8576103216103756108bb366004610882565b906123f6565b906020828203126102c8576102ff91610629565b346102c8576103216103756108eb3660046108c1565b61242a565b9190916040818403126102c8576109078382610629565b9260208201356001600160401b0381116102c8576102ff920161052d565b61031b6109333660046108f0565b90612464565b346102c85761032161060f61094f366004610426565b61246e565b346102c857610964366004610388565b61032161060f612504565b906020828203126102c85781356001600160401b0381116102c8576102ff920161052d565b346102c85761031b6109a736600461096f565b612525565b346102c85761032161047a6109c2366004610426565b61252e565b346102c85761032161060f6109dd3660046108c1565b612537565b346102c8576109f2366004610388565b61031b6125a9565b805182526102ff9160408101916020015190602081840391015261078d565b906102ff916109fa565b90610a39610a2f835190565b8083529160200190565b9081610a4b6020830284019460200190565b926000915b838310610a5f57505050505090565b90919293946020610a82610a7b83856001950387528951610a19565b9760200190565b9301930191939290610a50565b90151581526040602082018190526102ff92910190610a23565b346102c857610ac1610abc3660046108c1565b612662565b90610321610ace60405190565b92839283610a8f565b6102ff6102ff6102ff9290565b90610aee90610ad7565b600052602052604060002090565b6102ff9081565b6102ff9054610afc565b634e487b7160e01b600052602260045260246000fd5b9060016002830492168015610b43575b6020831014610b3e57565b610b0d565b91607f1691610b33565b80546000939291610b6a610b6083610b23565b8085529360200190565b9160018116908115610bbc5750600114610b8357505050565b610b969192939450600052602060002090565b916000925b818410610ba85750500190565b805484840152602090930192600101610b9b565b92949550505060ff1916825215156020020190565b906102ff91610b4d565b906102da610bf592610bec60405190565b93848092610bd1565b038361049c565b6102ff905b60ff1690565b6102ff9054610bfc565b610c1c906004610ae4565b610c2581610b03565b91610c3260018301610bdb565b91610c3f60028201610c07565b91610c4c60038301610b03565b91610c5960048201610bdb565b91610c6660058301610c07565b91610c7360068201610b03565b916102ff6008610c8560078501610bdb565b9301610b03565b99989690610cf06102da9994610d0e97610ce36101009a988f606090610cdf610cd3610cfa99610d019c610cc66101208601926000870152565b84820360208601526103b6565b60ff9097166040830152565b0152565b8d820360808f01526103b6565b94151560a08c0152565b60c08a0152565b87820360e08901526103b6565b940152565b346102c857610321610d2e610d29366004610426565b610c11565b95610d4199979995919594929460405190565b998a998a610c8c565b6102ff916008021c81565b906102ff9154610d4a565b6000610d706102ff926005610ae4565b610d55565b346102c85761032161060f610d8b366004610426565b610d60565b346102c857610da0366004610388565b61032161047a612727565b346102c857610dbb366004610388565b61032161041a612754565b8015156102c1565b905035906102da82610dc6565b91906040838203126102c8576102ff906020610df78286610629565b9401610dce565b346102c85761031b610e11366004610ddb565b90612761565b916060838303126102c85782356001600160401b0381116102c85782610e3e91850161052d565b9260208101356001600160401b0381116102c85783610e5e91830161052d565b9260408201356001600160401b0381116102c8576102ff920161052d565b346102c85761031b610e8f366004610e17565b916129c0565b90610eae61077d610ea4845190565b8084529260200190565b9060005b818110610ebf5750505090565b909192610edc610ed56001928651815260200190565b9460200190565b929101610eb2565b60208082526102ff92910190610e95565b610321610f0c610f063660046102dc565b90612b85565b60405191829182610ee4565b90610f2561050e836104d6565b918252565b610f346005610f18565b640352e302e360dc1b602082015290565b6102ff610f2a565b6102ff610f45565b6102ff610f4d565b346102c857610f6d366004610388565b61032161041a610f55565b346102c857610f88366004610388565b610321610f0c612df9565b906080828203126102c857610fa88183610629565b92610fb68260208501610629565b92610fc483604083016102cd565b9260608201356001600160401b0381116102c8576102ff920161052d565b346102c85761031b610ff5366004610f93565b92919091612e03565b346102c85761032161041a611014366004610426565b612e50565b61032161060f61102a366004610426565b612ede565b91906040838203126102c8576102ff906020610df782866102cd565b346102c85761031b61105e36600461102f565b90613076565b346102c85761031b6110773660046108c1565b61312a565b91906040838203126102c8576102ff9060206110988286610629565b9401610629565b346102c8576103216103756110b536600461107c565b90613133565b6102ff916008021c6001600160a01b031690565b906102ff91546110bb565b6102ff600060036110cf565b346102c8576110f6366004610388565b61032161047a6110da565b346102c85761031b6111143660046108c1565b6131b3565b906102ff9161078d565b9061112f610a2f835190565b90816111416020830284019460200190565b926000915b83831061115557505050505090565b90919293946020611171610a7b83856001950387528951611119565b9301930191939290611146565b60408082526102ff93919261119591840190610e95565b916020818403910152611123565b346102c8576111b3366004610388565b6111bb6131fd565b906103216111c860405190565b9283928361117e565b906102da916111de613312565b6112e1565b156111ea57565b60405162461bcd60e51b815260206004820152601860248201527710d85c99081d1e5c1948191bd95cc81b9bdd08195e1a5cdd60421b604482015280606481015b0390fd5b1561123657565b60405162461bcd60e51b815260206004820152602160248201527f41646420616d6f756e74206d7573742062652067726561746572207468616e206044820152600360fc1b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b91906112a6565b9290565b82018092116112b157565b611285565b90600019905b9181191691161790565b906112d66102ff6112dd92610ad7565b82546112b6565b9055565b9061133b600661132b6102da946113106113076000611301846004610ae4565b01610b03565b82905b146111e3565b61132461131d6000610ad7565b861161122f565b6004610ae4565b019161133683610b03565b61129b565b906112c6565b906102da916111d1565b6102ff90613349565b6102ff90610bdb565b6102ff600061136a613372565b01611354565b6102ff9061137d81613396565b506133d6565b906102ff969594939291611395613312565b61197f565b156113a157565b60405162461bcd60e51b81526020600482015260146024820152734e616d652063616e6e6f7420626520656d70747960601b6044820152606490fd5b610c016102ff6102ff9290565b156113f157565b60405162461bcd60e51b815260206004820152602260248201527f4d617820706c6179657273206d7573742062652067726561746572207468616e604482015261203160f01b6064820152608490fd5b1561144857565b60405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e2030000000006044820152606490fd5b1561149457565b60405162461bcd60e51b815260206004820152601f60248201527f4d6178206d696e74206d7573742062652067726561746572207468616e2030006044820152606490fd5b156114e057565b60405162461bcd60e51b81526020600482015260166024820152755261726974792063616e6e6f7420626520656d70747960501b6044820152606490fd5b60001981146112b15760010190565b6001600160401b0381116104bd5760200290565b61050e6102ff9161152d565b6102ff6101406104c2565b9160001960089290920291821b911b6112bc565b919061157d6102ff6112dd93610ad7565b908354611558565b6102da9160009161156c565b81811061159c575050565b806115aa6000600193611585565b01611591565b9190601f81116115bf57505050565b6115d16102da93600052602060002090565b906020601f8401819004830193106115f3575b6020601f909101040190611591565b90915081906115e4565b9060001960089091021c191690565b81611616916115fd565b906002021790565b90611627815190565b906001600160401b0382116104bd5761164a826116448554610b23565b856115b0565b602090601f8311600114611678576112dd92916000918361166d575b505061160c565b015190503880611666565b601f1983169161168d85600052602060002090565b9260005b8181106116cc575091600293918560019694106116b2575b50505002019055565b6116c2910151601f8416906115fd565b90553880806116a9565b91936020600181928787015181550195019201611691565b906102da9161161e565b9060ff906112bc565b610c016102ff6102ff9260ff1690565b906117176102ff6112dd926116f7565b82546116ee565b906117176102ff6112dd92151590565b818102929181159184041417156112b157565b91909182821061175057505050565b6102da9281019101611591565b90600160401b81116104bd576102da91600a90611741565b600a9161178b6112a26001926102ff868661175d565b92049160005b83811061179e5750505050565b60019060206117ae6102ff865190565b9401938184015501611791565b906102da91611775565b60096118a86101206102da946117e56117df600083015190565b866112c6565b6117fc6117f3602083015190565b600187016116e4565b61181661180d604083015160ff1690565b60028701611707565b61182d611824606083015190565b600387016112c6565b61184461183b608083015190565b600487016116e4565b61185d61185460a0830151151590565b6005870161171e565b61187461186b60c083015190565b600687016112c6565b61188b61188260e083015190565b600787016116e4565b6118a361189a61010083015190565b600887016112c6565b015190565b91016117bb565b906102da916117c5565b634e487b7160e01b600052603260045260246000fd5b80548210156118f2576118e9600191600052602060002090565b91020190600090565b6118b9565b80549190600160401b8310156104bd578261191a9160016102da950181556118cf565b9061156c565b92916102ff969461195d6119729461195661194a61196a9660c08a01908a820360008c01526103b6565b60ff9095166020890152565b6040870152565b84820360608601526103b6565b936080830152565b60a08184039101526103b6565b959091929394955061198e8290565b519560009661199c88610ad7565b106119a69061139a565b6001966119b2886113dd565b60ff8616116119c0906113ea565b6119c981610ad7565b86116119d490611441565b6119dd81610ad7565b82116119e89061148d565b82516119f382610ad7565b106119fd906114d9565b611a0688610b03565b97611a1081610b03565b611a199061151e565b611a2390826112c6565b611a2d600a611541565b90611a3783610ad7565b90611a428284860152565b611a4d826020850152565b611a58826040850152565b611a63826060850152565b611a6e826080850152565b611a798260a0850152565b611a848260c0850152565b611a8f8260e0850152565b611a9b82610100850152565b611aa782610120850152565b8a611ab061154d565b948501526020840187905260ff88166040850152611acf896060860152565b608084018a9052151560a0840152611ae88460c0850152565b60e08301859052610100830152610120820152611b06886004610ae4565b90611b10916118af565b611b1b8760066118f7565b611b2487610ad7565b95611b2e60405190565b958695611b3b9587611920565b037f3a5e2e36ac53adb658032492c66ca1b865ed4d8dbf9f248ddaecdc1457c6dd8691a290565b6102ff9594939291906000611383565b6102da9133916133fb565b6102ff6002611b8a613408565b015490565b6102ff9061043a565b6102ff9054611b8f565b61043a6102ff6102ff9290565b6102ff90611ba2565b6102ff9061043a906001600160a01b031682565b6102ff90611bb8565b6102ff90611bcc565b905051906102da82610dc6565b906020828203126102c8576102ff91611bde565b6040513d6000823e3d90fd5b15611c1257565b60405162461bcd60e51b815260206004820152601860248201527713db9b1e4819d85b59481d18589b194818d85b8818d85b1b60421b6044820152606490fd5b9060009182611c616003611b98565b611c7b611c75611c7084611baf565b61043a565b9161043a565b03611c93575b50611c8e6102da93611c0b565b611d7c565b9250611caa611ca5611ca56003611b98565b611bd5565b926020611cb660405190565b948590635ab8933560e11b82528180611cd2336004830161044f565b03915afa8015611d33576102da948291611d04575b5015611cfb5750611c8e60015b9350611c81565b611c8e90611cf4565b611d26915060203d602011611d2c575b611d1e818361049c565b810190611beb565b38611ce7565b503d611d14565b611bff565b15611d3f57565b60405162461bcd60e51b81526020600482015260156024820152742737ba1030b8383937bb32b21037b91037bbb732b960591b6044820152606490fd5b611dd5611dcb7fd2a1c8eed5b52b5f7dd72d9b49c8901a19690207345595b61a5c633a4978d41b92611dc2611db08661342c565b611dbc611c758461043a565b14611d38565b611ca585613446565b9261061360405190565b0390a2565b906102da91611c52565b604090611e0b6102da9496959396611e0460608401986000850190610446565b6020830152565b0190610446565b9091600092611e2084611baf565b611e298161043a565b611e328361043a565b14611e7d5750611e4490823391613472565b91611e4e8161043a565b611e578461043a565b03611e625750505050565b6364283d7b60e01b8452839261122b92909160048501611de4565b8461122b8192633250574960e11b83526004830161044f565b9160206102da929493610cdf60408201966000830190610446565b90610aee90611bd5565b611ec3613408565b611ecf6102ff83612537565b831015611ef45791611eea611eef9260006102ff9501611eb1565b610ae4565b610b03565b63295f44f760e21b6000908152611f0d84846004611e96565b036000fd5b906102da9594939291611f23613312565b611f76565b91611f69916102ff9694611f54611f6193611f4d60a0880194600089019060ff169052565b6020870152565b84820360408601526103b6565b936060830152565b60808184039101526103b6565b947f89f111784ea123a14b3f97adf8c42611da99ed48f03cb179d205f58173076bf294612070611dd59394959761206b846007886120588d8c612051600491611fce611fc760006113018d87610ae4565b8b9061130a565b611fe5611fdb60016113dd565b60ff8816116113ea565b611ff9611ff26000610ad7565b8211611441565b6120108c61200a6107556000610ad7565b1161148d565b61202e61201b895190565b6120286107556000610ad7565b116114d9565b61204861203e6102ff8c86610ae4565b9660028801611707565b600386016112c6565b83016116e4565b61206587600683016112c6565b016116e4565b610ad7565b9661207a60405190565b95869586611f28565b906102da9594939291611f12565b612099613312565b6102da612143565b156120a857565b60405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b6044820152606490fd5b3d156120fe576120f33d610f18565b903d6000602084013e565b606090565b1561210a57565b60405162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b6044820152606490fd5b61214c30611bd5565b3161216161215a6000610ad7565b82116120a1565b61218d600080612175611ca5611ca5612727565b60405160009186905af16121876120e4565b50612103565b7f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5611dd5611dcb611ca5612727565b6102da612091565b369037565b906102da6121df6121d984611541565b9361152d565b836121c4565b6102ff600a6121c9565b6121f761154d565b906000825260208080808080808080808b01606081520160008152016000815201606081520160008152016000815201606081520160008152016122396121e5565b905250565b6102ff6121ef565b612252610755600a9390565b6000915b8383106122635750505050565b61228461227d60019261227585610b03565b815260200190565b9260010190565b92019190612256565b906103ea8161014093612246565b906102da610bf5926122ac60405190565b9384809261228d565b906102da61239360096122c661154d565b946122d76122d382610b03565b8752565b6122ed6122e660018301610bdb565b6020880152565b6123066122fc60028301610c07565b60ff166040880152565b61231c61231560038301610b03565b6060880152565b61233261232b60048301610bdb565b6080880152565b61234a61234160058301610c07565b151560a0880152565b61236061235960068301610b03565b60c0880152565b61237661236f60078301610bdb565b60e0880152565b61238d61238560088301610b03565b610100880152565b0161229b565b610120840152565b6102ff906122b5565b6123cb611324611eef6102ff936123b961223e565b506123c381613396565b506005610ae4565b61239b565b6102ff6000610f18565b6102ff6123d0565b90916102da926123f06123da565b92612e03565b61241e610c0160406124166123cb611324611eef612425976123b9600090565b015160ff1690565b9160ff1690565b111590565b61243390612537565b6124406107556000610ad7565b1190565b906102da9161245161347d565b906102da9161245f816134f7565b613521565b906102da91612444565b612476613408565b6124816102ff611b7d565b82101561249e576102ff91600261249892016118cf565b90610d55565b60008061122b846124ae83611baf565b63295f44f760e21b845260048401611e96565b6102ff906124cd6135db565b6124fb565b6102ff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc610ad7565b506102ff6124d2565b6102ff60006124c1565b6102da9061251a613312565b6102da9060026116e4565b6102da9061250e565b6102ff90613396565b61253f613372565b600061254a81611baf565b6125538161043a565b61255c8561043a565b146125735750506102ff916003611eef9201611eb1565b6322718ad960e21b8252819061122b906004830161044f565b612594613312565b6102da6102da6125a46000611baf565b613617565b6102da61258c565b6001600160401b0381116104bd5760208091020190565b90610f2561050e836125b1565b6102ff60406104c2565b6125e76125d5565b9060008252602080830161223961223e565b6102ff6125df565b60005b82811061261057505050565b60209061261b6125f9565b8184015201612604565b906102da61263b612635846125c8565b936125b1565b601f190160208401612601565b90612651825190565b8110156118f2576020809102010190565b61266b81612537565b60009061267a61075583610ad7565b119182156127125761268b81612537565b9261269584612625565b9485916126a185610ad7565b865b81101561270757612700816126bb6126a39388611ebb565b6126e4611e046126d2611324611eef856005610ae4565b6123cb6126dd6125d5565b948d860152565b6126ee828c612648565b526126f9818b612648565b5060010190565b90506126a1565b509550909350915050565b506127226102ff91939293610ad7565b612625565b6102ff60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c1993005b01611b98565b6102ff600161136a613372565b6102da91903361368a565b6102ff9060401c610c01565b6102ff905461276c565b6102ff905b6001600160401b031690565b6102ff9054612782565b6127876102ff6102ff9290565b906001600160401b03906112bc565b6127876102ff6102ff926001600160401b031690565b906127df6102ff6112dd926127b9565b82546127aa565b9060ff60401b9060401b6112bc565b906128056102ff6112dd92151590565b82546127e6565b6103569061279d565b6020810192916102da919061280c565b907ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0092839061286361285d61285984612778565b1590565b92612793565b926000946128708661279d565b6001600160401b038616148061296c575b60019561289d6128908861279d565b916001600160401b031690565b149081612948575b155b908161293f575b5061293057906128d99291846128d0886128c78961279d565b9a01998a6127cf565b61292157612973565b6128e257505050565b61291061291c927fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2946127f5565b60405191829182612815565b0390a1565b61292b86896127f5565b612973565b63f92ee8a960e01b8652600486fd5b159050386128ae565b90506128a761295630611bd5565b3b6129636107558a610ad7565b149190506128a5565b5083612881565b6129a1929161298191613733565b612989613745565b61299233613762565b61299a613745565b60026116e4565b6102da6129ae6001610ad7565b6129b98160006112c6565b60016112c6565b906102da9291612825565b156129d257565b60405162461bcd60e51b8152602060048201526014602482015273436172642074797065206e6f742061637469766560601b6044820152606490fd5b15612a1557565b60405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606490fd5b15612a6157565b60405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606490fd5b15612aa457565b60405162461bcd60e51b815260206004820152602360248201527f4d6178206d696e74207265616368656420666f7220746869732063617264207460448201526279706560e81b6064820152608490fd5b906102da612b05612635846125c8565b601f1901602084016121c4565b919082039182116112b157565b15612b2657565b60405162461bcd60e51b815260206004820152600d60248201526c1499599d5b990819985a5b1959609a1b6044820152606490fd5b604090610cdf612b7d6102da9597969460608401908482036000860152610e95565b966020830152565b9190612b956102ff846004610ae4565b90612ba9612ba283610b03565b859061130a565b612bbd612bb860058401610c07565b6129cb565b600091612bd3612bcc84610ad7565b8311612a0e565b6003810193612bf8612bf06102ff85612beb89610b03565b61172e565b341015612a5a565b6008820190612c286006612c0f8661133686610b03565b940193612c216107556102ff87610b03565b1115612a9d565b612c3184612af5565b93612c3b86610ad7565b81811015612cd75780612ccc8a612cc7612cae612cc08c612cbd612cd2988e612c918f8f6107556102ff612c8b612c2193611eef612c85612c7c6001610ad7565b61133684610b03565b826112c6565b93610b03565b612c9a84610b03565b958461133b612ca98997610b03565b61151e565b612cb8843361376b565b612648565b52565b6005610ae4565b6112c6565b60010190565b612c3b565b5090969250612d0c9150612beb7f9e0f55090ce950de8278f10f58780bc67078a861e5667651b71f46f12f16b31a9496610b03565b92833411612d3c575b50612d1f33611bd5565b92612d36612d2c60405190565b9283928784612b5b565b0390a290565b80612d7691612d4b8634612b12565b612d57611ca533611bd5565b90612d6160405190565b90818003925af1612d706120e4565b50612b1f565b38612d15565b90612d97612d8b610ea4845490565b92600052602060002090565b9060005b818110612da85750505090565b909192612dc4612dbd60019261227587610b03565b9460010190565b929101612d9b565b906102ff91612d7c565b906102da610bf592612de760405190565b93848092612dcc565b6102ff90612dd6565b6102ff6006612df0565b906102da939291612e15838383611e12565b336137dc565b6103ea612e3392602092612e2d815190565b94859290565b93849101610393565b612e4a906102ff9392612e1b565b90612e1b565b611eef612e5f916123b9606090565b612e76600461136a612e6f6138fa565b9382610ae4565b8151612e856107556000610ad7565b1115612eb9576102ff612ead916102ff93612e9f60405190565b938492602084019283612e3c565b9081038252038261049c565b50506102ff6123da565b9081526060810193926102da929091604091610cdf90611e04565b612eec6102ff826004610ae4565b90612ef961130783610b03565b612f08612bb860058401610c07565b612f5e6003830192612f1f612bf06102ff86610b03565b612f486008820191612f426107556102ff6006612f3b87610b03565b9401610b03565b10612a9d565b61133b612f556001610ad7565b61133683610b03565b7ffeb0a6d9a39332a80a0bf5d24af7d578c47f681cb3596305f2093d63f2827042612fd4612f8c6000610b03565b93612fa4612f9d612ca96000610b03565b60006112c6565b612fae853361376b565b612fbd84612cc7876005610ae4565b612fc96102ff82610b03565b3411612ff557610b03565b91612fde33611bd5565b92612d36612feb60405190565b9283928784612ec3565b611eef600080612d4b61300785610b03565b34612b12565b906102da9161301a613312565b611dd561306c7fb58f0f5a57890402ca596a98b9a57bed7713f59eb09a71d5167e174d8716814c926130556113076000611301846004610ae4565b61206b856005613066846004610ae4565b0161171e565b9261037960405190565b906102da9161300d565b6102da9061308c613312565b6130ff565b1561309857565b60405162461bcd60e51b8152602060048201526019602482015278496e76616c69642067616d65206d61696e206164647265737360381b6044820152606490fd5b906001600160a01b03906112bc565b906130f86102ff6112dd92611bd5565b82546130d9565b6102da90613123613113611c706000611baf565b61311c8361043a565b1415613091565b60036130e8565b6102da90613080565b6102ff9161315761315c92613146600090565b506005613151613372565b01611eb1565b611eb1565b610c07565b6102da9061316d613312565b600061317881611baf565b6131818161043a565b61318a8461043a565b1461319a5750506102da90613617565b631e4fbdf760e01b8252819061122b906004830161044f565b6102da90613161565b60005b8281106131cb57505050565b6020906131d661223e565b81840152016131bf565b906102da6131f0612635846125c8565b601f1901602084016131bc565b6132076000610ad7565b90815b60066132176102ff825490565b82101561326057600561323361132461249885613239956118cf565b01610c07565b61324b575b60010161320a565b61320a565b916132586132469161151e565b92905061323e565b505061327461326e83612af5565b926131e0565b61327e6000610ad7565b805b600661328d6102ff825490565b82101561330c57612498826132a1926118cf565b6004866132b360056132338585610ae4565b6132ca575b5050506132c59060010190565b613280565b6123cb838693611eea61330396612cbd6132c5999a6132e897612648565b6132f28287612648565b526132fd8186612648565b5061151e565b919038866132b8565b50505090565b61331a612727565b3390613328611c758361043a565b036133305750565b63118cdaa760e01b600090815290611f0d90600461044f565b63780e9d6360e01b6001600160e01b0319821614908115613368575090565b6102ff9150613904565b7f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab007930090565b61339f8161342c565b906000906133af611c7083611baf565b6133b88461043a565b146133c257505090565b637e27328960e01b82526004820152602490fd5b6133f66102ff916133e5600090565b5060046133f0613372565b01610ae4565b611b98565b916001916102da9361394f565b7f645e039705490088daad89bae25049a34f4a9072d398537b1ab2425f24cbed0090565b6133f66102ff9161343b600090565b5060026133f0613372565b60009061345282611baf565b613469611c75613463838581613472565b9261043a565b146133c2575050565b6102ff929190613a88565b61348630611bd5565b7f0000000000000000000000000000000000000000000000000000000000000000906134b4611c758361043a565b149081156134d6575b506134c457565b63703e46dd60e11b6000908152600490fd5b90506134e6611c75613463613b21565b1415386134bd565b506102da613312565b6102da906134ee565b905051906102da826102bf565b906020828203126102c8576102ff91613500565b9161352e611ca584611bd5565b91602061353a60405190565b6352d1902d60e01b815293849060049082905afa600093816135aa575b5061357457634c9c8ce360e01b6000908152611f0d85600461044f565b9091926135826102ff6124d2565b8403613593576102da929350613b31565b632a87526960e21b60009081526004859052602490fd5b6135cd91945060203d6020116135d4575b6135c5818361049c565b81019061350d565b9238613557565b503d6135bb565b6135e430611bd5565b613610611c757f000000000000000000000000000000000000000000000000000000000000000061043a565b036134c457565b6136576136517f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300611ca58461364b83611b98565b926130e8565b91611bd5565b907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e061368260405190565b80805b0390a3565b613692613372565b60006136a0611c7082611baf565b6136a98561043a565b1461370457506136fa6136f483611ca5876136ef886131577f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319960056136859a01611eb1565b61171e565b93611bd5565b9361037960405190565b630b61174360e31b81528061122b856004830161044f565b906102da91613729613b9d565b906102da91613be6565b906102da9161371c565b6102da613b9d565b6102da61373d565b6102da90613759613b9d565b6102da90613bfc565b6102da9061374d565b6102da916137776123da565b91613c05565b905051906102da82610325565b906020828203126102c8576102ff9161377d565b90926137cf906137c86102ff96946137be60808601976000870190610446565b6020850190610446565b6040830152565b60608184039101526103b6565b600094929390843b6137f061075588610ad7565b116137fe575b505050505050565b6020928661380e611ca588611bd5565b9261383561381b60405190565b97889687958694630a85bd0160e11b86526004860161379e565b03925af18391816138c9575b50613884575061384f6120e4565b805161385d61075585610ad7565b0361387c5750633250574960e11b8252819061122b906004830161044f565b805190602001fd5b61389e630a85bd0160e11b5b916001600160e01b03191690565b036138b05750503880808080806137f6565b633250574960e11b8252819061122b906004830161044f565b6138ec91925060203d6020116138f3575b6138e4818361049c565b81019061378a565b9038613841565b503d6138da565b6102ff6002611354565b6380ac58cd60e01b6001600160e01b0319821614908115613934575b811561392a575090565b6102ff9150613c26565b6001600160e01b03198116635b5e139f60e01b149150613920565b92909161395a613372565b91808115613a6a575b613980575b50506102da9291600461397b9201610ae4565b6130e8565b61398984613396565b91600090613999611c7083611baf565b6139a28261043a565b141580613a50575b80613a3d575b613a2457505061397b926102da9594926004926139d4575b50925081939450613968565b6139dd90611bd5565b6139e686611bd5565b6139ef85610ad7565b917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925613a1a60405190565b600090a4386139c8565b63a9fbf51f60e01b8252819061122b906004830161044f565b50613a4b6128598286613133565b6139b0565b50613a5a8161043a565b613a638561043a565b14156139aa565b50613a78611c706000611baf565b613a818361043a565b1415613963565b9091613a95908383613c3a565b91613ac3613aa36000611baf565b613aac8161043a565b613ab58661043a565b03613b0057611c7083613dfa565b613acc8361043a565b03613adb576102ff9150613eaa565b613ae48261043a565b613aed8461043a565b03613af757505090565b6102ff91613e2b565b613b098461043a565b613b128661043a565b1461043a57611c708386613d77565b6102ff600061274e6102ff6124d2565b90613b3b82613f14565b613b4482611bd5565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b613b6e60405190565b600090a28051613b816107556000610ad7565b1115613b9357613b9091613f7a565b50565b50506102da613f57565b613ba8612859613fa1565b613bae57565b631afcd79f60e31b6000908152600490fd5b906102da91613bcd613b9d565b9060016102da92612065613bdf613372565b91826116e4565b906102da91613bc0565b6102da9061316d613b9d565b6102da90613bf0565b906102da9291613c158282613fca565b33613c206000611baf565b906137dc565b613c366301ffc9a760e01b613890565b1490565b90613cb58261397b836002613c4d613372565b613ca1613c598461342c565b9960008b86613c6783611baf565b93613c718561043a565b613c7a8261043a565b03613d66575b505050613c8c8261043a565b613c958d61043a565b03613d28575b5061043a565b613caa8661043a565b03613cfc5701610ae4565b613cca613cc46136f485611bd5565b91610ad7565b917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef613cf560405190565b600090a490565b613d23613d096001610ad7565b61133b613d198860038601611eb1565b916103ea83610b03565b6133f0565b613d349082878161394f565b613d608b61133b613d52613d486001610ad7565b9260038801611eb1565b91613d5c83610b03565b0390565b38613c9b565b613d6f92614040565b8b8638613c80565b613dc76000916102da93611eea84613dc7613d90613408565b93613d9a86612537565b95613db8600187019185613db1611eef8686610ae4565b9801611eb1565b95878103613dcc575b50610ae4565b611585565b613df490612cc7613de0611eef8b8b610ae4565b613dee81612cc7858d610ae4565b84610ae4565b38613dc1565b6102da90613e26613e09613408565b6102ff6002820191612cc7856003613e1f865490565b9301610ae4565b6118f7565b612cc76102da926001611eea936133f083612cc7613e47613408565b93613e63613e5482612537565b613e5d88610ad7565b90612b12565b98899186611eb1565b634e487b7160e01b600052603160045260246000fd5b80548015613ea5576000190190613ea2613e9c83836118cf565b90611585565b55565b613e6c565b613f0f6102da916102ff6000613dc7613ec1613408565b936002850194611eea6003613ee1613ed7895490565b613e5d6001610ad7565b920191612cc7613f01612498613efa611eef8888610ae4565b938b6118cf565b613dee8161191a858d6118cf565b613e82565b6000813b613f2461075583610ad7565b14613f3f57906102da91613f396102ff6124d2565b016130e8565b61122b8192634c9c8ce360e01b83526004830161044f565b6000613f6281610ad7565b3411613f6b5750565b63b398979f60e01b8152600490fd5b6000806102ff93613f89606090565b50602081519101845af4613f9b6120e4565b916140a0565b6102ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00612778565b600091613fd683611baf565b91613fe08361043a565b613fe98261043a565b1461402757613ff9918391613472565b614005611c758361043a565b0361400e575050565b6339e3563760e11b8252819061122b906004830161044f565b633250574960e11b8452838061122b856004830161044f565b9061404f6128598483856140fb565b61405857505050565b600092839261406c611c75611c7086611baf565b0361408957637e27328960e01b8352600483015250602481010390fd5b63177e802f60e01b835261122b9160048401611e96565b906140ab575061417f565b8151906000916140bd61075584610ad7565b14806140e6575b6140cd57505090565b639996b31560e01b8252819061122b906004830161044f565b50803b6140f561075584610ad7565b146140c4565b90614109611c706000611baf565b6141128261043a565b141592836141205750505090565b9091925061412d8261043a565b6141368461043a565b1492831561416b575b508215614151575b505038808061330c565b614163919250613463611c75916133d6565b143880614147565b6141789193508290613133565b913861413f565b805160009061419061075583610ad7565b111561419f5750805190602001fd5b63d6bda27560e01b8152600490fdfea164736f6c634300081c000a",
  "devdoc": {
    "details": "Niu Niu game room card NFT contract with dynamic card types",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "ERC721EnumerableForbiddenBatchMint()": [
        {
          "details": "Batch mint is not allowed."
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721OutOfBoundsIndex(address,uint256)": [
        {
          "details": "An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addType(string,uint8,uint256,string,uint256,string)": {
        "details": "Add a new card type",
        "params": {
          "maxPlayers": "Maximum number of players allowed",
          "name": "Name of the card type",
          "price": "Price to purchase this card",
          "uriSuffix": "URI suffix for metadata"
        },
        "returns": {
          "_0": "The ID of the newly created card type"
        }
      },
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "batchBuy(uint256,uint256)": {
        "details": "Batch purchase room cards",
        "params": {
          "amount": "Purchase quantity",
          "nftTypeId": "Card type ID"
        },
        "returns": {
          "_0": "Returns an array of minted room card IDs"
        }
      },
      "buy(uint256)": {
        "details": "Purchase a room card",
        "params": {
          "nftTypeId": "Card type ID"
        },
        "returns": {
          "_0": "Returns the minted room card ID"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "consume(address,uint256)": {
        "details": "Consume room card",
        "params": {
          "owner": "Owner of the room card",
          "tokenId": "Room card ID to be consumed"
        }
      },
      "getActiveTypes()": {
        "details": "Get all active card types",
        "returns": {
          "_0": "Arrays of card type IDs and card types"
        }
      },
      "getAllTypeIds()": {
        "details": "Get all card type IDs",
        "returns": {
          "_0": "Array of all card type IDs"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getType(uint256)": {
        "details": "Get card type for a specific token",
        "params": {
          "tokenId": "Room card ID"
        },
        "returns": {
          "_0": "Card type information"
        }
      },
      "getUserNfts(address)": {
        "details": "获取用户拥有的房卡信息",
        "params": {
          "userAddress": "用户地址"
        },
        "returns": {
          "details": "房卡详细信息数组",
          "has": "是否拥有房卡"
        }
      },
      "hasNft(address)": {
        "details": "Check if a user owns any room cards",
        "params": {
          "owner": "User address"
        },
        "returns": {
          "_0": "Whether the user owns any room cards"
        }
      },
      "initialize(string,string,string)": {
        "details": "Initialization function, replaces constructor"
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "details": "Set base URI",
        "params": {
          "baseURI": "New base URI"
        }
      },
      "setGameMainAddress(address)": {
        "details": "Set the game main contract address",
        "params": {
          "_gameMainAddress": "Game main contract address"
        }
      },
      "setTypeActive(uint256,bool)": {
        "details": "Set a card type's active status",
        "params": {
          "active": "New active status",
          "nftTypeId": "Card type ID"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "Override tokenURI function, returns different URIs based on room card type"
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateType(uint256,uint8,uint256,string,uint256,string)": {
        "details": "Update an existing card type",
        "params": {
          "maxPlayers": "New maximum number of players",
          "nftTypeId": "Card type ID to update",
          "price": "New price",
          "uriSuffix": "New URI suffix"
        }
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "validateParams(uint256,uint8)": {
        "details": "Validate if room card meets game parameter requirements",
        "params": {
          "maxPlayers": "Maximum number of players",
          "tokenId": "Room card ID"
        },
        "returns": {
          "_0": "Whether requirements are met"
        }
      },
      "withdraw()": {
        "details": "Withdraw ETH from the contract"
      }
    },
    "title": "BBRoomCard",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17050,
        "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 17052,
        "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
        "label": "_nftTypeIdCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17054,
        "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 17056,
        "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
        "label": "gameMainAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17061,
        "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
        "label": "nftTypes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(RoomCardNftType)19776_storage)"
      },
      {
        "astId": 17065,
        "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
        "label": "tokenNftTypes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 17068,
        "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
        "label": "_allNftTypeIds",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 17072,
        "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)25_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)25_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[25]",
        "numberOfBytes": "800"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(RoomCardNftType)19776_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RoomCardNftType)",
        "numberOfBytes": "32",
        "value": "t_struct(RoomCardNftType)19776_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoomCardNftType)19776_storage": {
        "encoding": "inplace",
        "label": "struct RoomCardNftType",
        "members": [
          {
            "astId": 19755,
            "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 19757,
            "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 19759,
            "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
            "label": "maxPlayers",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 19761,
            "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19763,
            "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
            "label": "uriSuffix",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 19765,
            "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
            "label": "active",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 19767,
            "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
            "label": "maxMint",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 19769,
            "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
            "label": "rarity",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 19771,
            "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
            "label": "minted",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 19775,
            "contract": "contracts/BBRoomCardNFT.sol:BBRoomCardNFT",
            "label": "__gap",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)10_storage"
          }
        ],
        "numberOfBytes": "608"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}